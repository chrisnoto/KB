(1) 底层数据（例如mysql, hbase等等）允许被穿透，而且不考虑高可用性，可以考虑Redis-Standalone类型。
缺点： 非高可用、受单机影响扩展性(容量，读写等)有限
优点：结构简单
(2) 如想保证Redis的高可用（通过主从和sentinel机制），可以选择Redis-Sentinel类型
缺点：受单机影响扩展性(容量，读写等)有限   内存/QPS受限于单机
优点：高可用，结构相对简单
(3) 如想保证高可用、可扩展、大容量等要求，可以选择Redis-Cluster 下面给一些建议：
并不是说Redis-Cluster比其他两种类型好，用户需要根据自己的需求选择（比如内存需求量不大，保证高可用选择Redis-Sentinel类型就足够了）
如果当前或者未来需要的内存量超过6个G， 建议选择Redis-Cluster类型。

############主从复制原理 ################
1 Slave执行replicaof命令后，从节点根据当前状态，发送 psync命令给 master：

如果从节点从未执行过 replicaof ，则从节点发送 psync ? -1，向主节点发送全量复制请求；
如果从节点之前执行过 replicaof 则发送 psync <runID> <offset>, runID 是上次复制保存的主节点 runID，offset 是上次复制截至时从节点保存的复制偏移量。

2 主节点根据接受到的psync命令和当前服务器状态，决定执行全量复制还是部分复制：

runID 与从节点发送的 runID 相同，且从节点发送的 slave_repl_offset 之后的数据在 repl_backlog_buffer 缓冲区中都存在，则回复 CONTINUE，表示将进行部分复制，从节点等待主节点发送其缺少的数据即可；
runID 与从节点发送的 runID 不同，或者从节点发送的 slave\_repl\_offset 之后的数据已不在主节点的 repl_backlog_buffer 缓冲区中 (在队列中被挤出了)，则回复从节点 FULLRESYNC <runid> <offset>，表示要进行全量复制，
其中 runID 表示主节点当前的 runID，offset 表示主节点当前的 offset，从节点保存这两个值，以备使用。

一个从库如果和主库断连时间过长，造成它在主库 repl_backlog_buffer 的 slave\_repl\_offset 位置上的数据已经被覆盖掉了，此时从库和主库间将进行全量复制。

############  Redis 集群 ##################
使用redis主從 + 哨兵（sentinel）+ 漂移VIP的方案搭建了一個redis高可用系統，但這個系統保證的是單個redis例項的高可用，所以適合業務比較小的應用。
如果業務比較大，併發量比較高，建議搭建redis叢集，比如官方redis cluster，還有開源的codings叢集

###############哨兵Sentnel高可用########

哨兵主要任务
1 监控 master 与 slave 运行状态，判断是否客观下线；
2 master 客观下线后，选择一个 slave 切换成 master；
3 通知 slave 和客户端新 master 信息。


哨兵集群原理
为了避免单个哨兵故障后无法进行主从切换，以及为了减少误判率，又引入了哨兵集群；哨兵集群又需要有一些机制来支撑它的正常运行：

1 基于 pub/sub 机制实现哨兵集群之间的通信；
2 基于 INFO 命令获取 slave 列表，帮助 哨兵与 slave 建立连接；
3 通过哨兵的 pub/sub，实现了与客户端和哨兵之间的事件通知。

主从切换，并不是随意选择一个哨兵就可以执行，而是通过投票仲裁，选择一个 Leader，由这个 Leader 负责主从切换。

主观下线与客观下线的区别
简单来说，主观下线是哨兵自己认为节点宕机，而客观下线是不但哨兵自己认为节点宕机，而且该哨兵与其他哨兵沟通后，达到一定数量的哨兵都认为该哥们嗝屁了。

基于 pub/sub 机制实现哨兵集群之间的通信；  如 subscribe +sdown
master 下线事件
+sdown：进入“主观下线”状态；
-sdown：退出“主观下线”状态；
+odown：进入“客观下线”状态；
-odown：退出“客观下线”状态；
slave 重新配置事件
+slave-reconf-sent：哨兵发送 replicaof 命令重新配置从库；
+slave-reconf-inprog：slave 配置了新 master，但是尚未进行同步；
+slave-reconf-done：slave 配置了新 master，并与新 master 完成了数据同步；
新主库切换
+switch-master：master 地址发生了变化。

30s(主观下线)或者50s（客观下线）

channel
订阅 __sentinel__:hello
127.0.0.1:6379> subscribe __sentinel__:hello
Reading messages... (press Ctrl-C to quit)
1) "subscribe"
2) "__sentinel__:hello"
3) (integer) 1
1) "message"
2) "__sentinel__:hello"
3) "172.28.0.4,26379,b501bcf10228d3a08d3969854595573181812d5b,2,mymaster,172.28.0.2,6379,0"
1) "message"
2) "__sentinel__:hello"
3) "172.28.0.6,26379,9f69b40aed4db5fd43772bd32c43e4de6017b14c,2,mymaster,172.28.0.2,6379,0"
1) "message"
2) "__sentinel__:hello"
3) "172.28.0.5,26379,37fe7a7a5cc397f8ddf6436bdc03e811b9e212e0,2,mymaster,172.28.0.2,6379,0"

>>> import redis
>>> r=Redis(host='10.67.50.152',port="5002",password="123456")
>>> p=r.pubsub()
>>> p.subscribe('__sentinel__:hello')
>>> p.get_message()
{'type': 'subscribe', 'pattern': None, 'channel': b'__sentinel__:hello', 'data': 1}
>>> print(p.get_message())
{'type': 'message', 'pattern': None, 'channel': b'__sentinel__:hello', 'data': b'10.67.50.152,26379,dc077620a27341aaf6d24ef94a4c7cf420032fae,3,redis-master,10.67.50.152,5002,3'}
>>> print(p.get_message())
{'type': 'message', 'pattern': None, 'channel': b'__sentinel__:hello', 'data': b'10.67.50.152,26380,0f1a5180deefc738a26af72742bffe799db3c192,3,redis-master,10.67.50.152,5002,3'}
>>> print(p.get_message())
{'type': 'message', 'pattern': None, 'channel': b'__sentinel__:hello', 'data': b'10.67.50.152,26381,afe1f4e1aedfae73c097e1b4e35c72dd27e650e5,3,redis-master,10.67.50.152,5002,3'}


############################## sentinel
1 容器快速部署
[root@rancher sentinel]# cat docker-compose.yml
version: '3.7'

networks:
  app-tier:
    driver: bridge

services:
  redis:
    image: 'bitnami/redis:latest'
    environment:
      - REDIS_REPLICATION_MODE=master
      - REDIS_PASSWORD=Foxconn123
    networks:
      - app-tier
    ports:
      - '6379'
  redis-slave:
    image: 'bitnami/redis:latest'
    environment:
      - REDIS_REPLICATION_MODE=slave
      - REDIS_MASTER_HOST=redis
      - REDIS_MASTER_PASSWORD=Foxconn123
      - REDIS_PASSWORD=Foxconn456
    ports:
      - '6379'
    depends_on:
      - redis
    networks:
      - app-tier
  redis-sentinel:
    image: 'bitnami/redis-sentinel:latest'
    environment:
      - REDIS_MASTER_PASSWORD=Foxconn123
    depends_on:
      - redis
      - redis-slave
    ports:
      - '26379-26381:26379'
    networks:
      - app-tier

docker-compose up -d	  快速启动
docker-compose up --scale redis-sentinel=3 --scale redis-slave=2 -dsentinel扩容至3节点 slave扩容至2节点
   

1.1 源码安装redis-stable v7
tar zxvf redis-stable.tar.gz
cd redis-stable
yum install systemd-devel make gcc -y
make PREFIX=/usr/local/redis/ USE_SYSTEMD=yes install
#如需要TLS，则添加BUILD_TLS=yes
2 测试	  
127.0.0.1:26379> help @sentinel
127.0.0.1:26379> SENTINEL SENTINELS mymaster       #查看mymaster有多少sentinel
127.0.0.1:26379> SENTINEL REPLICAS mymaster
127.0.0.1:26379> SENTINEL slaves mymaster
127.0.0.1:26379> info sentinel
# Sentinel
sentinel_masters:1
sentinel_tilt:0
sentinel_tilt_since_seconds:-1
sentinel_running_scripts:0
sentinel_scripts_queue_length:0
sentinel_simulate_failure_flags:0
master0:name=mymaster,status=ok,address=172.28.0.2:6379,slaves=2,sentinels=3
127.0.0.1:26379>











################# redis cluster 执行命令
-c    Enable cluster mode (follow -ASK and -MOVED redirections).
[root@389dsbak ~]# redis-cli -a 123456 -h 10.67.50.146 -p 6002 -c hgetall server:1{TJ}
Warning: Using a password with '-a' or '-u' option on the command line interface may not be safe.
 1) "name"
 2) "vStianjin{TJ}1"
 3) "sn"
 4) "110001"
 5) "ip"
 6) "10.66.13.12"
 7) "location"
 8) "Tianjin"
 9) "owner"
10) "senchen"
11) "department"
12) "IT"

-- cluster   Cluster Manager command and arguments
[root@389dsbak ~]# redis-cli --cluster-only-masters --cluster call 10.67.50.146:6003 cluster keyslot server:2
>>> Calling cluster keyslot server:2
10.67.50.146:6003: 939
10.67.50.146:6002: 939
10.67.50.146:6005: 939

[root@389dsbak ~]# redis-cli --cluster-only-masters --cluster call 10.67.50.146:6003 hgetall server:2
>>> Calling hgetall server:2
10.67.50.146:6003: MOVED 939 10.67.50.146:6005

10.67.50.146:6002: MOVED 939 10.67.50.146:6005

10.67.50.146:6005: name
server2
sn
1000012115
ip
10.66.7.5
location
Tianjin
rack
r3599
owner
chensen
owner_email
sen.chen@mail.foxconn.com
department
IT
[root@389dsbak ~]# redis-cli --cluster-only-replicas --cluster call 10.67.50.146:6003 hgetall server:2
>>> Calling hgetall server:2
10.67.50.146:6001: MOVED 939 10.67.50.146:6005

10.67.50.146:6006: MOVED 939 10.67.50.146:6005

10.67.50.146:6004: MOVED 939 10.67.50.146:6005

[root@389dsbak ~]# redis-cli --cluster-only-masters --cluster info 10.67.50.146:6001
10.67.50.146:6005 (684478ab...) -> 47241 keys | 6462 slots | 1 slaves.
10.67.50.146:6002 (36ca73ad...) -> 47241 keys | 4461 slots | 1 slaves.
10.67.50.146:6003 (924b336f...) -> 47235 keys | 5461 slots | 1 slaves.
[OK] 141717 keys in 3 masters.

[root@389dsbak ~]# redis-cli --cluster-only-replicas --cluster fix 10.67.50.146:6005
10.67.50.146:6005 (684478ab...) -> 47211 keys | 6462 slots | 1 slaves.
10.67.50.146:6002 (36ca73ad...) -> 47220 keys | 4461 slots | 1 slaves.
10.67.50.146:6003 (924b336f...) -> 47217 keys | 5461 slots | 1 slaves.
[OK] 141648 keys in 3 masters.
8.65 keys per slot on average.
>>> Performing Cluster Check (using node 10.67.50.146:6005)
M: 684478ab1cca356a7b22273ad98166bb36a9c31a 10.67.50.146:6005
   slots:[0-5460],[6000-7000] (6462 slots) master
   1 additional replica(s)
S: a5d28b73594017d24ebbf4d0680ace853c7ea0b2 10.67.50.146:6006
   slots: (0 slots) slave
   replicates 36ca73ad5ee6b887cf8f9ce740a33947cb6f2f71
M: 36ca73ad5ee6b887cf8f9ce740a33947cb6f2f71 10.67.50.146:6002
   slots:[5461-5999],[7001-10922] (4461 slots) master
   1 additional replica(s)
S: 898d44ab2f8f85aa9a9e4672c99e88cd4e469ba6 10.67.50.146:6001
   slots: (0 slots) slave
   replicates 684478ab1cca356a7b22273ad98166bb36a9c31a
M: 924b336f8b951106ec682145c06895e7c2c1c307 10.67.50.146:6003
   slots:[10923-16383] (5461 slots) master
   1 additional replica(s)
S: 28f63312adf4a873bce001e74c3e8e7846deeb68 10.67.50.146:6004
   slots: (0 slots) slave
   replicates 924b336f8b951106ec682145c06895e7c2c1c307
[OK] All nodes agree about slots configuration.
>>> Check for open slots...
 