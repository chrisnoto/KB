ELK 7.12 搭建

---------------------------------第一部分------------------------------------------------------
elasticsearch集群搭建

# 主机名(使用FQDN)、本地解析及集群角色，另外在AD域配置域名解析
10.66.12.228  xtjcesbges01 xtjcesbges01.cesbg.foxconn         master, data节点
10.66.12.214  xtjcesbges02 xtjcesbges02.cesbg.foxconn         master, data节点
10.66.12.230  xtjcesbges03 xtjcesbges03.cesbg.foxconn         master, data节点
10.66.12.122  xtjcesbgsocks01 kibana.cesbg.foxconn kibana                     lb节点，kibana节点

# 安装过程

0  禁用swap
   准备数据盘
   /dev/mapper/data-es     /data                   xfs     defaults,noatime   0 0
mkdir -p /data/elasticsearch
chown -R elasticsearch:elasticsearch /data

   
1 安装elasticsearch 7.12 (所有机器)
rpm -ivh elasticsearch-7.12.0-x86_64.rpm
systemctl daemon-reload
systemctl enable elasticsearch
* 新版本不用单独安装 JDK, 自带了JDK

2 配置证书，为启用xpack security模块做准备
[root@xtjcesbges01 ~]# export ES_HOME=/usr/share/elasticsearch
[root@xtjcesbges01 ~]# export ES_PATH_CONF=/etc/elasticsearch
[root@xtjcesbges01 ~]# mkdir mycert;cd mycert
[root@xtjcesbges01 mycert]# cat instance.yml
instances:
  - name: 'xtjcesbges01'
    dns: [ 'xtjcesbges01.cesbg.foxconn' ]
  - name: 'xtjcesbges02'
    dns: [ 'xtjcesbges02.cesbg.foxconn' ]
  - name: 'xtjcesbges03'
    dns: [ 'xtjcesbges03.cesbg.foxconn' ]
  - name: 'xtjcesbglogstash01'
    dns: [ 'xtjcesbglogstash01.cesbg.foxconn' ]
  - name: 'xtjcesbglogstash02'
    dns: [ 'xtjcesbglogstash02.cesbg.foxconn' ]
  - name: 'xtjcesbglogstash03'
    dns: [ 'xtjcesbglogstash03.cesbg.foxconn' ]
  - name: 'kibana'
    dns: [ 'kibana.cesbg.foxconn' ]
[root@xtjcesbges01 elasticsearch]# cd $ES_HOME
[root@xtjcesbges01 elasticsearch]# bin/elasticsearch-certutil cert --keep-ca-key --pem --in ~/mycert/instance.yml --out ~/mycert/certs.zip
[root@xtjcesbges01 elasticsearch]# unzip certs.zip -d ./certs
证书包含了es,logstash,kibana,ca自签名证书
[root@xtjcesbges01 mycert]# ll certs/*
certs/ca:
total 8
-rw-r--r--. 1 root root 1200 May 13 03:10 ca.crt
-rw-r--r--. 1 root root 1675 May 13 03:10 ca.key

certs/kibana:
total 8
-rw-r--r--. 1 root root 1188 May 13 03:10 kibana.crt
-rw-r--r--. 1 root root 1675 May 13 03:10 kibana.key

certs/xtjcesbges01:
total 8
-rw-r--r--. 1 root root 1204 May 13 03:10 xtjcesbges01.crt
-rw-r--r--. 1 root root 1679 May 13 03:10 xtjcesbges01.key

certs/xtjcesbges02:
total 8
-rw-r--r--. 1 root root 1204 May 13 03:10 xtjcesbges02.crt
-rw-r--r--. 1 root root 1675 May 13 03:10 xtjcesbges02.key

certs/xtjcesbges03:
total 8
-rw-r--r--. 1 root root 1204 May 13 03:10 xtjcesbges03.crt
-rw-r--r--. 1 root root 1675 May 13 03:10 xtjcesbges03.key

certs/xtjcesbglogstash01:
total 8
-rw-r--r--. 1 root root 1224 May 13 03:10 xtjcesbglogstash01.crt
-rw-r--r--. 1 root root 1679 May 13 03:10 xtjcesbglogstash01.key

certs/xtjcesbglogstash02:
total 8
-rw-r--r--. 1 root root 1224 May 13 03:10 xtjcesbglogstash02.crt
-rw-r--r--. 1 root root 1675 May 13 03:10 xtjcesbglogstash02.key

certs/xtjcesbglogstash03:
total 8
-rw-r--r--. 1 root root 1220 May 13 03:10 xtjcesbglogstash03.crt
-rw-r--r--. 1 root root 1675 May 13 03:10 xtjcesbglogstash03.key

证书生成之后，将拷贝到各台机器里
对于ES：
mkdir -p /etc/elasticsearch/certs
将ca.crt和xtjcesbges0x.crt/key 拷贝到/etc/elasticsearch/certs
对于kibana:
mkdir -p /etc/kibana/certs
将ca.crt和kibana.crt/key 拷贝到/etc/kibana/certs

3 配置第一台ES  xtjcesbges01 (master, data node)
[root@xtjcesbges01 mycert]# cat /etc/elasticsearch/elasticsearch.yml |egrep -v '#|^$'
cluster.name: elk4Fixo
node.name: xtjcesbges01
node.master: true
node.data: true
path.data: /data/elasticsearch
path.logs: /var/log/elasticsearch
network.host: xtjcesbges01.cesbg.foxconn
http.port: 9200
discovery.seed_hosts: ["xtjcesbges01.cesbg.foxconn"]        # 这两个参数，初始化时只填了第一台
cluster.initial_master_nodes: ["xtjcesbges01"]              # 集群搭建完后，可添加另两台master节点到这里
#以下是xpack配置，生效后可以进行用户和权限管理
xpack.security.enabled: true
xpack.security.http.ssl.enabled: true
xpack.security.transport.ssl.enabled: true
xpack.security.http.ssl.key: certs/xtjcesbges01.key
xpack.security.http.ssl.certificate: certs/xtjcesbges01.crt
xpack.security.http.ssl.certificate_authorities: certs/ca.crt
xpack.security.transport.ssl.key: certs/xtjcesbges01.key
xpack.security.transport.ssl.certificate: certs/xtjcesbges01.crt
xpack.security.transport.ssl.certificate_authorities: certs/ca.crt

[root@xtjcesbges01 mycert]# systemctl enable elasticsearch
[root@xtjcesbges01 mycert]# systemctl start elasticsearch
检查ES服务状态及端口

配置ES各用户的密码
[root@xtjcesbges01 elasticsearch]# cd $ES_HOME
bin/elasticsearch-setup-passwords interactive -u https://xtjcesbges01.cesbg.foxconn:9200

使用ca证书和用户elastic测试ES
[root@xtjcesbges01 elasticsearch]# curl -XGET --cacert ~/mycert/certs/ca/ca.crt -u elastic https://xtjcesbges01.cesbg.foxconn:9200/_cat/nodes?v
Enter host password for user 'elastic':
ip           heap.percent ram.percent cpu load_1m load_5m load_15m node.role   master name
10.66.12.228           63           5   0    0.05    0.03     0.05 cdfhilmrstw *      xtjcesbges01

4 配置第二台ES (xtjcesbgsocks01    lb,kibana node)
拷贝ca及kibana证书到/etc/elasticsearch/certs和/etc/kibana/certs里

[root@xtjcesbgsocks01 elasticsearch]# cat elasticsearch.yml |egrep -v '#|^$'
cluster.name: elk4Fixo
node.name: kibana             
node.master: false            # 这三个参数
node.data: false              # 设置为false后，
node.ingest: false            # 节点即为 LB 节点
path.data: /var/lib/elasticsearch
path.logs: /var/log/elasticsearch
network.host: kibana.cesbg.foxconn
http.port: 9200
discovery.seed_hosts: ["xtjcesbges01.cesbg.foxconn"]     # 这两个参数，初始化时只填了第一台
cluster.initial_master_nodes: ["xtjcesbges01"]           # 集群搭建完后，可添加另两台master节点到这里
xpack.security.enabled: true
xpack.security.http.ssl.enabled: true
xpack.security.transport.ssl.enabled: true
xpack.security.http.ssl.key: certs/kibana.key
xpack.security.http.ssl.certificate: certs/kibana.crt
xpack.security.http.ssl.certificate_authorities: certs/ca.crt
xpack.security.transport.ssl.key: certs/kibana.key
xpack.security.transport.ssl.certificate: certs/kibana.crt
xpack.security.transport.ssl.certificate_authorities: certs/ca.crt

[root@xtjcesbgsocks01 elasticsearch]# systemctl enable elasticsearch
[root@xtjcesbgsocks01 elasticsearch]# systemctl start elasticsearch

验证第二台ES加入节点
[root@xtjcesbgsocks01 elasticsearch]# curl -XGET --cacert ~/mycert/certs/ca/ca.crt -u elastic https://xtjcesbges01.cesbg.foxconn:9200/_cat/nodes?v
Enter host password for user 'elastic':
ip           heap.percent ram.percent cpu load_1m load_5m load_15m node.role   master name
10.66.12.228           63           5   0    0.05    0.03     0.05 cdfhilmrstw *      xtjcesbges01
10.66.12.122           38          66   0    0.06    0.03     0.05 lr          -      kibana

5 配置kibana
[root@xtjcesbgsocks01 ~]# rpm -ivh kibana-7.12.0-x86_64.rpm
先复制好kibana所需的证书
再配置kibana.yml
[root@xtjcesbgsocks01 ~]# cat /etc/kibana/kibana.yml |egrep -v '#|^$'
server.host: "kibana.cesbg.foxconn"
server.basePath: "/kibana"
server.rewriteBasePath: true
server.name: "kibana"
elasticsearch.hosts: ["https://kibana.cesbg.foxconn:9200"]
elasticsearch.username: "kibana_system"
elasticsearch.password: "vSTJ456"
server.ssl.enabled: true
server.ssl.certificate: /etc/kibana/certs/kibana.crt
server.ssl.key: /etc/kibana/certs/kibana.key
elasticsearch.ssl.certificateAuthorities: [ "/etc/kibana/certs/ca.crt" ]
xpack.encryptedSavedObjects.encryptionKey: "elk4fixoelk4fixoelk4fixoelk4fixo"
xpack.security.encryptionKey: "elk4fixoelk4fixoelk4fixoelk4fixo"
[root@xtjcesbgsocks01 ~]# systemctl enable kibana
[root@xtjcesbgsocks01 ~]# systemctl start kibana

访问https://kibana.cesbg.foxconn:5601/kibana    用户为elastic

6 配置另外两台mastre & data ES节点
先复制好elasticsearch所需的证书
再配置elasticsearch.yml
然后systemctl enable/start elasticsearch
下面是另外两台ES节点的配置
[root@xtjcesbges02 ~]# cat /etc/elasticsearch/elasticsearch.yml |egrep -v '#|^$'
cluster.name: elk4Fixo
node.name: xtjcesbges02
node.master: true
node.data: true
path.data: /data/elasticsearch
path.logs: /var/log/elasticsearch
network.host: xtjcesbges02.cesbg.foxconn
http.port: 9200
discovery.seed_hosts: ["xtjcesbges01.cesbg.foxconn", "xtjcesbges02.cesbg.foxconn"]
cluster.initial_master_nodes: ["xtjcesbges01", "xtjcesbges02"]
xpack.security.enabled: true
xpack.security.http.ssl.enabled: true
xpack.security.transport.ssl.enabled: true
xpack.security.http.ssl.key: certs/xtjcesbges02.key
xpack.security.http.ssl.certificate: certs/xtjcesbges02.crt
xpack.security.http.ssl.certificate_authorities: certs/ca.crt
xpack.security.transport.ssl.key: certs/xtjcesbges02.key
xpack.security.transport.ssl.certificate: certs/xtjcesbges02.crt
xpack.security.transport.ssl.certificate_authorities: certs/ca.crt

[root@xtjcesbges03 ~]# cat /etc/elasticsearch/elasticsearch.yml |egrep -v '#|^$'
cluster.name: elk4Fixo
node.name: xtjcesbges03
node.master: true
node.data: true
path.data: /data/elasticsearch
path.logs: /var/log/elasticsearch
network.host: xtjcesbges03.cesbg.foxconn
http.port: 9200
discovery.seed_hosts: ["xtjcesbges01.cesbg.foxconn", "xtjcesbges02.cesbg.foxconn","xtjcesbges03.cesbg.foxconn"]
cluster.initial_master_nodes: ["xtjcesbges01", "xtjcesbges02","xtjcesbges03"]
xpack.security.enabled: true
xpack.security.http.ssl.enabled: true
xpack.security.transport.ssl.enabled: true
xpack.security.http.ssl.key: certs/xtjcesbges03.key
xpack.security.http.ssl.certificate: certs/xtjcesbges03.crt
xpack.security.http.ssl.certificate_authorities: certs/ca.crt
xpack.security.transport.ssl.key: certs/xtjcesbges03.key
xpack.security.transport.ssl.certificate: certs/xtjcesbges03.crt
xpack.security.transport.ssl.certificate_authorities: certs/ca.crt

7 验证集群
查看节点
[root@xtjcesbges01 ~]# curl -XGET --cacert ~/mycert/certs/ca/ca.crt -u elastic https://xtjcesbges01.cesbg.foxconn:9200/_cat/nodes?v
Enter host password for user 'elastic':
ip           heap.percent ram.percent cpu load_1m load_5m load_15m node.role   master name
10.66.12.228           63           5   0    0.08    0.12     0.08 cdfhilmrstw *      xtjcesbges01
10.66.12.122           65          67   0    0.02    0.02     0.05 lr          -      kibana
10.66.12.230           15           3   0    0.00    0.01     0.05 cdfhilmrstw -      xtjcesbges03
10.66.12.214           21           4   0    0.00    0.01     0.05 cdfhilmrstw -      xtjcesbges02
查看集群监控状态
[root@xtjcesbges01 ~]# curl -XGET --cacert ~/mycert/certs/ca/ca.crt -u elastic https://xtjcesbges01.cesbg.foxconn:9200/_cat/health?v
Enter host password for user 'elastic':
epoch      timestamp cluster  status node.total node.data shards pri relo init unassign pending_tasks max_task_wait_time active_shards_percent
1621210747 00:19:07  elk4Fixo green           4         3     18   9    0    0        0             0                  -                100.0%


---------------------------------第二部分------------------------------------------------------
logstash 搭建

#主机名 本地解析

0 拷贝证书至本地 /etc/logstash/certs
转换logstash.key未pkcs8格式，logstash的beats input模块需要pkcs8格式的key
[root@xtjcesbglogstash01 logstash]# openssl pkcs8 -in certs/xtjcesbglogstash01.key -topk8 -nocrypt -out certs/xtjcesbglogstash01.pkcs8.key
[root@xtjcesbglogstash01 logstash]# ll certs
total 16
-rw-r--r-- 1 root root 1200 May 18 08:23 ca.crt
-rw-r--r-- 1 root root 1224 May 18 08:23 xtjcesbglogstash01.crt
-rw-r--r-- 1 root root 1679 May 18 08:23 xtjcesbglogstash01.key
-rw-r--r-- 1 root root 1708 May 18 08:24 xtjcesbglogstash01.pkcs8.key

1 安装filebeat连接elasticsearch集群，并加载index template和kibana dashboard
[root@xtjcesbglogstash01 ~]# rpm -ivh filebeat-7.12.0-x86_64.rpm
warning: filebeat-7.12.0-x86_64.rpm: Header V4 RSA/SHA512 Signature, key ID d88e42b4: NOKEY
Preparing...                          ################################# [100%]
Updating / installing...
   1:filebeat-7.12.0-1                ################################# [100%]
[root@xtjcesbglogstash01 ~]# systemctl daemon-reload
[root@xtjcesbglogstash01 ~]# systemctl enable filebeat
Created symlink from /etc/systemd/system/multi-user.target.wants/filebeat.service to /usr/lib/systemd/system/filebeat.service.
初始化elasticsearch index & template

[root@xtjcesbglogstash01 filebeat]# cat /etc/filebeat/filebeat.yml |egrep -v '#|^$'
filebeat.inputs:
- type: log
  enabled: false
  paths:
    - /var/log/*.log
- type: filestream
  enabled: false
  paths:
    - /var/log/*.log
filebeat.config.modules:
  path: ${path.config}/modules.d/*.yml
filebeat.modules:
- module: system
  reload.enabled: false
setup.template.settings:
  index.number_of_shards: 1
setup.dashboards.enabled: false
setup.kibana:
  host: "https://kibana.cesbg.foxconn:5601"
  path: /kibana
  ssl.enabled: true
  ssl.certificate_authorities: ["/root/certs/ca.crt"]
  ssl.certificate: "/root/certs/xtjcesbglogstash01.crt"
  ssl.key: "/root/certs/xtjcesbglogstash01.key"
output.elasticsearch:
  hosts: ["kibana.cesbg.foxconn:9200"]
  protocol: "https"
  ssl.certificate_authorities: ["/root/certs/ca.crt"]
  ssl.certificate: "/root/certs/xtjcesbglogstash01.crt"
  ssl.key: "/root/certs/xtjcesbglogstash01.key"
  username: "elastic"
  password: "vSTJ456"
processors:
  - add_host_metadata:
      when.not.contains.tags: forwarded
  - add_cloud_metadata: ~
  - add_docker_metadata: ~
  - add_kubernetes_metadata: ~


[root@xtjcesbglogstash01 ~]# systemctl start filebeat
filebeat起来OK之后，开始加载template和dashboard
[root@xtjcesbglogstash01 filebeat]# filebeat setup --index-management -E 'setup.ilm.overwrite=true'
[root@xtjcesbglogstash01 filebeat]# filebeat setup --dashboards

加载完毕后，登上kibana, 检查dahsboard是否存在
以下curl语句检查filebeat模板
[root@xtjcesbges01 ~]# curl -XGET --cacert ~/mycert/certs/ca/ca.crt -u elastic https://xtjcesbges01.cesbg.foxconn:9200/_template | python -m json.tool |jq 'keys'
Enter host password for user 'elastic':
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100  380k  100  380k    0     0  2576k      0 --:--:-- --:--:-- --:--:-- 2587k
[
  ".kibana-event-log-7.12.0-template",
  ".kibana_security_session_index_template_1",
  ".management-beats",
  ".ml-anomalies-",
  ".ml-notifications-000001",
  ".ml-state",
  ".ml-stats",
  ".monitoring-alerts-7",
  ".monitoring-beats",
  ".monitoring-es",
  ".monitoring-kibana",
  ".monitoring-logstash",
  ".siem-signals-default",
  ".transform-notifications-000002",
  "filebeat-7.12.0"               <====== 这个模板
  

2 安装和配置logstash
2.1 在kibana界面里创建logstash_write_role角色和logstash_writer用户
角色权限：
cluster privileges:   manage_index_templates,monitoring
Index privileges:
indices: filebeat*
privileges: create_index,write,auto_configure,all
2.2 安装logstash
[root@xtjcesbglogstash01 logstash]# rpm -ivh logstash-7.12.0-x86_64.rpm
[root@xtjcesbglogstash01 logstash]# systemctl enable logstash
[root@xtjcesbglogstash01 main]# cat /etc/logstash/logstash.yml |egrep -v '#|^$'
node.name: xtjcesbglogstash01.cesbg.foxconn
path.data: /var/lib/logstash
pipeline.ordered: auto
config.reload.automatic: true
http.host: 10.66.12.223
http.port: 9600
queue.type: persisted
queue.page_capacity: 128mb
queue.max_bytes: 8gb
path.logs: /var/log/logstash
xpack.monitoring.enabled: true
xpack.monitoring.elasticsearch.username: logstash_system
xpack.monitoring.elasticsearch.password: vSTJ456
xpack.monitoring.elasticsearch.hosts: ["https://kibana.cesbg.foxconn:9200"]
xpack.monitoring.elasticsearch.ssl.certificate_authority: /etc/logstash/certs/ca.crt

[root@xtjcesbglogstash01 main]# cat /etc/logstash/jvm.options |egrep -v '#|^$'
-Xms4g
-Xmx4g


[root@xtjcesbglogstash01 logstash]# cd conf.d
[root@xtjcesbglogstash01 conf.d]# ls
100-beats-input.conf  300-elasticsearch-output.conf
[root@xtjcesbglogstash01 conf.d]# cat 100-beats-input.conf
input {
  beats {
    port => 5044
    ssl => true
    ssl_key => '/etc/logstash/certs/xtjcesbglogstash01.pkcs8.key'
    ssl_certificate => '/etc/logstash/certs/xtjcesbglogstash01.crt'
  }
}
[root@xtjcesbglogstash01 conf.d]# cat 300-elasticsearch-output.conf
output {
  elasticsearch {
    hosts => ["https://kibana.cesbg.foxconn:9200"]
    ilm_enabled => false
    cacert => '/etc/logstash/certs/ca.crt'
    user => 'logstash_writer'
    password => vSTJ456
    index => "%{[@metadata][beat]}-%{[@metadata][version]}-%{+YYYY.MM.dd}"
  }
}
[root@xtjcesbglogstash01 conf.d]# systemctl start logstash
验证logstash服务
systemctl status logstash
[root@xtjcesbglogstash01 logstash]# grep API logstash-plain.log
同时查看5044 和9600 端口起来没有

3 找台服务器测试filebeat
[root@xtjplmepdvdb01 ~]# rpm -ivh filebeat-7.12.0-x86_64.rpm
[root@xtjplmepdvdb01 ~]# systemctl enable filebeat
拷贝ca.crt到/etc/filebeat/ca.crt
使用curl测试ssl连通性   域名可以使用本地解析
curl -v --cacert /etc/filebeat/ca.crt https://xtjcesbglogstash01.cesbg.foxconn:5044
看到empty response返回，说明https通讯没有问题
配置filebeat.yml
[root@xtjplmepdvdb01 filebeat]# cat filebeat.yml |egrep -v '#|^$'
filebeat.inputs:
- type: log
  enabled: false
  paths:
    - /var/log/*.log
- type: filestream
  enabled: false
  paths:
    - /var/log/*.log
filebeat.config.modules:
  path: ${path.config}/modules.d/*.yml
filebeat.modules:
- module: system
  reload.enabled: false
setup.template.settings:
  index.number_of_shards: 1
setup.kibana:
output.logstash:
  hosts: ["xtjcesbglogstash01.cesbg.foxconn:5044","xtjcesbglogstash02.cesbg.foxconn:5044","xtjcesbglogstash03.cesbg.foxconn:5044"]
  loadbalance: true
  ssl.certificate_authorities: ["/etc/filebeat/ca.crt"]
processors:
  - add_host_metadata:
      when.not.contains.tags: forwarded
  - add_cloud_metadata: ~
  - add_docker_metadata: ~
  - add_kubernetes_metadata: ~
启动filebeat   systemctl start filebeat
查看filebeat日志，并且登kibana检查是否有这台主机的机器名，日志

4 配置其他两台logstash，相同的配置
不要忘了ssl证书
[root@xtjcesbglogstash02 logstash]# ll certs
total 16
-rw-r--r--. 1 root root 1200 May 18 13:42 ca.crt
-rw-r--r--. 1 root root 1224 May 18 13:43 xtjcesbglogstash02.crt
-rw-r--r--. 1 root root 1675 May 18 13:43 xtjcesbglogstash02.key
-rw-r--r--. 1 root root 1704 May 18 13:43 xtjcesbglogstash02.pkcs8.key
其他相同

  设置filebeat客户端 loadbalance到三台logstash
  修改filebeat.yml如下部分，设置lb为true
output.logstash:
  hosts: ["xtjcesbglogstash01.cesbg.foxconn:5044","xtjcesbglogstash02.cesbg.foxconn:5044","xtjcesbglogstash03.cesbg.foxconn:5044"]
  loadbalance: true
重启filebeat后可看到filebeat将负载均衡到三台logstash节点上了
[root@xtjplmepdvdb02 ~]# ss -ant |grep 5044
ESTAB      0      0      10.66.13.24:40552              10.66.12.223:5044
ESTAB      0      0      10.66.13.24:58238              10.66.12.199:5044
ESTAB      0      0      10.66.13.24:54800              10.66.12.190:5044

最后一步
更改/etc/elasticsearch/elasticsearch.yml
将xtjcesbges01/02 和 kibana.cesbg.foxconn里的elasticsearch初始化节点更改如下，并重启elasticsearch服务
discovery.seed_hosts: ["xtjcesbges01.cesbg.foxconn", "xtjcesbges02.cesbg.foxconn","xtjcesbges03.cesbg.foxconn"]
cluster.initial_master_nodes: ["xtjcesbges01", "xtjcesbges02","xtjcesbges03"]  


##############  elk 7.6.2 容器部署   ##############
每台主机设置sysctl参数
cat /etc/sysctl.conf|tail -1
vm.max_map_count=655365

配置/data权限
chown 1000:1000 /data

### 容器部署脚本
# es1
docker run -d \
--name es1 \
--add-host=es3:10.67.39.81 \
--add-host=es2:10.67.39.80 \
--add-host=es1:10.67.39.79 \
-e node.name=es1 \
-e node.master=true \
-e network.publish_host=10.67.39.79 \
-e node.data=true \
-e cluster.name=lenovo \
-e discovery.seed_hosts=es2,es3 \
-e cluster.initial_master_nodes=es1,es2,es3 \
-e bootstrap.memory_lock=true \
--ulimit memlock=-1:-1 \
-e "ES_JAVA_OPTS=-Xms4G -Xmx4G" \
-v /data:/usr/share/elasticsearch/data \
-p 9200:9200 \
-p 9300:9300 \
elasticsearch:7.6.2

# es2
docker run -d \
--name es2 \
--add-host=es3:10.67.39.81 \
--add-host=es2:10.67.39.80 \
--add-host=es1:10.67.39.79 \
-e node.name=es2 \
-e node.master=true \
-e node.data=true \
-e network.publish_host=10.67.39.80 \
-e cluster.name=lenovo \
-e discovery.seed_hosts=es1,es3 \
-e cluster.initial_master_nodes=es1,es2,es3 \
-e bootstrap.memory_lock=true \
-e "ES_JAVA_OPTS=-Xms4G -Xmx4G" \
--ulimit memlock=-1:-1 \
-v /data:/usr/share/elasticsearch/data \
-p 9200:9200 \
-p 9300:9300 \
elasticsearch:7.6.2

# es3
docker run -d \
--name es3 \
--add-host=es3:10.67.39.81 \
--add-host=es2:10.67.39.80 \
--add-host=es1:10.67.39.79 \
-e node.name=es3 \
-e node.master=true \
-e network.publish_host=10.67.39.81 \
-e node.data=true \
-e reindex.remote.whitelist=10.67.51.150:9200 \
-e cluster.name=lenovo \
-e discovery.seed_hosts=es1,es2 \
-e cluster.initial_master_nodes=es1,es2,es3 \
-e bootstrap.memory_lock=true \
--ulimit memlock=-1:-1 \
-e "ES_JAVA_OPTS=-Xms4G -Xmx4G" \
-v /data:/usr/share/elasticsearch/data \
-p 9200:9200 \
-p 9300:9300 \
elasticsearch:7.6.2

# es4
docker run -d \
--name es4 \
--add-host=es3:10.67.39.81 \
--add-host=es2:10.67.39.80 \
--add-host=es1:10.67.39.79 \
--add-host=es4:10.67.36.59 \
-e node.name=es4 \
-e node.master=false \
-e network.publish_host=10.67.36.59 \
-e node.data=true \
-e reindex.remote.whitelist=10.67.51.150:9200 \
-e cluster.name=lenovo \
-e discovery.seed_hosts=es1,es2 \
-e cluster.initial_master_nodes=es1,es2,es3 \
-e bootstrap.memory_lock=true \
--ulimit memlock=-1:-1 \
-e "ES_JAVA_OPTS=-Xms4G -Xmx4G" \
-v /data:/usr/share/elasticsearch/data \
-p 9200:9200 \
-p 9300:9300 \
elasticsearch:7.6.2

# es5
docker run -d \
--name es5 \
--add-host=es3:10.67.39.81 \
--add-host=es2:10.67.39.80 \
--add-host=es1:10.67.39.79 \
--add-host=es4:10.67.36.59 \
--add-host=es5:10.67.36.57 \
-e node.name=es5 \
-e node.master=false \
-e network.publish_host=10.67.36.57 \
-e node.data=true \
-e reindex.remote.whitelist=10.67.51.150:9200 \
-e cluster.name=lenovo \
-e discovery.seed_hosts=es1,es2 \
-e cluster.initial_master_nodes=es1,es2,es3 \
-e bootstrap.memory_lock=true \
--ulimit memlock=-1:-1 \
-e "ES_JAVA_OPTS=-Xms4G -Xmx4G" \
-v /data:/usr/share/elasticsearch/data \
-p 9200:9200 \
-p 9300:9300 \
elasticsearch:7.6.2

####### 为ES增加plugin #######
[root@worker1 ~]# cat es.sh
docker run -d \
--name es \
--add-host=es3:10.67.39.81 \
--add-host=es2:10.67.39.80 \
--add-host=es6:10.67.39.79 \
--add-host=es7:10.67.36.62 \
-e node.name=es7 \
-e node.master=true \
-e network.publish_host=10.67.36.62 \
-e node.data=false \
-e cluster.name=lenovo \
-e discovery.seed_hosts=es2,es3 \
-e cluster.initial_master_nodes=es6,es2,es3 \
-e bootstrap.memory_lock=true \
--ulimit memlock=-1:-1 \
-e "ES_JAVA_OPTS=-Xms4G -Xmx4G" \
-e s3.client.default.endpoint=10.67.51.164:9000 \
-e s3.client.default.protocol=http \
-v /data:/usr/share/elasticsearch/data \
-v /root/config/elasticsearch.keystore:/usr/share/elasticsearch/config/elasticsearch.keystore \
-v /root/elasticsearch-plugins.yml:/usr/share/elasticsearch/config/elasticsearch-plugins.yml \
-p 9200:9200 \
-p 9300:9300 \
elasticsearch:7.16.3

############带证书的部署方式#######################
每台主机设置sysctl参数
cat /etc/sysctl.conf|tail -1
vm.max_map_count=655365

配置/data权限，生成的证书会放到/data目录
chown 1000:1000 /data

1 用临时容器生成证书
制作文件 instance.yml
instances:
  - name: 'xtjcesbges01'
    dns: [ 'xtjcesbges01.cesbg.foxconn' ]
  - name: 'xtjcesbges02'
    dns: [ 'xtjcesbges02.cesbg.foxconn' ]
  - name: 'xtjcesbges03'
    dns: [ 'xtjcesbges03.cesbg.foxconn' ]
  - name: 'xtjcesbglogstash01'
    dns: [ 'xtjcesbglogstash01.cesbg.foxconn' ]
  - name: 'xtjcesbglogstash02'
    dns: [ 'xtjcesbglogstash02.cesbg.foxconn' ]
  - name: 'xtjcesbglogstash03'
    dns: [ 'xtjcesbglogstash03.cesbg.foxconn' ]
  - name: 'kibana'
    dns: [ 'kibana.cesbg.foxconn' ]
	
[root@worker1 ~]# cat es-key.sh
docker run --rm \
--name es \
-e network.publish_host=10.67.36.62 \
-e cluster.name=lenovo \
-e discovery.type=single-node \
-e bootstrap.memory_lock=true \
--ulimit memlock=-1:-1 \
-e "ES_JAVA_OPTS=-Xms4G -Xmx4G" \
-v /data:/usr/share/elasticsearch/data \
-p 9200:9200 \
-p 9300:9300 \
elasticsearch:7.16.3 \
/usr/share/elasticsearch/bin/elasticsearch-certutil cert --keep-ca-key --pem --in /usr/share/elasticsearch/data/instance.yml --out /usr/share/elasticsearch/data/certs.zip
unzip /data/certs.zip

# 各个节点也可以用同一份p12服务器证书 手动运行 elasticsearch-certutil cert --ca xxx.p12 --days 3650
# 如果CA证书和服务器证书有设置密码的话  需要添加到keystore中
elasticsearch-keystore add xpack.security.http.ssl.keystore.secure_password
elasticsearch-keystore add xpack.security.http.ssl.truststore.secure_password
elasticsearch-keystore add xpack.security.transport.ssl.truststore.secure_password
elasticsearch-keystore add xpack.security.transport.ssl.truststore.secure_password

2 证书分发到各ES节点   scp

3 各ES节点分别run 部署脚本
[root@worker3 ~]# cat es.sh
docker run -d \
--name es \
-h xtjcesbges01.cesbg.foxconn \
--add-host=xtjcesbges01.cesbg.foxconn:10.67.36.60 \
--add-host=xtjcesbges02.cesbg.foxconn:10.67.36.59 \
--add-host=xtjcesbges03.cesbg.foxconn:10.67.36.57 \
--add-host=xtjcesbges04.cesbg.foxconn:10.67.36.61 \
-e node.name=xtjcesbges01.cesbg.foxconn \
-e node.master=true \
-e network.publish_host=xtjcesbges01.cesbg.foxconn \
-e node.data=true \
-e cluster.name=lenovo \
-e discovery.seed_hosts=xtjcesbges01.cesbg.foxconn,xtjcesbges02.cesbg.foxconn,xtjcesbges03.cesbg.foxconn \
-e cluster.initial_master_nodes=xtjcesbges01.cesbg.foxconn,xtjcesbges02.cesbg.foxconn,xtjcesbges03.cesbg.foxconn \
-e bootstrap.memory_lock=true \
--ulimit memlock=-1:-1 \
-e "ES_JAVA_OPTS=-Xms4G -Xmx4G" \
-v /data:/usr/share/elasticsearch/data \
-e xpack.security.enabled=true \
-e xpack.security.http.ssl.enabled=true \
-e xpack.security.transport.ssl.enabled=true \
-e xpack.security.http.ssl.key=/usr/share/elasticsearch/data/xtjcesbges01/xtjcesbges01.key \
-e xpack.security.http.ssl.certificate=/usr/share/elasticsearch/data/xtjcesbges01/xtjcesbges01.crt \
-e xpack.security.http.ssl.certificate_authorities=/usr/share/elasticsearch/data/ca/ca.crt \
-e xpack.security.transport.ssl.key=/usr/share/elasticsearch/data/xtjcesbges01/xtjcesbges01.key \
-e xpack.security.transport.ssl.certificate=/usr/share/elasticsearch/data/xtjcesbges01/xtjcesbges01.crt \
-e xpack.security.transport.ssl.certificate_authorities=/usr/share/elasticsearch/data/ca/ca.crt \
-p 9200:9200 \
-p 9300:9300 \
elasticsearch:7.6.2

[root@worker4 ~]# cat es.sh
docker run -d \
--name es \
-h xtjcesbges02.cesbg.foxconn \
--add-host=xtjcesbges01.cesbg.foxconn:10.67.36.60 \
--add-host=xtjcesbges02.cesbg.foxconn:10.67.36.59 \
--add-host=xtjcesbges03.cesbg.foxconn:10.67.36.57 \
--add-host=xtjcesbges04.cesbg.foxconn:10.67.36.61 \
-e node.name=xtjcesbges02.cesbg.foxconn \
-e node.master=true \
-e network.publish_host=xtjcesbges02.cesbg.foxconn \
-e node.data=true \
-e cluster.name=lenovo \
-e discovery.seed_hosts=xtjcesbges01.cesbg.foxconn,xtjcesbges02.cesbg.foxconn,xtjcesbges03.cesbg.foxconn \
-e cluster.initial_master_nodes=xtjcesbges01.cesbg.foxconn,xtjcesbges02.cesbg.foxconn,xtjcesbges03.cesbg.foxconn \
-e bootstrap.memory_lock=true \
--ulimit memlock=-1:-1 \
-e "ES_JAVA_OPTS=-Xms4G -Xmx4G" \
-v /data:/usr/share/elasticsearch/data \
-e xpack.security.enabled=true \
-e xpack.security.http.ssl.enabled=true \
-e xpack.security.transport.ssl.enabled=true \
-e xpack.security.http.ssl.key=/usr/share/elasticsearch/data/xtjcesbges02/xtjcesbges02.key \
-e xpack.security.http.ssl.certificate=/usr/share/elasticsearch/data/xtjcesbges02/xtjcesbges02.crt \
-e xpack.security.http.ssl.certificate_authorities=/usr/share/elasticsearch/data/ca/ca.crt \
-e xpack.security.transport.ssl.key=/usr/share/elasticsearch/data/xtjcesbges02/xtjcesbges02.key \
-e xpack.security.transport.ssl.certificate=/usr/share/elasticsearch/data/xtjcesbges02/xtjcesbges02.crt \
-e xpack.security.transport.ssl.certificate_authorities=/usr/share/elasticsearch/data/ca/ca.crt \
-p 9200:9200 \
-p 9300:9300 \
elasticsearch:7.6.2

[root@kubernetes-dashboard ~]# cat es.sh
docker run -d \
--name es \
-h xtjcesbges03.cesbg.foxconn \
--add-host=xtjcesbges01.cesbg.foxconn:10.67.36.60 \
--add-host=xtjcesbges02.cesbg.foxconn:10.67.36.59 \
--add-host=xtjcesbges03.cesbg.foxconn:10.67.36.57 \
--add-host=xtjcesbges04.cesbg.foxconn:10.67.36.61 \
-e node.name=xtjcesbges03.cesbg.foxconn \
-e node.master=true \
-e network.publish_host=xtjcesbges03.cesbg.foxconn \
-e node.data=true \
-e cluster.name=lenovo \
-e discovery.seed_hosts=xtjcesbges01.cesbg.foxconn,xtjcesbges02.cesbg.foxconn,xtjcesbges03.cesbg.foxconn \
-e cluster.initial_master_nodes=xtjcesbges01.cesbg.foxconn,xtjcesbges02.cesbg.foxconn,xtjcesbges03.cesbg.foxconn \
-e bootstrap.memory_lock=true \
--ulimit memlock=-1:-1 \
-e "ES_JAVA_OPTS=-Xms4G -Xmx4G" \
-v /data:/usr/share/elasticsearch/data \
-e xpack.security.enabled=true \
-e xpack.security.http.ssl.enabled=true \
-e xpack.security.transport.ssl.enabled=true \
-e xpack.security.http.ssl.key=/usr/share/elasticsearch/data/xtjcesbges03/xtjcesbges03.key \
-e xpack.security.http.ssl.certificate=/usr/share/elasticsearch/data/xtjcesbges03/xtjcesbges03.crt \
-e xpack.security.http.ssl.certificate_authorities=/usr/share/elasticsearch/data/ca/ca.crt \
-e xpack.security.transport.ssl.key=/usr/share/elasticsearch/data/xtjcesbges03/xtjcesbges03.key \
-e xpack.security.transport.ssl.certificate=/usr/share/elasticsearch/data/xtjcesbges03/xtjcesbges03.crt \
-e xpack.security.transport.ssl.certificate_authorities=/usr/share/elasticsearch/data/ca/ca.crt \
-p 9200:9200 \
-p 9300:9300 \
elasticsearch:7.6.2

新增节点   将ca.crt和ca.key拷贝到新节点，然后生成服务器证书
[root@worker2 ~]# cat es-key.sh
docker run --rm \
--name es \
-e network.publish_host=10.67.36.61 \
-e cluster.name=lenovo \
-e discovery.type=single-node \
-e bootstrap.memory_lock=true \
--ulimit memlock=-1:-1 \
-e "ES_JAVA_OPTS=-Xms4G -Xmx4G" \
-v /data:/usr/share/elasticsearch/data \
-p 9200:9200 \
-p 9300:9300 \
elasticsearch:7.6.2 \
/usr/share/elasticsearch/bin/elasticsearch-certutil cert --pem --ca-cert /usr/share/elasticsearch/data/ca/ca.crt --ca-key /usr/share/elasticsearch/data/ca/ca.key --dns xtjcesbges04.cesbg.foxconn --out /usr/share/elasticsearch/data/certs.zip

unzip certs.zip

[root@worker2 ~]# cat es.sh
docker run -d \
--name es \
-h xtjcesbges04.cesbg.foxconn \
--add-host=xtjcesbges01.cesbg.foxconn:10.67.36.60 \
--add-host=xtjcesbges02.cesbg.foxconn:10.67.36.59 \
--add-host=xtjcesbges03.cesbg.foxconn:10.67.36.57 \
--add-host=xtjcesbges04.cesbg.foxconn:10.67.36.61 \
-e node.name=xtjcesbges04.cesbg.foxconn \
-e node.master=true \
-e network.publish_host=xtjcesbges04.cesbg.foxconn \
-e node.data=true \
-e cluster.name=lenovo \
-e discovery.seed_hosts=xtjcesbges01.cesbg.foxconn,xtjcesbges02.cesbg.foxconn,xtjcesbges03.cesbg.foxconn \
-e cluster.initial_master_nodes=xtjcesbges01.cesbg.foxconn,xtjcesbges02.cesbg.foxconn,xtjcesbges03.cesbg.foxconn \
-e bootstrap.memory_lock=true \
--ulimit memlock=-1:-1 \
-e "ES_JAVA_OPTS=-Xms4G -Xmx4G" \
-v /data:/usr/share/elasticsearch/data \
-e xpack.security.enabled=true \
-e xpack.security.http.ssl.enabled=true \
-e xpack.security.transport.ssl.enabled=true \
-e xpack.security.http.ssl.key=/usr/share/elasticsearch/data/instance/instance.key \
-e xpack.security.http.ssl.certificate=/usr/share/elasticsearch/data/instance/instance.crt \
-e xpack.security.http.ssl.certificate_authorities=/usr/share/elasticsearch/data/ca/ca.crt \
-e xpack.security.transport.ssl.key=/usr/share/elasticsearch/data/instance/instance.key \
-e xpack.security.transport.ssl.certificate=/usr/share/elasticsearch/data/instance/instance.crt \
-e xpack.security.transport.ssl.certificate_authorities=/usr/share/elasticsearch/data/ca/ca.crt \
-p 9200:9200 \
-p 9300:9300 \
elasticsearch:7.6.2


elasticsearch-certutil http的使用
1 各节点使用同一个证书
Generate a certificate per node? [y/N]n

## Which hostnames will be used to connect to your nodes?

These hostnames will be added as "DNS" names in the "Subject Alternative Name"
(SAN) field in your certificate.

You should list every hostname and variant that people will use to connect to
your cluster over http.
Do not list IP addresses here, you will be asked to enter them later.

If you wish to use a wildcard certificate (for example *.es.example.com) you
can enter that here.

Enter all the hostnames that you need, one per line.
When you are done, press <ENTER> once more to move on to the next step.

*.cesbg.foxconn

You entered the following hostnames.

 - *.cesbg.foxconn

Is this correct [Y/n]y

## Which IP addresses will be used to connect to your nodes?

If your clients will ever connect to your nodes by numeric IP address, then you
can list these as valid IP "Subject Alternative Name" (SAN) fields in your
certificate.

If you do not have fixed IP addresses, or not wish to support direct IP access
to your cluster then you can just press <ENTER> to skip this step.

Enter all the IP addresses that you need, one per line.
When you are done, press <ENTER> once more to move on to the next step.


You did not enter any IP addresses.

Is this correct [Y/n]y

2 各节点使用自己的证书
Generate a certificate per node? [y/N]y

## What is the name of node #1?

This name will be used as part of the certificate file name, and as a
descriptive name within the certificate.

You can use any descriptive name that you like, but we recommend using the name
of the Elasticsearch node.

node #1 name: es1.cesbg.foxconn

## Which hostnames will be used to connect to es1.cesbg.foxconn?

These hostnames will be added as "DNS" names in the "Subject Alternative Name"
(SAN) field in your certificate.

You should list every hostname and variant that people will use to connect to
your cluster over http.
Do not list IP addresses here, you will be asked to enter them later.

If you wish to use a wildcard certificate (for example *.es.example.com) you
can enter that here.

Enter all the hostnames that you need, one per line.
When you are done, press <ENTER> once more to move on to the next step.

es2.cesbg.foxconn
es3.cesbg.foxconn

You entered the following hostnames.

 - es2.cesbg.foxconn
 - es3.cesbg.foxconn

Is this correct [Y/n]y

## Which IP addresses will be used to connect to es1.cesbg.foxconn?

If your clients will ever connect to your nodes by numeric IP address, then you
can list these as valid IP "Subject Alternative Name" (SAN) fields in your
certificate.

If you do not have fixed IP addresses, or not wish to support direct IP access
to your cluster then you can just press <ENTER> to skip this step.

Enter all the IP addresses that you need, one per line.
When you are done, press <ENTER> once more to move on to the next step.

192.168.2.10
192.168.2.11
192.168.2.12

You entered the following IP addresses.

 - 192.168.2.10
 - 192.168.2.11
 - 192.168.2.12

Is this correct [Y/n]y

## Other certificate options

The generated certificate will have the following additional configuration
values. These values have been selected based on a combination of the
information you have provided above and secure defaults. You should not need to
change these values unless you have specific requirements.

Key Name: es1.cesbg.foxconn
Subject DN: CN=es1, DC=cesbg, DC=foxconn
Key Size: 2048

Do you wish to change any of these options? [y/N]n
Generate additional certificates? [Y/n]y

## What is the name of node #2?

This name will be used as part of the certificate file name, and as a
descriptive name within the certificate.

You can use any descriptive name that you like, but we recommend using the name
of the Elasticsearch node.

node #2 name: es3.cesbg.foxconn

## Which hostnames will be used to connect to es3.cesbg.foxconn?

These hostnames will be added as "DNS" names in the "Subject Alternative Name"
(SAN) field in your certificate.

You should list every hostname and variant that people will use to connect to
your cluster over http.
Do not list IP addresses here, you will be asked to enter them later.

If you wish to use a wildcard certificate (for example *.es.example.com) you
can enter that here.

Enter all the hostnames that you need, one per line.
When you are done, press <ENTER> once more to move on to the next step.


You did not enter any hostnames.
Clients are likely to encounter TLS hostname verification errors if they
connect to your cluster using a DNS name.

Is this correct [Y/n]y

## Which IP addresses will be used to connect to es3.cesbg.foxconn?

If your clients will ever connect to your nodes by numeric IP address, then you
can list these as valid IP "Subject Alternative Name" (SAN) fields in your
certificate.

If you do not have fixed IP addresses, or not wish to support direct IP access
to your cluster then you can just press <ENTER> to skip this step.

Enter all the IP addresses that you need, one per line.
When you are done, press <ENTER> once more to move on to the next step.

192.168.2.21

You entered the following IP addresses.

 - 192.168.2.21

Is this correct [Y/n]y

######### 新架构 ######
kibana + logstash
--------------------
run in k8s

2 coordinating nodes   3 master nodes  3 data nodes
--------------------   ----------------------------
  run in k8s                 run in docker nodes

######## elasticsearch docker + systemd 
#!/bin/bash
name=xtjcesbges05

cat >/usr/lib/systemd/system/elasticsearch.service -<<EOF
[Unit]
Description=Elasticsearch Docker Container
After=docker.service
Requires=docker.service

[Service]
Type=simple
TimeoutStartSec=5m
ExecStartPre=-/usr/bin/docker rm -f es

ExecStart=/usr/bin/docker run \
    --name es \
    --dns 10.67.50.88 \
    -e node.name=${name}.cesbg.foxconn \
    -e node.master=false \
    -e network.publish_host=${name}.cesbg.foxconn \
    -e node.data=false \
    -e cluster.name=elk4Fixo \
    -e discovery.seed_hosts=xtjcesbges01.cesbg.foxconn,xtjcesbges02.cesbg.foxconn,xtjcesbges03.cesbg.foxconn \
    -e cluster.initial_master_nodes=xtjcesbges01.cesbg.foxconn,xtjcesbges02.cesbg.foxconn,xtjcesbges03.cesbg.foxconn \
    -e bootstrap.memory_lock=true \
    --ulimit memlock=-1:-1 \
    -e "ES_JAVA_OPTS=-Xms4G -Xmx4G" \
    -v /data:/usr/share/elasticsearch/data \
    -e xpack.security.enabled=true \
    -e xpack.security.http.ssl.enabled=true \
    -e xpack.security.transport.ssl.enabled=true \
    -e xpack.security.http.ssl.key=/usr/share/elasticsearch/data/certs/${name}.key \
    -e xpack.security.http.ssl.certificate=/usr/share/elasticsearch/data/certs/${name}.crt \
    -e xpack.security.http.ssl.certificate_authorities=/usr/share/elasticsearch/data/certs/ca.crt \
    -e xpack.security.transport.ssl.key=/usr/share/elasticsearch/data/certs/${name}.key \
    -e xpack.security.transport.ssl.certificate=/usr/share/elasticsearch/data/certs/${name}.crt \
    -e xpack.security.transport.ssl.certificate_authorities=/usr/share/elasticsearch/data/certs/ca.crt \
    -p 9200:9200 \
    -p 9300:9300 \
    elasticsearch:7.12.0

ExecReload=-/usr/bin/docker stop es
ExecReload=-/usr/bin/docker rm es
ExecStop=-/usr/bin/docker stop es
Restart=always
RestartSec=30

[Install]
WantedBy = multi-user.target

EOF

systemctl enable elasticsearch.service
