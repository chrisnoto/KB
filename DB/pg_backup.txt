########## PG内置的备份function
pg_start_backup() is a function we execute to start a base backup. It was part of the original API for physical backup introduced in PostgreSQL 8.0. It’s now been mostly superceded by the replication command BASE_BACKUP,
 which is most frequently executed by the pg_basebackup utility.

So what does a base backup actually do? Well, first we execute a checkpoint so that as many changed data blocks are on disk as possible. Next we force full page writes to occur, even if full_page_writes = off, 
because we need to see the whole page for any changes. Lastly, we record the starting point of the backup. That’s all.

Base backup does NOT prevent writes to the data directory. It’s designed to be “fully online” so it doesn’t take locks on objects, doesn’t interefere with the operation of the database apart from some details 
if you try to shut it down while taking a backup.

pg_stop_backup() is the end marker for that backup.

The key point is that the base backup is NOT a consistent copy of the database. You might have copied every file, but all the data is taken at different times. So its wrong. Until you recover the database with the WAL changes 
that occurred between the start backup and the stop backup.

Which is why you’ll be wanting to use a command like this

pg_basebackup –xlog-method=stream

or use a utility that does everything for you, like Barman.

#### pgbackrest
安装
yum install postgresql13-server postgresql13-contrib pgbackrest

配置
[root@pg01 ~]# cat /etc/pgbackrest.conf
[global]
repo1-path=/var/lib/pgbackrest
repo1-retention-full=2
log-level-console=info
log-level-file=debug

repo2-path=/repo
repo2-type=s3
repo2-s3-endpoint=repo-centos.local
repo2-s3-bucket=pgbackrest
repo2-s3-key=admin
repo2-s3-key-secret=vSTJ456789
repo2-s3-region=default
repo2-retention-full=1
repo2-s3-uri-style=path
repo2-storage-verify-tls=n
repo2-storage-port=9000

process-max=2
start-fast=y
delta=y

[main]
pg1-path=/var/lib/pgsql/13/data

-bash-4.2$ cat postgresql.conf |egrep -i '^listen|^password_en|^archive_'
listen_addresses = '*'
password_encryption = scram-sha-256             # md5 or scram-sha-256
archive_mode = on
archive_command = 'pgbackrest --stanza=main archive-push %p'
 
# 全备
pgbackrest --stanza=main --type=full backup
恢复的话，要把$PGDATA里的数据都删掉
pgbackrest --stanza=main --delta restore

使用minio全备和恢复
-bash-4.2$ pgbackrest --stanza=main --type=full --repo=2 backup
2021-09-28 08:45:38.174 P00   INFO: backup command begin 2.35: --delta --exec-id=5087-b0ef3e33 --log-level-console=info --log-level-file=debug --pg1-path=/var/lib/pgsql/13/data --process-max=2 --repo=2 --repo1-path=/var/lib/pgbackrest --repo2-path=/repo --repo1-retention-full=2 --repo2-retention-full=1 --repo2-s3-bucket=pgbackrest --repo2-s3-endpoint=repo-centos.local --repo2-s3-key=<redacted> --repo2-s3-key-secret=<redacted> --repo2-s3-region=default --repo2-s3-uri-style=path --repo2-storage-port=9000 --no-repo2-storage-verify-tls --repo2-type=s3 --stanza=main --start-fast --type=full
2021-09-28 08:45:38.924 P00   INFO: execute non-exclusive pg_start_backup(): backup begins after the requested immediate checkpoint completes
2021-09-28 08:45:39.428 P00   INFO: backup start archive = 00000003000000000000000D, lsn = 0/D000028
2021-09-28 08:45:45.140 P00   INFO: execute non-exclusive pg_stop_backup() and wait for all WAL segments to archive
2021-09-28 08:45:45.444 P00   INFO: backup stop archive = 00000003000000000000000D, lsn = 0/D000138
2021-09-28 08:45:45.452 P00   INFO: check archive for segment(s) 00000003000000000000000D:00000003000000000000000D
2021-09-28 08:45:45.944 P00   INFO: new backup label = 20210928-084538F
2021-09-28 08:45:46.020 P00   INFO: full backup size = 24MB, file total = 940
2021-09-28 08:45:46.020 P00   INFO: backup command end: completed successfully (7851ms)
2021-09-28 08:45:46.020 P00   INFO: expire command begin 2.35: --exec-id=5087-b0ef3e33 --log-level-console=info --log-level-file=debug --repo=2 --repo1-path=/var/lib/pgbackrest --repo2-path=/repo --repo1-retention-full=2 --repo2-retention-full=1 --repo2-s3-bucket=pgbackrest --repo2-s3-endpoint=repo-centos.local --repo2-s3-key=<redacted> --repo2-s3-key-secret=<redacted> --repo2-s3-region=default --repo2-s3-uri-style=path --repo2-storage-port=9000 --no-repo2-storage-verify-tls --repo2-type=s3 --stanza=main
2021-09-28 08:45:46.061 P00   INFO: repo2: 13-1 remove archive, start = 00000003000000000000000C, stop = 00000003000000000000000C
2021-09-28 08:45:46.065 P00   INFO: expire command end: completed successfully (45ms)

-bash-4.2$ pgbackrest --stanza=main --repo=2 --delta restore
2021-09-28 09:17:48.153 P00   INFO: restore command begin 2.35: --delta --exec-id=5197-e962d863 --log-level-console=info --log-level-file=debug --pg1-path=/var/lib/pgsql/13/data --process-max=2 --repo=2 --repo1-path=/var/lib/pgbackrest --repo2-path=/repo --repo2-s3-bucket=pgbackrest --repo2-s3-endpoint=repo-centos.local --repo2-s3-key=<redacted> --repo2-s3-key-secret=<redacted> --repo2-s3-region=default --repo2-s3-uri-style=path --repo2-storage-port=9000 --no-repo2-storage-verify-tls --repo2-type=s3 --stanza=main
WARN: --delta or --force specified but unable to find 'PG_VERSION' or 'backup.manifest' in '/var/lib/pgsql/13/data' to confirm that this is a valid $PGDATA directory.  --delta and --force have been disabled and if any files exist in the destination directories the restore will be aborted.
2021-09-28 09:17:48.252 P00   INFO: repo2: restore backup set 20210928-084538F
2021-09-28 09:17:51.516 P00   INFO: write updated /var/lib/pgsql/13/data/postgresql.auto.conf
2021-09-28 09:17:51.528 P00   INFO: restore global/pg_control (performed last to ensure aborted restores cannot be started)
2021-09-28 09:17:51.530 P00   INFO: restore size = 24MB, file total = 940
2021-09-28 09:17:51.534 P00   INFO: restore command end: completed successfully (3385ms)


****minio with ssl ****
[root@repo-centos ~]# cd .minio/certs
[root@repo-centos certs]# certgen -ca -host "repo-centos.local,10.67.51.164,172.17.0.2"
2021/09/28 16:27:59 wrote public.crt
2021/09/28 16:27:59 wrote private.key
[root@repo-centos web]# cat minio.sh
docker run -d \
--name myminio \
-e MINIO_ACCESS_KEY=admin \
-e MINIO_SECRET_KEY=vSTJ456789 \
-v /mrepo/minio:/data \
-v /root/.minio:/root/.minio \
-p 443:443 \
-p 9000:9000 \
minio/minio server /data --console-address ":443"

# PITR
-bash-4.2$ pgbackrest --stanza=main --type=diff backup
2021-09-27 09:33:04.180 P00   INFO: backup command begin 2.35: --exec-id=1000-4e0ae149 --log-level-console=info --log-level-file=debug --pg1-path=/var/lib/pgsql/13/data --repo1-path=/var/lib/pgbackrest --repo1-retention-full=2 --stanza=main --type=diff
2021-09-27 09:33:04.977 P00   INFO: last backup label = 20210927-090555F, version = 2.35
2021-09-27 09:33:04.977 P00   INFO: execute non-exclusive pg_start_backup(): backup begins after the next regular checkpoint completes
2021-09-27 09:33:10.688 P00   INFO: backup start archive = 000000020000000000000009, lsn = 0/9000028
WARN: a timeline switch has occurred since the 20210927-090555F backup, enabling delta checksum
      HINT: this is normal after restoring from backup or promoting a standby.
2021-09-27 09:33:12.243 P00   INFO: execute non-exclusive pg_stop_backup() and wait for all WAL segments to archive
2021-09-27 09:33:12.548 P00   INFO: backup stop archive = 000000020000000000000009, lsn = 0/9000100
2021-09-27 09:33:12.554 P00   INFO: check archive for segment(s) 000000020000000000000009:000000020000000000000009
2021-09-27 09:33:13.036 P00   INFO: new backup label = 20210927-090555F_20210927-093304D
2021-09-27 09:33:13.131 P00   INFO: diff backup size = 24MB, file total = 939
2021-09-27 09:33:13.131 P00   INFO: backup command end: completed successfully (8954ms)
2021-09-27 09:33:13.132 P00   INFO: expire command begin 2.35: --exec-id=1000-4e0ae149 --log-level-console=info --log-level-file=debug --repo1-path=/var/lib/pgbackrest --repo1-retention-full=2 --stanza=main
2021-09-27 09:33:13.139 P00   INFO: expire command end: completed successfully (8ms)
-bash-4.2$ psql -c "select * from t1"
 id
-----
   1
   2
   3
  ...
  100
-bash-4.2$ psql -c "select current_timestamp"
       current_timestamp
-------------------------------
 2021-09-27 09:33:46.013798+00
(1 row)

-bash-4.2$ psql -c "delete from t1 where id>90"
DELETE 10
-bash-4.2$ psql -c "select * from t1"
 id
----
  1
  2
  3
  ...
  90  
[root@pg01 etc]# systemctl stop postgresql-13
[root@pg01 etc]# su - postgres
Last login: Mon Sep 27 09:09:09 UTC 2021
-bash-4.2$ pgbackrest --stanza=main --delta --type=time "--target=2021-09-27 09:33:46.013798+00" --target-action=promote restore
2021-09-27 09:35:52.160 P00   INFO: restore command begin 2.35: --delta --exec-id=1056-a9541000 --log-level-console=info --log-level-file=debug --pg1-path=/var/lib/pgsql/13/data --repo1-path=/var/lib/pgbackrest --stanza=main --target="2021-09-27 09:33:46.013798+00" --target-action=promote --type=time
2021-09-27 09:35:52.248 P00   INFO: repo1: restore backup set 20210927-090555F_20210927-093304D
2021-09-27 09:35:52.252 P00   INFO: remove invalid files/links/paths from '/var/lib/pgsql/13/data'
2021-09-27 09:35:53.649 P00   INFO: write updated /var/lib/pgsql/13/data/postgresql.auto.conf
2021-09-27 09:35:53.661 P00   INFO: restore global/pg_control (performed last to ensure aborted restores cannot be started)
2021-09-27 09:35:53.664 P00   INFO: restore size = 24MB, file total = 939
2021-09-27 09:35:53.666 P00   INFO: restore command end: completed successfully (1509ms)
[root@pg01 etc]# systemctl start postgresql-13
[root@pg01 etc]# su - postgres
Last login: Mon Sep 27 09:35:48 UTC 2021
-bash-4.2$ psql -c "select * from t1 where id>89"
 id
-----
  90
  91
  92
  93
  94
  95
  96
  97
  98
  99
 100
  
## pg_receivewal  以streaming方式进行本地/远程备份wal
This client program will open a replication connection to PostgreSQL and stream WAL, just like streaming replication does. 
But instead of applying the information to a standby server, it writes it to disk. This way, it creates a copy of the WAL segments in real time. 
The partial WAL segment that pg_receivewal is currently writing has the extension .partial to distinguish it from completed WAL archives. 
Once the segment is complete, pg_receivewal will rename it.
pg_receivewal is an alternative to WAL archiving that avoids the gap between the current and the archived WAL location. It is a bit more complicated to manage and monitor, 
because it is a separate process and should run on a different machine.
pg_receivewal默认以异步的方式接收主库的wal，会损失几秒钟的事务

以下命令指定主库的复制槽standy_slot，以sync模式接收主库的wal，如同streaming replication，但是此时不会replay
注意:如果只有一个机器以同步模式接受主库的wal,如果机器死机，主库会hang住，不会提交任何事务了，要保证同时有两台机器接受主库的wal

-bash-4.2$ pg_receivewal -D wal_remotebk/ -v -S standby_slot --synchronous -h 10.67.39.58 -p 5432 -U repl -W
Password:
pg_receivewal: starting log streaming at 2/9000000 (timeline 1)
pg_receivewal: finished segment at 2/A000000 (timeline 1)
pg_receivewal: finished segment at 2/B000000 (timeline 1)
pg_receivewal: finished segment at 2/C000000 (timeline 1)
pg_receivewal: finished segment at 2/D000000 (timeline 1)
pg_receivewal: finished segment at 2/E000000 (timeline 1)
pg_receivewal: finished segment at 2/F000000 (timeline 1)


使用restore_command恢复数据库，这里用了nfs挂载
restore_command = 'cp /walarchive/%f %p || cp /walarchive/%f.partial %p'

重要提示，可以使用pg_receivewal实现多副本redolog的功能，类似oracle的redo log group


###########  barman  ###########
工作原理
物理全備+歸檔備份（WAL日誌備份），從而達到任意時間點的恢復。即恢復全備後，通過指定WAL日誌的時間點、LSN等即可恢復到資料庫的任意時間點。
barman备份方法
backup_method = postgres  # streaming backup方式   使用了工具pg_basebackup+pg_receivewal
backup_method = rysnc     # rsync/ssh 方式    barman2.0之前的备份方式，支持增量备份

# 配置过程

一、配置需要备份的远程PG
1 修改postgresql.conf配置
listen_addresses = '*'
port = 5432
wal_level = replica  #11版本後改爲replica
archive_mode = on
archive_command = 'cp %p /var/lib/pgsql/13/data/pg_archive/%f'
max_wal_senders = 10  #建議大於等於3
synchronous_standby_names = '*'        #这个设置会造成事务提交hang主，需要临时再设置一下 synchronous_commit = local
hot_standby = on
log_filename = 'postgresql-%Y%m%d_%H%M.log'
2 修改pg_hba.conf配置

local   all             all                                       trust
host    all             all               0.0.0.0/0               md5
host    all             all               ::1/128                 trust
host    replication     barman            0.0.0.0/0               md5
host    replication     streaming_barman  0.0.0.0/0               md5
3 創建pg_archive，並設置用戶組

mkdir -p /var/lib/pgsql/13/data/pg_archive
chown postgres:postgres /var/lib/pgsql/13/data/pg_archive -R

4 啓動postgresql

systemctl enable postgresql-13
systemctl start postgresql-13

5 創建barman和barman_streaming用戶

su postgres
createuser -s -P barman
#設置密碼
createuser -P --replication streaming_barman
#設置密碼

二、barman安装和配置

在备份服务器上安装barman
yum install barman barman-cli
yum install postgresql13-contrib

修改barman的公共配置
vi /etc/barman.conf

parallel_jobs = 2   #併發數
immediate_checkpoint = true   #在執行back時是否會自動執行checkpoint

-bash-4.2$ cat /etc/barman.d/pga.conf |egrep -v ';|^$'
[pga]
description =  "Example of PostgreSQL Database (Streaming-Only)"
conninfo = host=pga user=barman dbname=postgres
streaming_conninfo = host=pga user=streaming_barman
backup_method = postgres
streaming_archiver = on
slot_name = barman

barman账号设置
su - barman
-bash-4.2$ cat .bashrc
export PATH="/usr/local/bin:/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/usr/pgsql-13/bin:/usr/pgsql-13/bin"
export PGDATA="/var/lib/pgsql/13/data"

配置.pgpass免密
-bash-4.2$ cat .pgpass
pga:5432:*:streaming_barman:Foxconn123
pga:5432:*:barman:123456

barman账号下做免密验证
-bash-4.2$ psql -c 'select version()' -U barman -h pga postgres
                                                 version
---------------------------------------------------------------------------------------------------------
 PostgreSQL 13.4 on x86_64-pc-linux-gnu, compiled by gcc (GCC) 4.8.5 20150623 (Red Hat 4.8.5-44), 64-bit
(1 row)

-bash-4.2$ psql -c 'select version()' -U streaming_barman -h pga postgres
                                                 version
---------------------------------------------------------------------------------------------------------
 PostgreSQL 13.4 on x86_64-pc-linux-gnu, compiled by gcc (GCC) 4.8.5 20150623 (Red Hat 4.8.5-44), 64-bit
(1 row)


运行barman
-bash-4.2$ barman receive-wal --create-slot pga    创建slot
-bash-4.2$ barman cron         启用wal archiving,streaming archiver for 待备份的PG服务器
-bash-4.2$ barman check pga   验证远程服务器pga的各种条件

barman安装错误汇总
-bash-4.2$ barman check pga
Server pga:
        WAL archive: FAILED (please make sure WAL shipping is setup)
        PostgreSQL: OK
        superuser or standard user with backup privileges: OK
        PostgreSQL streaming: OK
        wal_level: OK
        replication slot: OK
        directories: OK
        retention policy settings: OK
        backup maximum age: OK (no last_backup_maximum_age provided)
        compression settings: OK
        failed backups: OK (there are 0 failed backups)
        minimum redundancy requirements: OK (have 0 backups, expected at least 0)
        pg_basebackup: OK
        pg_basebackup compatible: OK
        pg_basebackup supports tablespaces mapping: OK
        systemid coherence: OK (no system Id stored on disk)
        pg_receivexlog: OK
        pg_receivexlog compatible: OK
        receive-wal running: FAILED (See the Barman log file for more details)
        archiver errors: OK
碰到上述错误		
1 打开 wal archiving,streaming archiver for server pga
-bash-4.2$ barman cron
Starting WAL archiving for server pga
Starting streaming archiver for server pga
  

2 切换pga的wal file
-bash-4.2$ barman switch-wal --force --archive pga
The WAL file 000000010000000000000053 has been closed on server 'pga'
Waiting for the WAL file 000000010000000000000053 from server 'pga' (max: 30 seconds)
Processing xlog segments from streaming for pga
        000000010000000000000053
-bash-4.2$ barman check pga
Server pga:
        PostgreSQL: OK
        superuser or standard user with backup privileges: OK
        PostgreSQL streaming: OK
        wal_level: OK
        replication slot: OK
        directories: OK
        retention policy settings: OK
        backup maximum age: OK (no last_backup_maximum_age provided)
        compression settings: OK
        failed backups: OK (there are 0 failed backups)
        minimum redundancy requirements: OK (have 0 backups, expected at least 0)
        pg_basebackup: OK
        pg_basebackup compatible: OK
        pg_basebackup supports tablespaces mapping: OK
        systemid coherence: OK (no system Id stored on disk)
        pg_receivexlog: OK
        pg_receivexlog compatible: OK
        receive-wal running: OK
        archiver errors: OK
-bash-4.2$ barman replication-status pga
Status of streaming clients for server 'pga':
  Current LSN on master: 0/54000148
  Number of streaming clients: 1

  1. #1 Sync WAL streamer
     Application name: barman_receive_wal
     Sync stage      : 3/3 Remote write
     Communication   : TCP/IP
     IP Address      : 10.152.219.158 / Port: 53830 / Host: -
     User name       : streaming_barman
     Current state   : streaming (sync)
     Replication slot: barman
     WAL sender PID  : 1122
     Started at      : 2021-10-16 09:18:04.610226+00:00
     Sent LSN   : 0/54000148 (diff: 0 B)
     Write LSN  : 0/54000148 (diff: 0 B)
     Flush LSN  : 0/54000148 (diff: 0 B)
		
3 如果只是命令找不到路径，需要安装postgresql13-contrib包，并配置环境变量PATH
declare -x PATH="/usr/local/bin:/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/usr/pgsql-13/bin:/usr/pgsql-13/bin"

# 开始备份
-bash-4.2$ barman backup pga
Starting backup using postgres method for server pga in /var/lib/barman/pga/base/20211016T092814
Backup start at LSN: 0/54000148 (000000010000000000000054, 00000148)
Starting backup copy via pg_basebackup for 20211016T092814
Copy done (time: 18 seconds)
Finalising the backup.
This is the first backup for server pga
WAL segments preceding the current backup have been found:
        000000010000000000000053 from server pga has been removed
Backup size: 2.8 GiB
Backup end at LSN: 0/56000000 (000000010000000000000055, 00000000)
Backup completed (start time: 2021-10-16 09:28:14.274585, elapsed time: 18 seconds)
Processing xlog segments from streaming for pga
        000000010000000000000054
        000000010000000000000055

-bash-4.2$ barman list-backup pga
pga 20211016T092814 - Sat Oct 16 09:28:32 2021 - Size: 2.8 GiB - WAL Size: 0 B
target可以为data, wal, full, standalone
-bash-4.2$ barman list-files --target data pga 20211016T092814
/var/lib/barman/pga/base/20211016T092814/backup.info
/var/lib/barman/pga/base/20211016T092814/data/pg_hba.conf
/var/lib/barman/pga/base/20211016T092814/data/postgresql.auto.conf
/var/lib/barman/pga/base/20211016T092814/data/postgresql.conf
/var/lib/barman/pga/base/20211016T092814/data/backup_label
/var/lib/barman/pga/base/20211016T092814/data/pg_ident.conf
/var/lib/barman/pga/base/20211016T092814/data/backup_manifest
/var/lib/barman/pga/base/20211016T092814/data/current_logfiles
/var/lib/barman/pga/base/20211016T092814/data/PG_VERSION
/var/lib/barman/pga/base/20211016T092814/data/pg_xact/0000
/var/lib/barman/pga/base/20211016T092814/data/pg_logical/replorigin_checkpoint
/var/lib/barman/pga/base/20211016T092814/data/log/postgresql-Sat.log
/var/lib/barman/pga/base/20211016T092814/data/pg_archive/000000010000000000000014
/var/lib/barman/pga/base/20211016T092814/data/pg_archive/00000001000000000000000E
/var/lib/barman/pga/base/20211016T092814/data/pg_archive/000000010000000000000026
。。。
/var/lib/barman/pga/base/20211016T092814/data/base/14174/2679
/var/lib/barman/pga/base/20211016T092814/data/base/14174/2703
/var/lib/barman/pga/base/20211016T092814/data/base/14174/3456
/var/lib/barman/pga/base/20211016T092814/data/pg_multixact/offsets/0000
/var/lib/barman/pga/base/20211016T092814/data/pg_multixact/members/0000
-bash-4.2$ barman list-files --target wal pga 20211016T092814
/var/lib/barman/pga/wals/0000000100000000/000000010000000000000055

-bash-4.2$ barman show-backup pga 20211016T092814
Backup 20211016T092814:
  Server Name            : pga
  System Id              : 7019560887058907630
  Status                 : DONE
  PostgreSQL Version     : 130004
  PGDATA directory       : /var/lib/pgsql/13/data

  Base backup information:
    Disk usage           : 2.8 GiB (2.8 GiB with WALs)
    Incremental size     : 2.8 GiB (-0.00%)
    Timeline             : 1
    Begin WAL            : 000000010000000000000055
    End WAL              : 000000010000000000000055
    WAL number           : 1
    Begin time           : 2021-10-16 09:28:14+00:00
    End time             : 2021-10-16 09:28:32.392481+00:00
    Copy time            : 18 seconds
    Estimated throughput : 159.0 MiB/s
    Begin Offset         : 40
    End Offset           : 0
    Begin LSN           : 0/55000028
    End LSN             : 0/56000000

  WAL information:
    No of files          : 0
    Disk usage           : 0 B
    Last available       : 000000010000000000000055

  Catalog information:
    Retention Policy     : not enforced
    Previous Backup      : - (this is the oldest base backup)
    Next Backup          : - (this is the latest base backup)

错误  -bash-4.2$ barman backup pga
ERROR: reuse_backup option is not supported by postgres backup_method
resue_backup只能和rysnc配合       reuse_backup做增量备份	

恢复
模拟pga故障
pga上操作
postgres=# drop database pgbench;
DROP DATABASE
然后停掉PG服务

barman上操作
-bash-4.2$ barman recover --target-time="2021-10-18 05:17:05.751485+00:00" --remote-ssh-command "ssh postgres@pga" pga 20211018T051648 $PGDATA
Starting remote restore for server pga using backup 20211018T051648
Destination directory: /var/lib/pgsql/13/data
Remote command: ssh postgres@pga
Doing PITR. Recovery target time: '2021-10-18 05:17:05.751485+00:00'
Copying the base backup.
Copying required WAL segments.
Generating recovery configuration
Identify dangerous settings in destination directory.

IMPORTANT
These settings have been modified to prevent data losses

postgresql.conf line 238: archive_command = false

Recovery completed (start time: 2021-10-19 01:10:33.923761, elapsed time: 36 seconds)

Your PostgreSQL server has been successfully prepared for recovery!

pga上操作
[root@pga ~]# systemctl start postgresql-13
[root@pga ~]# su - postgres
Last login: Tue Oct 19 01:13:49 UTC 2021
-bash-4.2$ psql
psql (13.4)
Type "help" for help.

postgres=# \l
                             List of databases
   Name    |  Owner   | Encoding  | Collate | Ctype |   Access privileges
-----------+----------+-----------+---------+-------+-----------------------
 pgbench   | postgres | SQL_ASCII | C       | C     |
 postgres  | postgres | SQL_ASCII | C       | C     |
 template0 | postgres | SQL_ASCII | C       | C     | =c/postgres          +
           |          |           |         |       | postgres=CTc/postgres
 template1 | postgres | SQL_ASCII | C       | C     | =c/postgres          +
           |          |           |         |       | postgres=CTc/postgres
(4 rows)

postgres=# \c pgbench
You are now connected to database "pgbench" as user "postgres".
pgbench=# \d
              List of relations
 Schema |       Name       | Type  |  Owner
--------+------------------+-------+----------
 public | pgbench_accounts | table | postgres
 public | pgbench_branches | table | postgres
 public | pgbench_history  | table | postgres
 public | pgbench_tellers  | table | postgres

 -bash-4.2$ /usr/pgsql-13/bin/pg_controldata
pg_control version number:            1300
Catalog version number:               202007201
Database system identifier:           7019560887058907630
Database cluster state:               in archive recovery           #不是生产模式，需删除recovery.signal文件后重启PG，才能变为in production，这里有个问题
pg_control last modified:             Tue Oct 19 01:22:39 2021
Latest checkpoint location:           0/58000100
Latest checkpoint's REDO location:    0/580000C8
Latest checkpoint's REDO WAL file:    000000010000000000000058
Latest checkpoint's TimeLineID:       1
Latest checkpoint's PrevTimeLineID:   1
Latest checkpoint's full_page_writes: on
Latest checkpoint's NextXID:          0:504
Latest checkpoint's NextOID:          24579
Latest checkpoint's NextMultiXactId:  1
Latest checkpoint's NextMultiOffset:  0
Latest checkpoint's oldestXID:        479
Latest checkpoint's oldestXID's DB:   1
Latest checkpoint's oldestActiveXID:  504
Latest checkpoint's oldestMultiXid:   1
Latest checkpoint's oldestMulti's DB: 1
Latest checkpoint's oldestCommitTsXid:0
Latest checkpoint's newestCommitTsXid:0
Time of latest checkpoint:            Mon Oct 18 05:21:49 2021
Fake LSN counter for unlogged rels:   0/3E8
Minimum recovery ending location:     0/58000320

实际操作过程中，如果删除recovery.signal文件后重启PG，restore and recovery就白做了
-bash-4.2$ mv recovery.signal recovery.signal.bk
-bash-4.2$ logout
[root@pga ~]# systemctl restart postgresql-13
[root@pga ~]# su - postgres
Last login: Tue Oct 19 07:45:25 UTC 2021
-bash-4.2$ psql
psql (13.4)
Type "help" for help.

postgres=# \l
                             List of databases
   Name    |  Owner   | Encoding  | Collate | Ctype |   Access privileges
-----------+----------+-----------+---------+-------+-----------------------
 postgres  | postgres | SQL_ASCII | C       | C     |
 template0 | postgres | SQL_ASCII | C       | C     | =c/postgres          +
           |          |           |         |       | postgres=CTc/postgres
 template1 | postgres | SQL_ASCII | C       | C     | =c/postgres          +
           |          |           |         |       | postgres=CTc/postgres
(3 rows)

log:    barman恢复后重启postgresql  starting point-in-time recovery to 2021-10-18 05:17:05.751485+00
2021-10-19 07:45:21.138 UTC [15977] LOG:  starting PostgreSQL 13.4 on x86_64-pc-linux-gnu, compiled by gcc (GCC) 4.8.5 20150623 (Red Hat 4.8.5-44), 64-bit
2021-10-19 07:45:21.140 UTC [15977] LOG:  listening on IPv4 address "0.0.0.0", port 5432
2021-10-19 07:45:21.140 UTC [15977] LOG:  listening on IPv6 address "::", port 5432
2021-10-19 07:45:21.142 UTC [15977] LOG:  listening on Unix socket "/var/run/postgresql/.s.PGSQL.5432"
2021-10-19 07:45:21.147 UTC [15977] LOG:  listening on Unix socket "/tmp/.s.PGSQL.5432"
2021-10-19 07:45:21.159 UTC [15979] LOG:  database system was interrupted; last known up at 2021-10-18 05:16:49 UTC
2021-10-19 07:45:21.159 UTC [15979] LOG:  creating missing WAL directory "pg_wal/archive_status"
cp: cannot stat 'barman_wal/00000002.history': No such file or directory
2021-10-19 07:45:21.255 UTC [15979] LOG:  starting point-in-time recovery to 2021-10-18 05:17:05.751485+00
2021-10-19 07:45:21.291 UTC [15979] LOG:  restored log file "000000010000000000000057" from archive
2021-10-19 07:45:21.301 UTC [15979] LOG:  redo starts at 0/57000028
2021-10-19 07:45:21.303 UTC [15979] LOG:  consistent recovery state reached at 0/57000138
2021-10-19 07:45:21.306 UTC [15977] LOG:  database system is ready to accept read only connections
2021-10-19 07:45:21.341 UTC [15979] LOG:  restored log file "000000010000000000000058" from archive
2021-10-19 07:45:21.345 UTC [15979] LOG:  recovery stopping before commit of transaction 504, time 2021-10-19 01:01:37.105917+00
2021-10-19 07:45:21.345 UTC [15979] LOG:  pausing at the end of recovery
2021-10-19 07:45:21.345 UTC [15979] HINT:  Execute pg_wal_replay_resume() to promote.
.......下面的操作是删除recovery.signal文件后重启PG,database system was shut down in recovery at 2021-10-19 07:46:19 UTC
2021-10-19 07:46:19.387 UTC [15977] LOG:  received fast shutdown request
2021-10-19 07:46:19.389 UTC [15977] LOG:  aborting any active transactions
2021-10-19 07:46:19.395 UTC [15982] LOG:  shutting down
2021-10-19 07:46:19.447 UTC [15977] LOG:  database system is shut down
2021-10-19 07:46:19.571 UTC [16043] LOG:  starting PostgreSQL 13.4 on x86_64-pc-linux-gnu, compiled by gcc (GCC) 4.8.5 20150623 (Red Hat 4.8.5-44), 64-bit
2021-10-19 07:46:19.571 UTC [16043] LOG:  listening on IPv4 address "0.0.0.0", port 5432
2021-10-19 07:46:19.572 UTC [16043] LOG:  listening on IPv6 address "::", port 5432
2021-10-19 07:46:19.575 UTC [16043] LOG:  listening on Unix socket "/var/run/postgresql/.s.PGSQL.5432"
2021-10-19 07:46:19.579 UTC [16043] LOG:  listening on Unix socket "/tmp/.s.PGSQL.5432"
2021-10-19 07:46:19.589 UTC [16045] LOG:  database system was shut down in recovery at 2021-10-19 07:46:19 UTC
2021-10-19 07:46:19.591 UTC [16045] LOG:  database system was not properly shut down; automatic recovery in progress
2021-10-19 07:46:19.596 UTC [16045] LOG:  redo starts at 0/580000C8
2021-10-19 07:46:19.840 UTC [16045] LOG:  redo done at 0/58000AD8
2021-10-19 07:46:19.879 UTC [16043] LOG:  database system is ready to accept connections

正确做法是，不手动删除recovery.signal文件
在psql中执行
postgres=# select pg_wal_replay_resume();
 pg_wal_replay_resume
----------------------

(1 row)

postgres=# \l
                             List of databases
   Name    |  Owner   | Encoding  | Collate | Ctype |   Access privileges
-----------+----------+-----------+---------+-------+-----------------------
 pgbench   | postgres | SQL_ASCII | C       | C     |                                   #DB还在
 postgres  | postgres | SQL_ASCII | C       | C     |
 template0 | postgres | SQL_ASCII | C       | C     | =c/postgres          +
           |          |           |         |       | postgres=CTc/postgres
 template1 | postgres | SQL_ASCII | C       | C     | =c/postgres          +
           |          |           |         |       | postgres=CTc/postgres
(4 rows)

日志：
2021-10-19 08:49:27.947 UTC [16405] LOG:  selected new timeline ID: 2
2021-10-19 08:49:28.112 UTC [16405] LOG:  archive recovery complete
cp: cannot stat 'barman_wal/00000001.history': No such file or directory
2021-10-19 08:49:28.170 UTC [16403] LOG:  database system is ready to accept connections
-bash-4.2$ ls -lh
total 201K
-rw------- 1 postgres postgres 16M Oct 19 08:47 000000010000000000000058
-rw------- 1 postgres postgres  51 Oct 19 08:49 00000002.history
-rw------- 1 postgres postgres 16M Oct 19 08:49 000000020000000000000058       timelineid变成2
-rw------- 1 postgres postgres 16M Oct 19 08:47 000000020000000000000059
drwx------ 2 postgres postgres   4 Oct 19 08:49 archive_status

-bash-4.2$ cat pg_wal/00000002.history
1       0/58000320      before 2021-10-19 01:01:37.105917+00


# 恢复数据到另一台DB
另一台DB  pgb的前提条件
1 安装postgresql-13, rsync, openssh-server包
2 从barman服务器上的barman账号免密登录 ssh postgres@pgb
-bash-4.2$ barman recover --target-time="2021-10-18 05:17:05.751485+00:00" --remote-ssh-command "ssh postgres@pgb" pga 20211018T051648 $PGDATA
Starting remote restore for server pga using backup 20211018T051648
Destination directory: /var/lib/pgsql/13/data
Remote command: ssh postgres@pgb
Doing PITR. Recovery target time: '2021-10-18 05:17:05.751485+00:00'
Copying the base backup.
Copying required WAL segments.
Generating recovery configuration
Identify dangerous settings in destination directory.

IMPORTANT
These settings have been modified to prevent data losses

postgresql.conf line 238: archive_command = false

Recovery completed (start time: 2021-10-19 02:57:16.605443, elapsed time: 39 seconds)

Your PostgreSQL server has been successfully prepared for recovery!

pgb上检查
[root@pgb ~]# systemctl start postgresql-13
[root@pgb ~]# su - postgres
Last login: Tue Oct 19 02:53:16 UTC 2021
-bash-4.2$ psql
psql (13.4)
Type "help" for help.

postgres=# \l
                             List of databases
   Name    |  Owner   | Encoding  | Collate | Ctype |   Access privileges
-----------+----------+-----------+---------+-------+-----------------------
 pgbench   | postgres | SQL_ASCII | C       | C     |
 postgres  | postgres | SQL_ASCII | C       | C     |
 template0 | postgres | SQL_ASCII | C       | C     | =c/postgres          +
           |          |           |         |       | postgres=CTc/postgres
 template1 | postgres | SQL_ASCII | C       | C     | =c/postgres          +
           |          |           |         |       | postgres=CTc/postgres
(4 rows)

postgres=# \c pgbench
You are now connected to database "pgbench" as user "postgres".
pgbench=# \d
              List of relations
 Schema |       Name       | Type  |  Owner
--------+------------------+-------+----------
 public | pgbench_accounts | table | postgres
 public | pgbench_branches | table | postgres
 public | pgbench_history  | table | postgres
 public | pgbench_tellers  | table | postgres
(4 rows)

pgbench=# select * from pgbench_accounts limit 2;
 aid | bid | abalance |                                        filler
-----+-----+----------+--------------------------------------------------------------------------------------
   1 |   1 |        0 |
   2 |   1 |        0 |
(2 rows)

-bash-4.2$ /usr/pgsql-13/bin/pg_controldata
pg_control version number:            1300
Catalog version number:               202007201
Database system identifier:           7019560887058907630
Database cluster state:               in archive recovery      不是生产模式
pg_control last modified:             Tue Oct 19 02:58:58 2021
Latest checkpoint location:           0/57000060
Latest checkpoint's REDO location:    0/57000028
Latest checkpoint's REDO WAL file:    000000010000000000000057
Latest checkpoint's TimeLineID:       1
Latest checkpoint's PrevTimeLineID:   1
Latest checkpoint's full_page_writes: on
Latest checkpoint's NextXID:          0:504
Latest checkpoint's NextOID:          24579
Latest checkpoint's NextMultiXactId:  1
Latest checkpoint's NextMultiOffset:  0
Latest checkpoint's oldestXID:        479
Latest checkpoint's oldestXID's DB:   1
Latest checkpoint's oldestActiveXID:  504
Latest checkpoint's oldestMultiXid:   1
Latest checkpoint's oldestMulti's DB: 1
Latest checkpoint's oldestCommitTsXid:0
Latest checkpoint's newestCommitTsXid:0
Time of latest checkpoint:            Mon Oct 18 05:16:49 2021
Fake LSN counter for unlogged rels:   0/3E8
Minimum recovery ending location:     0/57000138

-bash-4.2$ cat postgresql.auto.conf
# Do not edit this file manually!
# It will be overwritten by the ALTER SYSTEM command.
restore_command = 'cp barman_wal/%f %p'
recovery_end_command = 'rm -fr barman_wal'
recovery_target_time = '2021-10-18 05:17:05.751485+00:00'

如果要变成生产模式，直接  select pg_wal_replay_resume();

#后续。。。
pga在恢复后继续做barman backup会出错
需要以下几步
重新创建slot
-bash-4.2$ barman receive-wal --create-slot pga
重建partial文件
-bash-4.2$ barman receive-wal --reset pga
Resetting receive-wal directory status
Removing status file /var/lib/barman/pga/streaming/000000010000000000000059.partial
Creating status file /var/lib/barman/pga/streaming/000000020000000000000059.partial
重新运行barman cron
-bash-4.2$ barman cron
Starting WAL archiving for server pga
Starting streaming archiver for server pga
-bash-4.2$ barman check pga
Server pga:
        PostgreSQL: OK
        superuser or standard user with backup privileges: OK
        PostgreSQL streaming: OK
        wal_level: OK
        replication slot: OK
        directories: OK
        retention policy settings: OK
        backup maximum age: OK (no last_backup_maximum_age provided)
        compression settings: OK
        failed backups: OK (there are 0 failed backups)
        minimum redundancy requirements: OK (have 2 backups, expected at least 0)
        pg_basebackup: OK
        pg_basebackup compatible: OK
        pg_basebackup supports tablespaces mapping: OK
        systemid coherence: OK
        pg_receivexlog: OK
        pg_receivexlog compatible: OK
        receive-wal running: OK
        archiver errors: OK
继续做barman backup会hang住
-bash-4.2$ barman backup pga
Starting backup using postgres method for server pga in /var/lib/barman/pga/base/20211020T065732
Backup start at LSN: 0/590001D8 (000000020000000000000059, 000001D8)
Starting backup copy via pg_basebackup for 20211020T065732



^CERROR: Backup failed copying files.
DETAILS: KeyboardInterrupt

原因是：did recovery after the first backup operation. Then Barman set a string #BARMAN# ahead archive_command = 'barman-wal-archive backup pg %p' command into the postgresql.conf file
删除#BARMAN#，改成
archive_command = 'cp %p /var/lib/pgsql/13/data/pg_archive/%f'          # command to use to archive a logfile segment
#archive_command = false

然后重启PG，重新做barman backup
-bash-4.2$ barman backup pga
Starting backup using postgres method for server pga in /var/lib/barman/pga/base/20211020T092328
Backup start at LSN: 0/CF0000D8 (0000000200000000000000CF, 000000D8)
Starting backup copy via pg_basebackup for 20211020T092328
Copy done (time: 36 seconds)
Finalising the backup.
Backup size: 6.0 GiB
Backup end at LSN: 0/D1000060 (0000000200000000000000D1, 00000060)
Backup completed (start time: 2021-10-20 09:23:28.928455, elapsed time: 36 seconds)
Processing xlog segments from streaming for pga
        0000000200000000000000D0
        0000000200000000000000D1
		
-bash-4.2$ barman list-backup pga
pga 20211020T092328 - Wed Oct 20 09:24:05 2021 - Size: 6.0 GiB - WAL Size: 0 B
pga 20211020T091708 - FAILED
pga 20211020T071448 - FAILED
pga 20211020T065732 - FAILED
pga 20211018T051648 - Mon Oct 18 05:17:05 2021 - Size: 2.9 GiB - WAL Size: 16.0 MiB
pga 20211016T092814 - Sat Oct 16 09:28:32 2021 - Size: 2.8 GiB - WAL Size: 32.0 MiB
-bash-4.2$ barman status pga
Server pga:
        Description: Example of PostgreSQL Database (Streaming-Only)
        Active: True
        Disabled: False
        PostgreSQL version: 13.4
        Cluster state: in production
        pgespresso extension: Not available
        Current data size: 2.7 GiB
        PostgreSQL Data directory: /var/lib/pgsql/13/data
        Current WAL segment: 0000000200000000000000D2
        Passive node: False
        Retention policies: enforced (mode: auto, retention: REDUNDANCY 3, WAL retention: MAIN)
        No. of available backups: 3
        First available backup: 20211016T092814
        Last available backup: 20211020T092328
        Minimum redundancy requirements: satisfied (3/0)
再备份一次，测试retention policy		
-bash-4.2$ barman backup pga
Starting backup using postgres method for server pga in /var/lib/barman/pga/base/20211020T092717
Backup start at LSN: 0/D21E95F0 (0000000200000000000000D2, 001E95F0)
Starting backup copy via pg_basebackup for 20211020T092717
Copy done (time: 38 seconds)
Finalising the backup.
Backup size: 6.0 GiB
Backup end at LSN: 0/D4000000 (0000000200000000000000D3, 00000000)
Backup completed (start time: 2021-10-20 09:27:17.449045, elapsed time: 38 seconds)
Processing xlog segments from streaming for pga
        0000000200000000000000D2
        0000000200000000000000D3
根据retention policy,最旧的backup  pga 20211016T092814	被删除	
-bash-4.2$ barman list-backup pga
pga 20211020T092717 - Wed Oct 20 09:27:55 2021 - Size: 6.0 GiB - WAL Size: 0 B
pga 20211020T092328 - Wed Oct 20 09:24:05 2021 - Size: 6.0 GiB - WAL Size: 32.0 MiB
pga 20211020T091708 - FAILED
pga 20211020T071448 - FAILED
pga 20211020T065732 - FAILED
pga 20211018T051648 - Mon Oct 18 05:17:05 2021 - Size: 2.9 GiB - WAL Size: 16.0 MiB



The archive_command is the traditional method to archive WAL files.

The value of this PostgreSQL configuration parameter must be a shell command to be executed by the PostgreSQL server 
to copy the WAL files to the Barman incoming directory.
-bash-4.2$ ps -ef |grep bar
postgres  3003  2953  0 08:37 ?        00:00:03 postgres: walsender streaming_barman 10.152.219.158(40616) streaming 0/57000000
incoming目录是archive_command 发过来的日志, wals目录是 pg_receivwal发过来的streaming日志
-bash-4.2$ du -sh incoming/ wals
133M    incoming/
133M    wals

