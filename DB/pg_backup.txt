pg_start_backup() is a function we execute to start a base backup. It was part of the original API for physical backup introduced in PostgreSQL 8.0. It’s now been mostly superceded by the replication command BASE_BACKUP,
 which is most frequently executed by the pg_basebackup utility.

So what does a base backup actually do? Well, first we execute a checkpoint so that as many changed data blocks are on disk as possible. Next we force full page writes to occur, even if full_page_writes = off, 
because we need to see the whole page for any changes. Lastly, we record the starting point of the backup. That’s all.

Base backup does NOT prevent writes to the data directory. It’s designed to be “fully online” so it doesn’t take locks on objects, doesn’t interefere with the operation of the database apart from some details 
if you try to shut it down while taking a backup.

pg_stop_backup() is the end marker for that backup.

The key point is that the base backup is NOT a consistent copy of the database. You might have copied every file, but all the data is taken at different times. So its wrong. Until you recover the database with the WAL changes 
that occurred between the start backup and the stop backup.

Which is why you’ll be wanting to use a command like this

pg_basebackup –xlog-method=stream

or use a utility that does everything for you, like Barman.





postgresql-13主从 streaming复制 同步模式
===========================================================================================================================
1 概念和原理
一.物理流复制
物理流复制是一种数据库主备同步技术，该特性同步的数据是数据库中物理页面变化数据（WAL），该模式备库的底层数据页面状态和主库完全相同，这样的实现方案让数据库主备以及同步状态都非常稳定。
二.流复制中的角色
1. 主库 backend 进程，它负责执行用户的 SQL，在修改数据前会先记录 WAL（Write-Ahead Logging）日志。这些日志中事物提交日志（CommitTransaction）由 backend 进程负责写到磁盘。
2. 主库 WALsender 进程，负责把 WAL 日志发送给备库的 WALreceiver 进程。
3. 备库 WALreceiver 进程，负责接收 WALsender 发送的 WAL 日志，并持久化到存储。
4. 备库 startup 进程，负责恢复 WALsender 写到磁盘上的 WAL 日志，把数据 apply 到数据页面上。
异步流复制和同步流复制
一.异步流复制
默认状态下的流复制是以异步方式工作的，也就是说主库写本地数据和 WAL 日志，WALsender 异步的把数据发送给备库，备库收到数据后再异步的做数据恢复。
异步模式可以做到较好的性能，它的劣势是：极端情况下，主库如果当机，被库被激活成主库，部分 WAL 没有发送到备库，可能造成数据丢失。
二.同步流复制
相对于异步模式，PostgreSQL 还支持同步模式的流复制。同模模式可以细分为三级
1. REMOTE_WRITE 保证该事务的所有数据被备库收到（备库收到数据并调用 write 写磁盘，但并未持久化到磁盘）
2. REMOTE_FLUSH 保证该事务的所有数据在备库持久化到磁盘（调用 flush，但只读查询看不到）
3. REMOTE_APPLY 保证该事务的所有数据在备库被恢复到数据页面（恢复进程读取并解析 WAL，再 APPLY 到数据页面，在备库上执行的只读查询能看到数据的变化）
三. 同步流复制源码解析
1. MVCC 机制和数据可见性
简单的说 PostgreSQL ACID 是基于 MVCC 和 WAL 技术。数据的修改过程可以简单描述为
1. 首先 backend 开启是一个事务,获得一个事务号 XID;
2. 在这个事务中对数据的任意修改，都被 XID 标记。
3. 其他 backend 在扫描数据时，会看到被这个 XID 修改过的数据，根据当前的隔离级别，选择对这些数据是否可见（默认的读已提交隔离级别看不到这些数据）。
4. 只有当此 XID 最后被标记成 commit （写 WAL commit log 和写 clog）后，其他的 backend 才能看到这个 XID 修改的数据。
2. 同模流复制的关键点
总结一下，实现流复制的同步模式，关键点在每个事务提交或回滚时，保证它产生的所有数据变化日志，即 WAL 都“同步”到备库。最后一条 WAL commit log 尤为关键。
3. 如何实现同步流复制
铺垫完所有概念和前提技术，我们看看同步模式具体是怎么实现的。以事务提交流程为例：
1. [主库 backend 进程]调用 RecordTransactionCommit 中写 WAL commit log，获得这条日志在在 WAL 中的位置 XLogRecPtr
2. [主库 backend 进程]完成写 WAL 后，进入 SyncRepWaitForLSN 等待 WAL 日志“同步”到备库。具体做法是:在共享内存中创建一个等待队列 SHMQueue 记录 XLogRecPtr，并调动 WaitLatch，让出 CPU 等待被唤醒。
3. [主库 WALsender 进程]相应所有备库的 WALreceiver 拉取 WAL 的请求。把 WAL 发送给所有备库。
4. [备库 WALreceiver 进程]写 WAL 的偏移（LogstreamResult.Write）和持久化 WAL 偏移（LogstreamResult.Flush）记录下来。
5. [备库 startup 进程]不断的恢复数据，把当前恢复到的 WAL 位点放在共享内存 xlogctl->lastReplayedEndRecPtr 中。
6. [备库 WALreceiver 进程]不断通过 r 报文和主库 WALsender 进程同步的状态，即 XLOGWRITELSN XLOGREMOTELSN XLOGAPPLYLSN（XLogWalRcvSendReply）
7. [主库 WALsender 进程]收到备库发送的 r 报文后，检查共享内存中的等待队列 SHMQueue, 根据备库反馈的位点结合 SHMQueue，唤醒那些等待队列中睡眠的 主库 backend 进程（WalSndWaitForWal）。
8. [主库 backend 进程]被唤醒，当前事务成功提交，SQL 执行完成返回给客户端。
===========================================================================================================================
2 配置
# Install the repository RPM:
sudo yum install -y https://download.postgresql.org/pub/repos/yum/reporpms/EL-7-x86_64/pgdg-redhat-repo-latest.noarch.rpm

# Install PostgreSQL:
sudo yum install -y postgresql13-server

# Optionally initialize the database and enable automatic start:
sudo /usr/pgsql-13/bin/postgresql-13-setup initdb
sudo systemctl enable postgresql-13
sudo systemctl start postgresql-13

环境变量
export PATH=/usr/pgsql-13/bin:$PATH
export PGDATA=/var/lib/postgresql/data

cat /etc/hosts
127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4
::1         localhost localhost.localdomain localhost6 localhost6.localdomain6
10.67.39.58  postgres-1
10.67.39.59  postgres-2

------主库操作
1 初始化数据库
postgresql-setup --initdb

2 在pg_hba.conf增加一行
host    replication     repl            postgres-2              trust

3 修改postgresql.conf
listen_addresses = '*'
synchronous_standby_names = '*'    同步模式的设置
synchronous_commit = on    默认设置，可以用select * from pg_settings where name='synchronous_commit';验证
# - Archiving -
archive_mode = on              
archive_command = 'test ! -f /opt/archivedir/%f && cp %p /opt/archivedir/%f'

4 重启postgresql
5 创建复制用户
create user repl replication LOGIN CONNECTION LIMIT 30 ENCRYPTED PASSWORD 'Foxconn123';

---------从库操作
从库只安装数据库软件，不进行数据库初始化
/usr/pgsql-13/bin/pg_basebackup --pgdata=$PGDATA --format=p --write-recovery-conf --checkpoint=fast --label=mffb --progress --host=postgres-1 --port=5432 --username=repl
***在PG12之前，-R备份结束之后会自动生成recovery.conf文件，用来做流复制判断主从同步的信息。但是从PG12开始，这个文件已经不需要了。***
***只需要在参数文件postgresql.conf中配置primary_conninfo参数即可。***

修改potgresql.conf， 这个配置文件从主库复制来
primary_conninfo = 'host=10.67.39.58 port=5432 user=repl password=Foxconn123'
primary_slot_name = 'postgres2_slot'

---------主库操作
在主库创建replication slot
***Slots can be created and dropped either via the streaming replication protocol (see Section 53.4) or via SQL functions (see Section 9.27.6).***
select * from pg_create_physical_replication_slot('postgres2_slot');
select slot_name,slot_type,active,wal_status from pg_replication_slots;

---------从库操作
systemctl start postgresql-13
如果从库设置正确的话，可以从log里看到
2021-07-14 06:07:25.820 UTC [852] LOG:  started streaming WAL from primary at 0/3000000 on timeline 1

---------在主库再次检查
postgres=# select slot_name,slot_type,active,wal_status from pg_replication_slots;
   slot_name    | slot_type | active | wal_status
----------------+-----------+--------+------------
 standby_slot   | physical  | f      |
 postgres2_slot | physical  | t      | reserved
---------观察进程
从库进程
-bash-4.2$ ps -ef |grep wal
postgres   852 17759  0 06:07 ?        00:00:01 postgres: walreceiver streaming 0/302FA60
主库进程
-bash-4.2$ ps -ef|grep wal
postgres  2481 18063  0 06:07 ?        00:00:00 postgres: walsender repl 10.67.39.59(38252) streaming 0/302FA60

--------主库观察同步状态
postgres=# select * from pg_stat_replication;
-[ RECORD 1 ]----+------------------------------
pid              | 2481
usesysid         | 16384
usename          | repl
application_name | walreceiver
client_addr      | 10.67.39.59
client_hostname  | postgres-2
client_port      | 38252
backend_start    | 2021-07-14 06:07:28.239589+00
backend_xmin     |
state            | streaming
sent_lsn         | 0/4000148
write_lsn        | 0/4000148
flush_lsn        | 0/4000148
replay_lsn       | 0/4000148
write_lag        |
flush_lag        |
replay_lag       |
sync_priority    | 1
sync_state       | sync    同步方式
reply_time       | 2021-07-14 07:05:54.037038+00

--------从库观察同步状态
postgres=# select * from pg_stat_wal_receiver;
-[ RECORD 1 ]---------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
pid                   | 852
status                | streaming
receive_start_lsn     | 0/3000000
receive_start_tli     | 1
written_lsn           | 0/4000148
flushed_lsn           | 0/4000148
received_tli          | 1
last_msg_send_time    | 2021-07-14 07:04:26.345695+00
last_msg_receipt_time | 2021-07-14 07:04:23.79761+00
latest_end_lsn        | 0/4000148
latest_end_time       | 2021-07-14 06:40:52.494625+00
slot_name             | postgres2_slot
sender_host           | postgres-1
sender_port           | 5432
conninfo              | user=repl passfile=/var/lib/pgsql/.pgpass channel_binding=prefer dbname=replication host=postgres-1 port=5432 fallback_application_name=walreceiver sslmode=prefer sslcompression=0 ssl_min_protocol_version=TLSv1.2 gssencmode=prefer krbsrvname=postgres target_session_attrs=any

 ---------测试
 在主库create table, 从库观察
 
postgres=# select pg_is_in_recovery();       主库是f代表false ；备库是t，代表true
 pg_is_in_recovery
-------------------
 t


切归档
[root@postgres-1 archivedir]# ls -lh
total 33M
-rw-------. 1 postgres postgres 16M Jul 13 09:20 000000010000000000000001
-rw-------. 1 postgres postgres 16M Jul 13 09:20 000000010000000000000002
-rw-------. 1 postgres postgres 316 Jul 13 09:20 000000010000000000000002.00000028.backup

postgres=# select pg_switch_wal();
 pg_switch_wal
---------------
 0/302FA78
(1 row)

[root@postgres-1 archivedir]# ls -lh
total 49M
-rw-------. 1 postgres postgres 16M Jul 13 09:20 000000010000000000000001
-rw-------. 1 postgres postgres 16M Jul 13 09:20 000000010000000000000002
-rw-------. 1 postgres postgres 316 Jul 13 09:20 000000010000000000000002.00000028.backup
-rw-------. 1 postgres postgres 16M Jul 14 06:36 000000010000000000000003
或者
postgres=# select * from pg_stat_get_archiver();
-[ RECORD 1 ]------+-----------------------------
archived_count     | 11
last_archived_wal  | 000000010000000000000008
last_archived_time | 2021-07-14 09:07:57.06432+00
failed_count       | 0
last_failed_wal    |
last_failed_time   |
stats_reset        | 2021-07-13 08:26:45.98489+00

postgres=# select pg_switch_wal();
-[ RECORD 1 ]-+----------
pg_switch_wal | 0/901BD78

postgres=# select * from pg_stat_get_archiver();
-[ RECORD 1 ]------+------------------------------
archived_count     | 12
last_archived_wal  | 000000010000000000000009
last_archived_time | 2021-07-15 06:21:10.562539+00
failed_count       | 0
last_failed_wal    |
last_failed_time   |
stats_reset        | 2021-07-13 08:26:45.98489+00

####Rollback from Synchronous to Asynchronous PostgreSQL Replication
Postgresql.conf注释下面两行
#synchronous_standby_names = 'pgsql_0_node_0'
#synchronous_commit = on
And restart the database service.
$ systemctl restart postgresql-13

#### pgbackrest
安装
yum install postgresql13-server postgresql13-contrib pgbackrest

配置
[root@pg01 ~]# cat /etc/pgbackrest.conf
[global]
repo1-path=/var/lib/pgbackrest
repo1-retention-full=2
log-level-console=info
log-level-file=debug

repo2-path=/repo
repo2-type=s3
repo2-s3-endpoint=repo-centos.local
repo2-s3-bucket=pgbackrest
repo2-s3-key=admin
repo2-s3-key-secret=vSTJ456789
repo2-s3-region=default
repo2-retention-full=1
repo2-s3-uri-style=path
repo2-storage-verify-tls=n
repo2-storage-port=9000

process-max=2
start-fast=y
delta=y

[main]
pg1-path=/var/lib/pgsql/13/data


-bash-4.2$ cat postgresql.conf |egrep -i '^listen|^password_en|^archive_'
listen_addresses = '*'
password_encryption = scram-sha-256             # md5 or scram-sha-256
archive_mode = on
archive_command = 'pgbackrest --stanza=main archive-push %p'

 
# 全备
pgbackrest --stanza=main --type=full backup
恢复的话，要把$PGDATA里的数据都删掉
pgbackrest --stanza=main --delta restore

使用minio全备和恢复
-bash-4.2$ pgbackrest --stanza=main --type=full --repo=2 backup
2021-09-28 08:45:38.174 P00   INFO: backup command begin 2.35: --delta --exec-id=5087-b0ef3e33 --log-level-console=info --log-level-file=debug --pg1-path=/var/lib/pgsql/13/data --process-max=2 --repo=2 --repo1-path=/var/lib/pgbackrest --repo2-path=/repo --repo1-retention-full=2 --repo2-retention-full=1 --repo2-s3-bucket=pgbackrest --repo2-s3-endpoint=repo-centos.local --repo2-s3-key=<redacted> --repo2-s3-key-secret=<redacted> --repo2-s3-region=default --repo2-s3-uri-style=path --repo2-storage-port=9000 --no-repo2-storage-verify-tls --repo2-type=s3 --stanza=main --start-fast --type=full
2021-09-28 08:45:38.924 P00   INFO: execute non-exclusive pg_start_backup(): backup begins after the requested immediate checkpoint completes
2021-09-28 08:45:39.428 P00   INFO: backup start archive = 00000003000000000000000D, lsn = 0/D000028
2021-09-28 08:45:45.140 P00   INFO: execute non-exclusive pg_stop_backup() and wait for all WAL segments to archive
2021-09-28 08:45:45.444 P00   INFO: backup stop archive = 00000003000000000000000D, lsn = 0/D000138
2021-09-28 08:45:45.452 P00   INFO: check archive for segment(s) 00000003000000000000000D:00000003000000000000000D
2021-09-28 08:45:45.944 P00   INFO: new backup label = 20210928-084538F
2021-09-28 08:45:46.020 P00   INFO: full backup size = 24MB, file total = 940
2021-09-28 08:45:46.020 P00   INFO: backup command end: completed successfully (7851ms)
2021-09-28 08:45:46.020 P00   INFO: expire command begin 2.35: --exec-id=5087-b0ef3e33 --log-level-console=info --log-level-file=debug --repo=2 --repo1-path=/var/lib/pgbackrest --repo2-path=/repo --repo1-retention-full=2 --repo2-retention-full=1 --repo2-s3-bucket=pgbackrest --repo2-s3-endpoint=repo-centos.local --repo2-s3-key=<redacted> --repo2-s3-key-secret=<redacted> --repo2-s3-region=default --repo2-s3-uri-style=path --repo2-storage-port=9000 --no-repo2-storage-verify-tls --repo2-type=s3 --stanza=main
2021-09-28 08:45:46.061 P00   INFO: repo2: 13-1 remove archive, start = 00000003000000000000000C, stop = 00000003000000000000000C
2021-09-28 08:45:46.065 P00   INFO: expire command end: completed successfully (45ms)

-bash-4.2$ pgbackrest --stanza=main --repo=2 --delta restore
2021-09-28 09:17:48.153 P00   INFO: restore command begin 2.35: --delta --exec-id=5197-e962d863 --log-level-console=info --log-level-file=debug --pg1-path=/var/lib/pgsql/13/data --process-max=2 --repo=2 --repo1-path=/var/lib/pgbackrest --repo2-path=/repo --repo2-s3-bucket=pgbackrest --repo2-s3-endpoint=repo-centos.local --repo2-s3-key=<redacted> --repo2-s3-key-secret=<redacted> --repo2-s3-region=default --repo2-s3-uri-style=path --repo2-storage-port=9000 --no-repo2-storage-verify-tls --repo2-type=s3 --stanza=main
WARN: --delta or --force specified but unable to find 'PG_VERSION' or 'backup.manifest' in '/var/lib/pgsql/13/data' to confirm that this is a valid $PGDATA directory.  --delta and --force have been disabled and if any files exist in the destination directories the restore will be aborted.
2021-09-28 09:17:48.252 P00   INFO: repo2: restore backup set 20210928-084538F
2021-09-28 09:17:51.516 P00   INFO: write updated /var/lib/pgsql/13/data/postgresql.auto.conf
2021-09-28 09:17:51.528 P00   INFO: restore global/pg_control (performed last to ensure aborted restores cannot be started)
2021-09-28 09:17:51.530 P00   INFO: restore size = 24MB, file total = 940
2021-09-28 09:17:51.534 P00   INFO: restore command end: completed successfully (3385ms)


****minio with ssl ****
[root@repo-centos ~]# cd .minio/certs
[root@repo-centos certs]# certgen -ca -host "repo-centos.local,10.67.51.164,172.17.0.2"
2021/09/28 16:27:59 wrote public.crt
2021/09/28 16:27:59 wrote private.key
[root@repo-centos web]# cat minio.sh
docker run -d \
--name myminio \
-e MINIO_ACCESS_KEY=admin \
-e MINIO_SECRET_KEY=vSTJ456789 \
-v /mrepo/minio:/data \
-v /root/.minio:/root/.minio \
-p 443:443 \
-p 9000:9000 \
minio/minio server /data --console-address ":443"



# PITR
-bash-4.2$ pgbackrest --stanza=main --type=diff backup
2021-09-27 09:33:04.180 P00   INFO: backup command begin 2.35: --exec-id=1000-4e0ae149 --log-level-console=info --log-level-file=debug --pg1-path=/var/lib/pgsql/13/data --repo1-path=/var/lib/pgbackrest --repo1-retention-full=2 --stanza=main --type=diff
2021-09-27 09:33:04.977 P00   INFO: last backup label = 20210927-090555F, version = 2.35
2021-09-27 09:33:04.977 P00   INFO: execute non-exclusive pg_start_backup(): backup begins after the next regular checkpoint completes
2021-09-27 09:33:10.688 P00   INFO: backup start archive = 000000020000000000000009, lsn = 0/9000028
WARN: a timeline switch has occurred since the 20210927-090555F backup, enabling delta checksum
      HINT: this is normal after restoring from backup or promoting a standby.
2021-09-27 09:33:12.243 P00   INFO: execute non-exclusive pg_stop_backup() and wait for all WAL segments to archive
2021-09-27 09:33:12.548 P00   INFO: backup stop archive = 000000020000000000000009, lsn = 0/9000100
2021-09-27 09:33:12.554 P00   INFO: check archive for segment(s) 000000020000000000000009:000000020000000000000009
2021-09-27 09:33:13.036 P00   INFO: new backup label = 20210927-090555F_20210927-093304D
2021-09-27 09:33:13.131 P00   INFO: diff backup size = 24MB, file total = 939
2021-09-27 09:33:13.131 P00   INFO: backup command end: completed successfully (8954ms)
2021-09-27 09:33:13.132 P00   INFO: expire command begin 2.35: --exec-id=1000-4e0ae149 --log-level-console=info --log-level-file=debug --repo1-path=/var/lib/pgbackrest --repo1-retention-full=2 --stanza=main
2021-09-27 09:33:13.139 P00   INFO: expire command end: completed successfully (8ms)
-bash-4.2$ psql -c "select * from t1"
 id
-----
   1
   2
   3
  ...
  100
-bash-4.2$ psql -c "select current_timestamp"
       current_timestamp
-------------------------------
 2021-09-27 09:33:46.013798+00
(1 row)

-bash-4.2$ psql -c "delete from t1 where id>90"
DELETE 10
-bash-4.2$ psql -c "select * from t1"
 id
----
  1
  2
  3
  ...
  90  
[root@pg01 etc]# systemctl stop postgresql-13
[root@pg01 etc]# su - postgres
Last login: Mon Sep 27 09:09:09 UTC 2021
-bash-4.2$ pgbackrest --stanza=main --delta --type=time "--target=2021-09-27 09:33:46.013798+00" --target-action=promote restore
2021-09-27 09:35:52.160 P00   INFO: restore command begin 2.35: --delta --exec-id=1056-a9541000 --log-level-console=info --log-level-file=debug --pg1-path=/var/lib/pgsql/13/data --repo1-path=/var/lib/pgbackrest --stanza=main --target="2021-09-27 09:33:46.013798+00" --target-action=promote --type=time
2021-09-27 09:35:52.248 P00   INFO: repo1: restore backup set 20210927-090555F_20210927-093304D
2021-09-27 09:35:52.252 P00   INFO: remove invalid files/links/paths from '/var/lib/pgsql/13/data'
2021-09-27 09:35:53.649 P00   INFO: write updated /var/lib/pgsql/13/data/postgresql.auto.conf
2021-09-27 09:35:53.661 P00   INFO: restore global/pg_control (performed last to ensure aborted restores cannot be started)
2021-09-27 09:35:53.664 P00   INFO: restore size = 24MB, file total = 939
2021-09-27 09:35:53.666 P00   INFO: restore command end: completed successfully (1509ms)
[root@pg01 etc]# systemctl start postgresql-13
[root@pg01 etc]# su - postgres
Last login: Mon Sep 27 09:35:48 UTC 2021
-bash-4.2$ psql -c "select * from t1 where id>89"
 id
-----
  90
  91
  92
  93
  94
  95
  96
  97
  98
  99
 100
  
