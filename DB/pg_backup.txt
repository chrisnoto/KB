########## PG内置的备份function
pg_start_backup() is a function we execute to start a base backup. It was part of the original API for physical backup introduced in PostgreSQL 8.0. It’s now been mostly superceded by the replication command BASE_BACKUP,
 which is most frequently executed by the pg_basebackup utility.

So what does a base backup actually do? Well, first we execute a checkpoint so that as many changed data blocks are on disk as possible. Next we force full page writes to occur, even if full_page_writes = off, 
because we need to see the whole page for any changes. Lastly, we record the starting point of the backup. That’s all.

Base backup does NOT prevent writes to the data directory. It’s designed to be “fully online” so it doesn’t take locks on objects, doesn’t interefere with the operation of the database apart from some details 
if you try to shut it down while taking a backup.

pg_stop_backup() is the end marker for that backup.

The key point is that the base backup is NOT a consistent copy of the database. You might have copied every file, but all the data is taken at different times. So its wrong. Until you recover the database with the WAL changes 
that occurred between the start backup and the stop backup.

Which is why you’ll be wanting to use a command like this

pg_basebackup –xlog-method=stream

or use a utility that does everything for you, like Barman.

#### pgbackrest
安装
yum install postgresql13-server postgresql13-contrib pgbackrest

配置
[root@pg01 ~]# cat /etc/pgbackrest.conf
[global]
repo1-path=/var/lib/pgbackrest
repo1-retention-full=2
log-level-console=info
log-level-file=debug

repo2-path=/repo
repo2-type=s3
repo2-s3-endpoint=repo-centos.local
repo2-s3-bucket=pgbackrest
repo2-s3-key=admin
repo2-s3-key-secret=vSTJ456789
repo2-s3-region=default
repo2-retention-full=1
repo2-s3-uri-style=path
repo2-storage-verify-tls=n
repo2-storage-port=9000

process-max=2
start-fast=y
delta=y

[main]
pg1-path=/var/lib/pgsql/13/data

-bash-4.2$ cat postgresql.conf |egrep -i '^listen|^password_en|^archive_'
listen_addresses = '*'
password_encryption = scram-sha-256             # md5 or scram-sha-256
archive_mode = on
archive_command = 'pgbackrest --stanza=main archive-push %p'
 
# 全备
pgbackrest --stanza=main --type=full backup
恢复的话，要把$PGDATA里的数据都删掉
pgbackrest --stanza=main --delta restore

使用minio全备和恢复
-bash-4.2$ pgbackrest --stanza=main --type=full --repo=2 backup
2021-09-28 08:45:38.174 P00   INFO: backup command begin 2.35: --delta --exec-id=5087-b0ef3e33 --log-level-console=info --log-level-file=debug --pg1-path=/var/lib/pgsql/13/data --process-max=2 --repo=2 --repo1-path=/var/lib/pgbackrest --repo2-path=/repo --repo1-retention-full=2 --repo2-retention-full=1 --repo2-s3-bucket=pgbackrest --repo2-s3-endpoint=repo-centos.local --repo2-s3-key=<redacted> --repo2-s3-key-secret=<redacted> --repo2-s3-region=default --repo2-s3-uri-style=path --repo2-storage-port=9000 --no-repo2-storage-verify-tls --repo2-type=s3 --stanza=main --start-fast --type=full
2021-09-28 08:45:38.924 P00   INFO: execute non-exclusive pg_start_backup(): backup begins after the requested immediate checkpoint completes
2021-09-28 08:45:39.428 P00   INFO: backup start archive = 00000003000000000000000D, lsn = 0/D000028
2021-09-28 08:45:45.140 P00   INFO: execute non-exclusive pg_stop_backup() and wait for all WAL segments to archive
2021-09-28 08:45:45.444 P00   INFO: backup stop archive = 00000003000000000000000D, lsn = 0/D000138
2021-09-28 08:45:45.452 P00   INFO: check archive for segment(s) 00000003000000000000000D:00000003000000000000000D
2021-09-28 08:45:45.944 P00   INFO: new backup label = 20210928-084538F
2021-09-28 08:45:46.020 P00   INFO: full backup size = 24MB, file total = 940
2021-09-28 08:45:46.020 P00   INFO: backup command end: completed successfully (7851ms)
2021-09-28 08:45:46.020 P00   INFO: expire command begin 2.35: --exec-id=5087-b0ef3e33 --log-level-console=info --log-level-file=debug --repo=2 --repo1-path=/var/lib/pgbackrest --repo2-path=/repo --repo1-retention-full=2 --repo2-retention-full=1 --repo2-s3-bucket=pgbackrest --repo2-s3-endpoint=repo-centos.local --repo2-s3-key=<redacted> --repo2-s3-key-secret=<redacted> --repo2-s3-region=default --repo2-s3-uri-style=path --repo2-storage-port=9000 --no-repo2-storage-verify-tls --repo2-type=s3 --stanza=main
2021-09-28 08:45:46.061 P00   INFO: repo2: 13-1 remove archive, start = 00000003000000000000000C, stop = 00000003000000000000000C
2021-09-28 08:45:46.065 P00   INFO: expire command end: completed successfully (45ms)

-bash-4.2$ pgbackrest --stanza=main --repo=2 --delta restore
2021-09-28 09:17:48.153 P00   INFO: restore command begin 2.35: --delta --exec-id=5197-e962d863 --log-level-console=info --log-level-file=debug --pg1-path=/var/lib/pgsql/13/data --process-max=2 --repo=2 --repo1-path=/var/lib/pgbackrest --repo2-path=/repo --repo2-s3-bucket=pgbackrest --repo2-s3-endpoint=repo-centos.local --repo2-s3-key=<redacted> --repo2-s3-key-secret=<redacted> --repo2-s3-region=default --repo2-s3-uri-style=path --repo2-storage-port=9000 --no-repo2-storage-verify-tls --repo2-type=s3 --stanza=main
WARN: --delta or --force specified but unable to find 'PG_VERSION' or 'backup.manifest' in '/var/lib/pgsql/13/data' to confirm that this is a valid $PGDATA directory.  --delta and --force have been disabled and if any files exist in the destination directories the restore will be aborted.
2021-09-28 09:17:48.252 P00   INFO: repo2: restore backup set 20210928-084538F
2021-09-28 09:17:51.516 P00   INFO: write updated /var/lib/pgsql/13/data/postgresql.auto.conf
2021-09-28 09:17:51.528 P00   INFO: restore global/pg_control (performed last to ensure aborted restores cannot be started)
2021-09-28 09:17:51.530 P00   INFO: restore size = 24MB, file total = 940
2021-09-28 09:17:51.534 P00   INFO: restore command end: completed successfully (3385ms)


****minio with ssl ****
[root@repo-centos ~]# cd .minio/certs
[root@repo-centos certs]# certgen -ca -host "repo-centos.local,10.67.51.164,172.17.0.2"
2021/09/28 16:27:59 wrote public.crt
2021/09/28 16:27:59 wrote private.key
[root@repo-centos web]# cat minio.sh
docker run -d \
--name myminio \
-e MINIO_ACCESS_KEY=admin \
-e MINIO_SECRET_KEY=vSTJ456789 \
-v /mrepo/minio:/data \
-v /root/.minio:/root/.minio \
-p 443:443 \
-p 9000:9000 \
minio/minio server /data --console-address ":443"

# PITR
-bash-4.2$ pgbackrest --stanza=main --type=diff backup
2021-09-27 09:33:04.180 P00   INFO: backup command begin 2.35: --exec-id=1000-4e0ae149 --log-level-console=info --log-level-file=debug --pg1-path=/var/lib/pgsql/13/data --repo1-path=/var/lib/pgbackrest --repo1-retention-full=2 --stanza=main --type=diff
2021-09-27 09:33:04.977 P00   INFO: last backup label = 20210927-090555F, version = 2.35
2021-09-27 09:33:04.977 P00   INFO: execute non-exclusive pg_start_backup(): backup begins after the next regular checkpoint completes
2021-09-27 09:33:10.688 P00   INFO: backup start archive = 000000020000000000000009, lsn = 0/9000028
WARN: a timeline switch has occurred since the 20210927-090555F backup, enabling delta checksum
      HINT: this is normal after restoring from backup or promoting a standby.
2021-09-27 09:33:12.243 P00   INFO: execute non-exclusive pg_stop_backup() and wait for all WAL segments to archive
2021-09-27 09:33:12.548 P00   INFO: backup stop archive = 000000020000000000000009, lsn = 0/9000100
2021-09-27 09:33:12.554 P00   INFO: check archive for segment(s) 000000020000000000000009:000000020000000000000009
2021-09-27 09:33:13.036 P00   INFO: new backup label = 20210927-090555F_20210927-093304D
2021-09-27 09:33:13.131 P00   INFO: diff backup size = 24MB, file total = 939
2021-09-27 09:33:13.131 P00   INFO: backup command end: completed successfully (8954ms)
2021-09-27 09:33:13.132 P00   INFO: expire command begin 2.35: --exec-id=1000-4e0ae149 --log-level-console=info --log-level-file=debug --repo1-path=/var/lib/pgbackrest --repo1-retention-full=2 --stanza=main
2021-09-27 09:33:13.139 P00   INFO: expire command end: completed successfully (8ms)
-bash-4.2$ psql -c "select * from t1"
 id
-----
   1
   2
   3
  ...
  100
-bash-4.2$ psql -c "select current_timestamp"
       current_timestamp
-------------------------------
 2021-09-27 09:33:46.013798+00
(1 row)

-bash-4.2$ psql -c "delete from t1 where id>90"
DELETE 10
-bash-4.2$ psql -c "select * from t1"
 id
----
  1
  2
  3
  ...
  90  
[root@pg01 etc]# systemctl stop postgresql-13
[root@pg01 etc]# su - postgres
Last login: Mon Sep 27 09:09:09 UTC 2021
-bash-4.2$ pgbackrest --stanza=main --delta --type=time "--target=2021-09-27 09:33:46.013798+00" --target-action=promote restore
2021-09-27 09:35:52.160 P00   INFO: restore command begin 2.35: --delta --exec-id=1056-a9541000 --log-level-console=info --log-level-file=debug --pg1-path=/var/lib/pgsql/13/data --repo1-path=/var/lib/pgbackrest --stanza=main --target="2021-09-27 09:33:46.013798+00" --target-action=promote --type=time
2021-09-27 09:35:52.248 P00   INFO: repo1: restore backup set 20210927-090555F_20210927-093304D
2021-09-27 09:35:52.252 P00   INFO: remove invalid files/links/paths from '/var/lib/pgsql/13/data'
2021-09-27 09:35:53.649 P00   INFO: write updated /var/lib/pgsql/13/data/postgresql.auto.conf
2021-09-27 09:35:53.661 P00   INFO: restore global/pg_control (performed last to ensure aborted restores cannot be started)
2021-09-27 09:35:53.664 P00   INFO: restore size = 24MB, file total = 939
2021-09-27 09:35:53.666 P00   INFO: restore command end: completed successfully (1509ms)
[root@pg01 etc]# systemctl start postgresql-13
[root@pg01 etc]# su - postgres
Last login: Mon Sep 27 09:35:48 UTC 2021
-bash-4.2$ psql -c "select * from t1 where id>89"
 id
-----
  90
  91
  92
  93
  94
  95
  96
  97
  98
  99
 100
  
## pg_receivewal  以streaming方式进行本地/远程备份wal
This client program will open a replication connection to PostgreSQL and stream WAL, just like streaming replication does. 
But instead of applying the information to a standby server, it writes it to disk. This way, it creates a copy of the WAL segments in real time. 
The partial WAL segment that pg_receivewal is currently writing has the extension .partial to distinguish it from completed WAL archives. 
Once the segment is complete, pg_receivewal will rename it.
pg_receivewal is an alternative to WAL archiving that avoids the gap between the current and the archived WAL location. It is a bit more complicated to manage and monitor, 
because it is a separate process and should run on a different machine.
pg_receivewal默认以异步的方式接收主库的wal，会损失几秒钟的事务

以下命令指定主库的复制槽standy_slot，以sync模式接收主库的wal，如同streaming replication，但是此时不会replay
注意:如果只有一个机器以同步模式接受主库的wal,如果机器死机，主库会hang住，不会提交任何事务了，要保证同时有两台机器接受主库的wal

-bash-4.2$ pg_receivewal -D wal_remotebk/ -v -S standby_slot --synchronous -h 10.67.39.58 -p 5432 -U repl -W
Password:
pg_receivewal: starting log streaming at 2/9000000 (timeline 1)
pg_receivewal: finished segment at 2/A000000 (timeline 1)
pg_receivewal: finished segment at 2/B000000 (timeline 1)
pg_receivewal: finished segment at 2/C000000 (timeline 1)
pg_receivewal: finished segment at 2/D000000 (timeline 1)
pg_receivewal: finished segment at 2/E000000 (timeline 1)
pg_receivewal: finished segment at 2/F000000 (timeline 1)


使用restore_command恢复数据库，这里用了nfs挂载
restore_command = 'cp /walarchive/%f %p || cp /walarchive/%f.partial %p'

重要提示，可以使用pg_receivewal实现多副本redolog的功能，类似oracle的redo log group


###########  barman  ###########
工作原理
物理全備+歸檔備份（WAL日誌備份），從而達到任意時間點的恢復。即恢復全備後，通過指定WAL日誌的時間點、LSN等即可恢復到資料庫的任意時間點。
barman备份方法
backup_method = postgres  # streaming backup方式   使用了工具pg_basebackup+pg_receivewal
backup_method = rysnc     # rsync/ssh 方式    barman2.0之前的备份方式，支持增量备份

# 配置过程

一、配置需要备份的远程PG
1 修改postgresql.conf配置
listen_addresses = '*'
port = 5432
wal_level = replica  #11版本後改爲replica
archive_mode = on
archive_command = 'cp %p /var/lib/pgsql/13/data/pg_archive/%f'
max_wal_senders = 10  #建議大於等於3
synchronous_standby_names = '*'        #这个设置会造成事务提交hang主，需要临时再设置一下 synchronous_commit = local
hot_standby = on
log_filename = 'postgresql-%Y%m%d_%H%M.log'
2 修改pg_hba.conf配置

local   all             all                                       trust
host    all             all               0.0.0.0/0               md5
host    all             all               ::1/128                 trust
host    replication     barman            0.0.0.0/0               md5
host    replication     streaming_barman  0.0.0.0/0               md5
3 創建pg_archive，並設置用戶組

mkdir -p /var/lib/pgsql/13/data/pg_archive
chown postgres:postgres /var/lib/pgsql/13/data/pg_archive -R

4 啓動postgresql

systemctl enable postgresql-13
systemctl start postgresql-13

5 創建barman和barman_streaming用戶

su postgres
createuser -s -P barman
#設置密碼
createuser -P --replication streaming_barman
#設置密碼

二、barman安装和配置

在备份服务器上安装barman
yum install barman barman-cli
yum install postgresql13-contrib

修改barman的公共配置
vi /etc/barman.conf

parallel_jobs = 2   #併發數
immediate_checkpoint = true   #在執行back時是否會自動執行checkpoint

-bash-4.2$ cat /etc/barman.d/pga.conf |egrep -v ';|^$'
[pga]
description =  "Example of PostgreSQL Database (Streaming-Only)"
conninfo = host=pga user=barman dbname=postgres
streaming_conninfo = host=pga user=streaming_barman
backup_method = postgres
streaming_archiver = on
slot_name = barman

barman账号设置
su - barman
-bash-4.2$ cat .bashrc
export PATH="/usr/local/bin:/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/usr/pgsql-13/bin:/usr/pgsql-13/bin"
export PGDATA="/var/lib/pgsql/13/data"

配置.pgpass免密
-bash-4.2$ cat .pgpass
pga:5432:*:streaming_barman:Foxconn123
pga:5432:*:barman:123456

barman账号下做免密验证
-bash-4.2$ psql -c 'select version()' -U barman -h pga postgres
                                                 version
---------------------------------------------------------------------------------------------------------
 PostgreSQL 13.4 on x86_64-pc-linux-gnu, compiled by gcc (GCC) 4.8.5 20150623 (Red Hat 4.8.5-44), 64-bit
(1 row)

-bash-4.2$ psql -c 'select version()' -U streaming_barman -h pga postgres
                                                 version
---------------------------------------------------------------------------------------------------------
 PostgreSQL 13.4 on x86_64-pc-linux-gnu, compiled by gcc (GCC) 4.8.5 20150623 (Red Hat 4.8.5-44), 64-bit
(1 row)


运行barman
-bash-4.2$ barman receive-wal --create-slot pga    创建slot
-bash-4.2$ barman cron         启用wal archiving,streaming archiver for 待备份的PG服务器
-bash-4.2$ barman check pga   验证远程服务器pga的各种条件

barman安装错误汇总
-bash-4.2$ barman check pga
Server pga:
        WAL archive: FAILED (please make sure WAL shipping is setup)
        PostgreSQL: OK
        superuser or standard user with backup privileges: OK
        PostgreSQL streaming: OK
        wal_level: OK
        replication slot: OK
        directories: OK
        retention policy settings: OK
        backup maximum age: OK (no last_backup_maximum_age provided)
        compression settings: OK
        failed backups: OK (there are 0 failed backups)
        minimum redundancy requirements: OK (have 0 backups, expected at least 0)
        pg_basebackup: OK
        pg_basebackup compatible: OK
        pg_basebackup supports tablespaces mapping: OK
        systemid coherence: OK (no system Id stored on disk)
        pg_receivexlog: OK
        pg_receivexlog compatible: OK
        receive-wal running: FAILED (See the Barman log file for more details)
        archiver errors: OK
碰到上述错误		
1 打开 wal archiving,streaming archiver for server pga
-bash-4.2$ barman cron
Starting WAL archiving for server pga
Starting streaming archiver for server pga
  

2 切换pga的wal file
-bash-4.2$ barman switch-wal --force --archive pga
The WAL file 000000010000000000000053 has been closed on server 'pga'
Waiting for the WAL file 000000010000000000000053 from server 'pga' (max: 30 seconds)
Processing xlog segments from streaming for pga
        000000010000000000000053
-bash-4.2$ barman check pga
Server pga:
        PostgreSQL: OK
        superuser or standard user with backup privileges: OK
        PostgreSQL streaming: OK
        wal_level: OK
        replication slot: OK
        directories: OK
        retention policy settings: OK
        backup maximum age: OK (no last_backup_maximum_age provided)
        compression settings: OK
        failed backups: OK (there are 0 failed backups)
        minimum redundancy requirements: OK (have 0 backups, expected at least 0)
        pg_basebackup: OK
        pg_basebackup compatible: OK
        pg_basebackup supports tablespaces mapping: OK
        systemid coherence: OK (no system Id stored on disk)
        pg_receivexlog: OK
        pg_receivexlog compatible: OK
        receive-wal running: OK
        archiver errors: OK
-bash-4.2$ barman replication-status pga
Status of streaming clients for server 'pga':
  Current LSN on master: 0/54000148
  Number of streaming clients: 1

  1. #1 Sync WAL streamer
     Application name: barman_receive_wal
     Sync stage      : 3/3 Remote write
     Communication   : TCP/IP
     IP Address      : 10.152.219.158 / Port: 53830 / Host: -
     User name       : streaming_barman
     Current state   : streaming (sync)
     Replication slot: barman
     WAL sender PID  : 1122
     Started at      : 2021-10-16 09:18:04.610226+00:00
     Sent LSN   : 0/54000148 (diff: 0 B)
     Write LSN  : 0/54000148 (diff: 0 B)
     Flush LSN  : 0/54000148 (diff: 0 B)
		
3 如果只是命令找不到路径，需要安装postgresql13-contrib包，并配置环境变量PATH
declare -x PATH="/usr/local/bin:/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/usr/pgsql-13/bin:/usr/pgsql-13/bin"

# 开始备份
-bash-4.2$ barman backup pga
Starting backup using postgres method for server pga in /var/lib/barman/pga/base/20211016T092814
Backup start at LSN: 0/54000148 (000000010000000000000054, 00000148)
Starting backup copy via pg_basebackup for 20211016T092814
Copy done (time: 18 seconds)
Finalising the backup.
This is the first backup for server pga
WAL segments preceding the current backup have been found:
        000000010000000000000053 from server pga has been removed
Backup size: 2.8 GiB
Backup end at LSN: 0/56000000 (000000010000000000000055, 00000000)
Backup completed (start time: 2021-10-16 09:28:14.274585, elapsed time: 18 seconds)
Processing xlog segments from streaming for pga
        000000010000000000000054
        000000010000000000000055

-bash-4.2$ barman list-backup pga
pga 20211016T092814 - Sat Oct 16 09:28:32 2021 - Size: 2.8 GiB - WAL Size: 0 B
target可以为data, wal, full, standalone
-bash-4.2$ barman list-files --target data pga 20211016T092814
/var/lib/barman/pga/base/20211016T092814/backup.info
/var/lib/barman/pga/base/20211016T092814/data/pg_hba.conf
/var/lib/barman/pga/base/20211016T092814/data/postgresql.auto.conf
/var/lib/barman/pga/base/20211016T092814/data/postgresql.conf
/var/lib/barman/pga/base/20211016T092814/data/backup_label
/var/lib/barman/pga/base/20211016T092814/data/pg_ident.conf
/var/lib/barman/pga/base/20211016T092814/data/backup_manifest
/var/lib/barman/pga/base/20211016T092814/data/current_logfiles
/var/lib/barman/pga/base/20211016T092814/data/PG_VERSION
/var/lib/barman/pga/base/20211016T092814/data/pg_xact/0000
/var/lib/barman/pga/base/20211016T092814/data/pg_logical/replorigin_checkpoint
/var/lib/barman/pga/base/20211016T092814/data/log/postgresql-Sat.log
/var/lib/barman/pga/base/20211016T092814/data/pg_archive/000000010000000000000014
/var/lib/barman/pga/base/20211016T092814/data/pg_archive/00000001000000000000000E
/var/lib/barman/pga/base/20211016T092814/data/pg_archive/000000010000000000000026
。。。
/var/lib/barman/pga/base/20211016T092814/data/base/14174/2679
/var/lib/barman/pga/base/20211016T092814/data/base/14174/2703
/var/lib/barman/pga/base/20211016T092814/data/base/14174/3456
/var/lib/barman/pga/base/20211016T092814/data/pg_multixact/offsets/0000
/var/lib/barman/pga/base/20211016T092814/data/pg_multixact/members/0000
-bash-4.2$ barman list-files --target wal pga 20211016T092814
/var/lib/barman/pga/wals/0000000100000000/000000010000000000000055

-bash-4.2$ barman show-backup pga 20211016T092814
Backup 20211016T092814:
  Server Name            : pga
  System Id              : 7019560887058907630
  Status                 : DONE
  PostgreSQL Version     : 130004
  PGDATA directory       : /var/lib/pgsql/13/data

  Base backup information:
    Disk usage           : 2.8 GiB (2.8 GiB with WALs)
    Incremental size     : 2.8 GiB (-0.00%)
    Timeline             : 1
    Begin WAL            : 000000010000000000000055
    End WAL              : 000000010000000000000055
    WAL number           : 1
    Begin time           : 2021-10-16 09:28:14+00:00
    End time             : 2021-10-16 09:28:32.392481+00:00
    Copy time            : 18 seconds
    Estimated throughput : 159.0 MiB/s
    Begin Offset         : 40
    End Offset           : 0
    Begin LSN           : 0/55000028
    End LSN             : 0/56000000

  WAL information:
    No of files          : 0
    Disk usage           : 0 B
    Last available       : 000000010000000000000055

  Catalog information:
    Retention Policy     : not enforced
    Previous Backup      : - (this is the oldest base backup)
    Next Backup          : - (this is the latest base backup)

错误  -bash-4.2$ barman backup pga
ERROR: reuse_backup option is not supported by postgres backup_method
resue_backup只能和rysnc配合       reuse_backup做增量备份	

恢复
模拟pga故障
pga上操作
postgres=# drop database pgbench;
DROP DATABASE
然后停掉PG服务

barman上操作
-bash-4.2$ barman recover --target-time="2021-10-18 05:17:05.751485+00:00" --remote-ssh-command "ssh postgres@pga" pga 20211018T051648 $PGDATA
Starting remote restore for server pga using backup 20211018T051648
Destination directory: /var/lib/pgsql/13/data
Remote command: ssh postgres@pga
Doing PITR. Recovery target time: '2021-10-18 05:17:05.751485+00:00'
Copying the base backup.
Copying required WAL segments.
Generating recovery configuration
Identify dangerous settings in destination directory.

IMPORTANT
These settings have been modified to prevent data losses

postgresql.conf line 238: archive_command = false

Recovery completed (start time: 2021-10-19 01:10:33.923761, elapsed time: 36 seconds)

Your PostgreSQL server has been successfully prepared for recovery!

pga上操作
[root@pga ~]# systemctl start postgresql-13
[root@pga ~]# su - postgres
Last login: Tue Oct 19 01:13:49 UTC 2021
-bash-4.2$ psql
psql (13.4)
Type "help" for help.

postgres=# \l
                             List of databases
   Name    |  Owner   | Encoding  | Collate | Ctype |   Access privileges
-----------+----------+-----------+---------+-------+-----------------------
 pgbench   | postgres | SQL_ASCII | C       | C     |
 postgres  | postgres | SQL_ASCII | C       | C     |
 template0 | postgres | SQL_ASCII | C       | C     | =c/postgres          +
           |          |           |         |       | postgres=CTc/postgres
 template1 | postgres | SQL_ASCII | C       | C     | =c/postgres          +
           |          |           |         |       | postgres=CTc/postgres
(4 rows)

postgres=# \c pgbench
You are now connected to database "pgbench" as user "postgres".
pgbench=# \d
              List of relations
 Schema |       Name       | Type  |  Owner
--------+------------------+-------+----------
 public | pgbench_accounts | table | postgres
 public | pgbench_branches | table | postgres
 public | pgbench_history  | table | postgres
 public | pgbench_tellers  | table | postgres

 -bash-4.2$ /usr/pgsql-13/bin/pg_controldata
pg_control version number:            1300
Catalog version number:               202007201
Database system identifier:           7019560887058907630
Database cluster state:               in archive recovery           #不是生产模式，需删除recovery.signal文件后重启PG，才能变为in production，这里有个问题
pg_control last modified:             Tue Oct 19 01:22:39 2021
Latest checkpoint location:           0/58000100
Latest checkpoint's REDO location:    0/580000C8
Latest checkpoint's REDO WAL file:    000000010000000000000058
Latest checkpoint's TimeLineID:       1
Latest checkpoint's PrevTimeLineID:   1
Latest checkpoint's full_page_writes: on
Latest checkpoint's NextXID:          0:504
Latest checkpoint's NextOID:          24579
Latest checkpoint's NextMultiXactId:  1
Latest checkpoint's NextMultiOffset:  0
Latest checkpoint's oldestXID:        479
Latest checkpoint's oldestXID's DB:   1
Latest checkpoint's oldestActiveXID:  504
Latest checkpoint's oldestMultiXid:   1
Latest checkpoint's oldestMulti's DB: 1
Latest checkpoint's oldestCommitTsXid:0
Latest checkpoint's newestCommitTsXid:0
Time of latest checkpoint:            Mon Oct 18 05:21:49 2021
Fake LSN counter for unlogged rels:   0/3E8
Minimum recovery ending location:     0/58000320

实际操作过程中，如果删除recovery.signal文件后重启PG，restore and recovery就白做了
-bash-4.2$ mv recovery.signal recovery.signal.bk
-bash-4.2$ logout
[root@pga ~]# systemctl restart postgresql-13
[root@pga ~]# su - postgres
Last login: Tue Oct 19 07:45:25 UTC 2021
-bash-4.2$ psql
psql (13.4)
Type "help" for help.

postgres=# \l
                             List of databases
   Name    |  Owner   | Encoding  | Collate | Ctype |   Access privileges
-----------+----------+-----------+---------+-------+-----------------------
 postgres  | postgres | SQL_ASCII | C       | C     |
 template0 | postgres | SQL_ASCII | C       | C     | =c/postgres          +
           |          |           |         |       | postgres=CTc/postgres
 template1 | postgres | SQL_ASCII | C       | C     | =c/postgres          +
           |          |           |         |       | postgres=CTc/postgres
(3 rows)

log:    barman恢复后重启postgresql  starting point-in-time recovery to 2021-10-18 05:17:05.751485+00
2021-10-19 07:45:21.138 UTC [15977] LOG:  starting PostgreSQL 13.4 on x86_64-pc-linux-gnu, compiled by gcc (GCC) 4.8.5 20150623 (Red Hat 4.8.5-44), 64-bit
2021-10-19 07:45:21.140 UTC [15977] LOG:  listening on IPv4 address "0.0.0.0", port 5432
2021-10-19 07:45:21.140 UTC [15977] LOG:  listening on IPv6 address "::", port 5432
2021-10-19 07:45:21.142 UTC [15977] LOG:  listening on Unix socket "/var/run/postgresql/.s.PGSQL.5432"
2021-10-19 07:45:21.147 UTC [15977] LOG:  listening on Unix socket "/tmp/.s.PGSQL.5432"
2021-10-19 07:45:21.159 UTC [15979] LOG:  database system was interrupted; last known up at 2021-10-18 05:16:49 UTC
2021-10-19 07:45:21.159 UTC [15979] LOG:  creating missing WAL directory "pg_wal/archive_status"
cp: cannot stat 'barman_wal/00000002.history': No such file or directory
2021-10-19 07:45:21.255 UTC [15979] LOG:  starting point-in-time recovery to 2021-10-18 05:17:05.751485+00
2021-10-19 07:45:21.291 UTC [15979] LOG:  restored log file "000000010000000000000057" from archive
2021-10-19 07:45:21.301 UTC [15979] LOG:  redo starts at 0/57000028
2021-10-19 07:45:21.303 UTC [15979] LOG:  consistent recovery state reached at 0/57000138
2021-10-19 07:45:21.306 UTC [15977] LOG:  database system is ready to accept read only connections
2021-10-19 07:45:21.341 UTC [15979] LOG:  restored log file "000000010000000000000058" from archive
2021-10-19 07:45:21.345 UTC [15979] LOG:  recovery stopping before commit of transaction 504, time 2021-10-19 01:01:37.105917+00
2021-10-19 07:45:21.345 UTC [15979] LOG:  pausing at the end of recovery
2021-10-19 07:45:21.345 UTC [15979] HINT:  Execute pg_wal_replay_resume() to promote.
.......下面的操作是删除recovery.signal文件后重启PG,database system was shut down in recovery at 2021-10-19 07:46:19 UTC
2021-10-19 07:46:19.387 UTC [15977] LOG:  received fast shutdown request
2021-10-19 07:46:19.389 UTC [15977] LOG:  aborting any active transactions
2021-10-19 07:46:19.395 UTC [15982] LOG:  shutting down
2021-10-19 07:46:19.447 UTC [15977] LOG:  database system is shut down
2021-10-19 07:46:19.571 UTC [16043] LOG:  starting PostgreSQL 13.4 on x86_64-pc-linux-gnu, compiled by gcc (GCC) 4.8.5 20150623 (Red Hat 4.8.5-44), 64-bit
2021-10-19 07:46:19.571 UTC [16043] LOG:  listening on IPv4 address "0.0.0.0", port 5432
2021-10-19 07:46:19.572 UTC [16043] LOG:  listening on IPv6 address "::", port 5432
2021-10-19 07:46:19.575 UTC [16043] LOG:  listening on Unix socket "/var/run/postgresql/.s.PGSQL.5432"
2021-10-19 07:46:19.579 UTC [16043] LOG:  listening on Unix socket "/tmp/.s.PGSQL.5432"
2021-10-19 07:46:19.589 UTC [16045] LOG:  database system was shut down in recovery at 2021-10-19 07:46:19 UTC
2021-10-19 07:46:19.591 UTC [16045] LOG:  database system was not properly shut down; automatic recovery in progress
2021-10-19 07:46:19.596 UTC [16045] LOG:  redo starts at 0/580000C8
2021-10-19 07:46:19.840 UTC [16045] LOG:  redo done at 0/58000AD8
2021-10-19 07:46:19.879 UTC [16043] LOG:  database system is ready to accept connections

正确做法是，不手动删除recovery.signal文件
在psql中执行
postgres=# select pg_wal_replay_resume();
 pg_wal_replay_resume
----------------------

(1 row)

postgres=# \l
                             List of databases
   Name    |  Owner   | Encoding  | Collate | Ctype |   Access privileges
-----------+----------+-----------+---------+-------+-----------------------
 pgbench   | postgres | SQL_ASCII | C       | C     |                                   #DB还在
 postgres  | postgres | SQL_ASCII | C       | C     |
 template0 | postgres | SQL_ASCII | C       | C     | =c/postgres          +
           |          |           |         |       | postgres=CTc/postgres
 template1 | postgres | SQL_ASCII | C       | C     | =c/postgres          +
           |          |           |         |       | postgres=CTc/postgres
(4 rows)

日志：
2021-10-19 08:49:27.947 UTC [16405] LOG:  selected new timeline ID: 2
2021-10-19 08:49:28.112 UTC [16405] LOG:  archive recovery complete
cp: cannot stat 'barman_wal/00000001.history': No such file or directory
2021-10-19 08:49:28.170 UTC [16403] LOG:  database system is ready to accept connections
-bash-4.2$ ls -lh
total 201K
-rw------- 1 postgres postgres 16M Oct 19 08:47 000000010000000000000058
-rw------- 1 postgres postgres  51 Oct 19 08:49 00000002.history
-rw------- 1 postgres postgres 16M Oct 19 08:49 000000020000000000000058       timelineid变成2
-rw------- 1 postgres postgres 16M Oct 19 08:47 000000020000000000000059
drwx------ 2 postgres postgres   4 Oct 19 08:49 archive_status

-bash-4.2$ cat pg_wal/00000002.history
1       0/58000320      before 2021-10-19 01:01:37.105917+00


# 恢复数据到另一台DB
另一台DB  pgb的前提条件
1 安装postgresql-13, rsync, openssh-server包
2 从barman服务器上的barman账号免密登录 ssh postgres@pgb
-bash-4.2$ barman recover --target-time="2021-10-18 05:17:05.751485+00:00" --remote-ssh-command "ssh postgres@pgb" pga 20211018T051648 $PGDATA
Starting remote restore for server pga using backup 20211018T051648
Destination directory: /var/lib/pgsql/13/data
Remote command: ssh postgres@pgb
Doing PITR. Recovery target time: '2021-10-18 05:17:05.751485+00:00'
Copying the base backup.
Copying required WAL segments.
Generating recovery configuration
Identify dangerous settings in destination directory.

IMPORTANT
These settings have been modified to prevent data losses

postgresql.conf line 238: archive_command = false

Recovery completed (start time: 2021-10-19 02:57:16.605443, elapsed time: 39 seconds)

Your PostgreSQL server has been successfully prepared for recovery!

pgb上检查
[root@pgb ~]# systemctl start postgresql-13
[root@pgb ~]# su - postgres
Last login: Tue Oct 19 02:53:16 UTC 2021
-bash-4.2$ psql
psql (13.4)
Type "help" for help.

postgres=# \l
                             List of databases
   Name    |  Owner   | Encoding  | Collate | Ctype |   Access privileges
-----------+----------+-----------+---------+-------+-----------------------
 pgbench   | postgres | SQL_ASCII | C       | C     |
 postgres  | postgres | SQL_ASCII | C       | C     |
 template0 | postgres | SQL_ASCII | C       | C     | =c/postgres          +
           |          |           |         |       | postgres=CTc/postgres
 template1 | postgres | SQL_ASCII | C       | C     | =c/postgres          +
           |          |           |         |       | postgres=CTc/postgres
(4 rows)

postgres=# \c pgbench
You are now connected to database "pgbench" as user "postgres".
pgbench=# \d
              List of relations
 Schema |       Name       | Type  |  Owner
--------+------------------+-------+----------
 public | pgbench_accounts | table | postgres
 public | pgbench_branches | table | postgres
 public | pgbench_history  | table | postgres
 public | pgbench_tellers  | table | postgres
(4 rows)

pgbench=# select * from pgbench_accounts limit 2;
 aid | bid | abalance |                                        filler
-----+-----+----------+--------------------------------------------------------------------------------------
   1 |   1 |        0 |
   2 |   1 |        0 |
(2 rows)

-bash-4.2$ /usr/pgsql-13/bin/pg_controldata
pg_control version number:            1300
Catalog version number:               202007201
Database system identifier:           7019560887058907630
Database cluster state:               in archive recovery      不是生产模式
pg_control last modified:             Tue Oct 19 02:58:58 2021
Latest checkpoint location:           0/57000060
Latest checkpoint's REDO location:    0/57000028
Latest checkpoint's REDO WAL file:    000000010000000000000057
Latest checkpoint's TimeLineID:       1
Latest checkpoint's PrevTimeLineID:   1
Latest checkpoint's full_page_writes: on
Latest checkpoint's NextXID:          0:504
Latest checkpoint's NextOID:          24579
Latest checkpoint's NextMultiXactId:  1
Latest checkpoint's NextMultiOffset:  0
Latest checkpoint's oldestXID:        479
Latest checkpoint's oldestXID's DB:   1
Latest checkpoint's oldestActiveXID:  504
Latest checkpoint's oldestMultiXid:   1
Latest checkpoint's oldestMulti's DB: 1
Latest checkpoint's oldestCommitTsXid:0
Latest checkpoint's newestCommitTsXid:0
Time of latest checkpoint:            Mon Oct 18 05:16:49 2021
Fake LSN counter for unlogged rels:   0/3E8
Minimum recovery ending location:     0/57000138

-bash-4.2$ cat postgresql.auto.conf
# Do not edit this file manually!
# It will be overwritten by the ALTER SYSTEM command.
restore_command = 'cp barman_wal/%f %p'
recovery_end_command = 'rm -fr barman_wal'
recovery_target_time = '2021-10-18 05:17:05.751485+00:00'

如果要变成生产模式，直接  select pg_wal_replay_resume();

#后续。。。
pga在恢复后继续做barman backup会出错
需要以下几步
重新创建slot
-bash-4.2$ barman receive-wal --create-slot pga
重建partial文件
-bash-4.2$ barman receive-wal --reset pga
Resetting receive-wal directory status
Removing status file /var/lib/barman/pga/streaming/000000010000000000000059.partial
Creating status file /var/lib/barman/pga/streaming/000000020000000000000059.partial
重新运行barman cron
-bash-4.2$ barman cron
Starting WAL archiving for server pga
Starting streaming archiver for server pga
-bash-4.2$ barman check pga
Server pga:
        PostgreSQL: OK
        superuser or standard user with backup privileges: OK
        PostgreSQL streaming: OK
        wal_level: OK
        replication slot: OK
        directories: OK
        retention policy settings: OK
        backup maximum age: OK (no last_backup_maximum_age provided)
        compression settings: OK
        failed backups: OK (there are 0 failed backups)
        minimum redundancy requirements: OK (have 2 backups, expected at least 0)
        pg_basebackup: OK
        pg_basebackup compatible: OK
        pg_basebackup supports tablespaces mapping: OK
        systemid coherence: OK
        pg_receivexlog: OK
        pg_receivexlog compatible: OK
        receive-wal running: OK
        archiver errors: OK
继续做barman backup会hang住
-bash-4.2$ barman backup pga
Starting backup using postgres method for server pga in /var/lib/barman/pga/base/20211020T065732
Backup start at LSN: 0/590001D8 (000000020000000000000059, 000001D8)
Starting backup copy via pg_basebackup for 20211020T065732



^CERROR: Backup failed copying files.
DETAILS: KeyboardInterrupt

原因是：did recovery after the first backup operation. Then Barman set a string #BARMAN# ahead archive_command = 'barman-wal-archive backup pg %p' command into the postgresql.conf file
删除#BARMAN#，改成
archive_command = 'cp %p /var/lib/pgsql/13/data/pg_archive/%f'          # command to use to archive a logfile segment
#archive_command = false

然后重启PG，重新做barman backup
-bash-4.2$ barman backup pga
Starting backup using postgres method for server pga in /var/lib/barman/pga/base/20211020T092328
Backup start at LSN: 0/CF0000D8 (0000000200000000000000CF, 000000D8)
Starting backup copy via pg_basebackup for 20211020T092328
Copy done (time: 36 seconds)
Finalising the backup.
Backup size: 6.0 GiB
Backup end at LSN: 0/D1000060 (0000000200000000000000D1, 00000060)
Backup completed (start time: 2021-10-20 09:23:28.928455, elapsed time: 36 seconds)
Processing xlog segments from streaming for pga
        0000000200000000000000D0
        0000000200000000000000D1
		
-bash-4.2$ barman list-backup pga
pga 20211020T092328 - Wed Oct 20 09:24:05 2021 - Size: 6.0 GiB - WAL Size: 0 B
pga 20211020T091708 - FAILED
pga 20211020T071448 - FAILED
pga 20211020T065732 - FAILED
pga 20211018T051648 - Mon Oct 18 05:17:05 2021 - Size: 2.9 GiB - WAL Size: 16.0 MiB
pga 20211016T092814 - Sat Oct 16 09:28:32 2021 - Size: 2.8 GiB - WAL Size: 32.0 MiB
-bash-4.2$ barman status pga
Server pga:
        Description: Example of PostgreSQL Database (Streaming-Only)
        Active: True
        Disabled: False
        PostgreSQL version: 13.4
        Cluster state: in production
        pgespresso extension: Not available
        Current data size: 2.7 GiB
        PostgreSQL Data directory: /var/lib/pgsql/13/data
        Current WAL segment: 0000000200000000000000D2
        Passive node: False
        Retention policies: enforced (mode: auto, retention: REDUNDANCY 3, WAL retention: MAIN)
        No. of available backups: 3
        First available backup: 20211016T092814
        Last available backup: 20211020T092328
        Minimum redundancy requirements: satisfied (3/0)
再备份一次，测试retention policy		
-bash-4.2$ barman backup pga
Starting backup using postgres method for server pga in /var/lib/barman/pga/base/20211020T092717
Backup start at LSN: 0/D21E95F0 (0000000200000000000000D2, 001E95F0)
Starting backup copy via pg_basebackup for 20211020T092717
Copy done (time: 38 seconds)
Finalising the backup.
Backup size: 6.0 GiB
Backup end at LSN: 0/D4000000 (0000000200000000000000D3, 00000000)
Backup completed (start time: 2021-10-20 09:27:17.449045, elapsed time: 38 seconds)
Processing xlog segments from streaming for pga
        0000000200000000000000D2
        0000000200000000000000D3
根据retention policy,最旧的backup  pga 20211016T092814	被删除	
-bash-4.2$ barman list-backup pga
pga 20211020T092717 - Wed Oct 20 09:27:55 2021 - Size: 6.0 GiB - WAL Size: 0 B
pga 20211020T092328 - Wed Oct 20 09:24:05 2021 - Size: 6.0 GiB - WAL Size: 32.0 MiB
pga 20211020T091708 - FAILED
pga 20211020T071448 - FAILED
pga 20211020T065732 - FAILED
pga 20211018T051648 - Mon Oct 18 05:17:05 2021 - Size: 2.9 GiB - WAL Size: 16.0 MiB



The archive_command is the traditional method to archive WAL files.

The value of this PostgreSQL configuration parameter must be a shell command to be executed by the PostgreSQL server 
to copy the WAL files to the Barman incoming directory.
-bash-4.2$ ps -ef |grep bar
postgres  3003  2953  0 08:37 ?        00:00:03 postgres: walsender streaming_barman 10.152.219.158(40616) streaming 0/57000000
incoming目录是archive_command 发过来的日志, wals目录是 pg_receivwal发过来的streaming日志
-bash-4.2$ du -sh incoming/ wals
133M    incoming/
133M    wals

######### pgloader
迁移 sqlite 到 PG
-bash-4.2$ cat inv
load database
  from sqlite:///var/lib/pgsql/inv.db
  into postgresql:///inv

with include drop,create tables,create indexes,reset sequences

  set work_mem to '16MB',maintenance_work_mem to '512MB';


-bash-4.2$ pgloader --verbose inv
2021-11-04T06:12:23.044000Z NOTICE Starting pgloader, log system is ready.
2021-11-04T06:12:23.113000Z LOG pgloader version "3.6.2"
2021-11-04T06:12:23.267000Z LOG Migrating from #<SQLITE-CONNECTION sqlite:///var/lib/pgsql/inv.db {1006667FF3}>
2021-11-04T06:12:23.268000Z LOG Migrating into #<PGSQL-CONNECTION pgsql://postgres@UNIX:5432/inv {10066687C3}>
2021-11-04T06:12:23.506000Z NOTICE Prepare PostgreSQL database.
2021-11-04T06:12:23.864000Z NOTICE COPY server
2021-11-04T06:12:23.969000Z NOTICE DONE copying server
2021-11-04T06:12:24.023000Z NOTICE CREATE UNIQUE INDEX idx_24591_sqlite_autoindex_server_1 ON server (id);
2021-11-04T06:12:24.097000Z NOTICE Completing PostgreSQL database.
2021-11-04T06:12:24.097000Z NOTICE Reset sequences
2021-11-04T06:12:24.226000Z NOTICE ALTER TABLE server ADD PRIMARY KEY USING INDEX idx_24591_sqlite_autoindex_server_1;
2021-11-04T06:12:24.253000Z LOG report summary reset
             table name     errors       read   imported      bytes      total time       read      write
-----------------------  ---------  ---------  ---------  ---------  --------------  ---------  ---------
                  fetch          0          0          0                     0.001s
        fetch meta data          0          2          2                     0.176s
         Create Schemas          0          0          0                     0.002s
       Create SQL Types          0          0          0                     0.028s
          Create tables          0          2          2                     0.083s
         Set Table OIDs          0          1          1                     0.036s
-----------------------  ---------  ---------  ---------  ---------  --------------  ---------  ---------
                 server          0         43         43     0.9 kB          0.105s     0.018s     0.001s
-----------------------  ---------  ---------  ---------  ---------  --------------  ---------  ---------
COPY Threads Completion          0          4          4                     0.110s
 Index Build Completion          0          1          1                     0.059s
         Create Indexes          0          1          1                     0.008s
        Reset Sequences          0          0          0                     0.078s
           Primary Keys          0          1          1                     0.009s
    Create Foreign Keys          0          0          0                     0.000s
        Create Triggers          0          0          0                     0.001s
       Install Comments          0          0          0                     0.000s
-----------------------  ---------  ---------  ---------  ---------  --------------  ---------  ---------
      Total import time          ?         43         43     0.9 kB          0.265s
	  
迁移 sqlite 到 PG  primary.sqlite
-bash-4.2$ cat primary
load database
  from sqlite:///var/lib/pgsql/primary.sqlite
  into postgresql:///yum

with include drop,create tables,create indexes,reset sequences


set work_mem to '16MB',maintenance_work_mem to '512MB';
	  
-bash-4.2$ pgloader primary
2021-11-04T08:35:45.117000Z LOG pgloader version "3.6.2"
2021-11-04T08:35:45.280000Z LOG Migrating from #<SQLITE-CONNECTION sqlite:///var/lib/pgsql/primary.sqlite {10065D0723}>
2021-11-04T08:35:45.282000Z LOG Migrating into #<PGSQL-CONNECTION pgsql://postgres@UNIX:5432/yum {10065D0EF3}>
2021-11-04T08:35:49.272000Z LOG report summary reset
             table name     errors       rows      bytes      total time
-----------------------  ---------  ---------  ---------  --------------
                  fetch          0          0                     0.000s
        fetch meta data          0         26                     0.079s
         Create Schemas          0          0                     0.002s
       Create SQL Types          0          0                     0.010s
          Create tables          0         22                     0.107s
         Set Table OIDs          0         11                     0.016s
-----------------------  ---------  ---------  ---------  --------------
                db_info          0          1     0.1 kB          0.137s
               packages          0       2024     1.2 MB          0.676s
                  files          0       5973   197.8 kB          0.244s
               provides          0     203386    10.0 MB          2.745s
               requires          0      24485     1.1 MB          0.814s
              conflicts          0        309     9.5 kB          0.475s
               suggests          0         19     0.6 kB          0.525s
             recommends          0        119     3.8 kB          0.598s
              obsoletes          0        603    19.7 kB          0.023s
               enhances          0          1     0.0 kB          0.010s
            supplements          0        198    14.0 kB          0.056s
-----------------------  ---------  ---------  ---------  --------------
COPY Threads Completion          0          4                     2.797s
         Create Indexes          0         15                     1.284s
 Index Build Completion          0         15                     0.640s
        Reset Sequences          0          0                     0.080s
           Primary Keys          0          1                     0.008s
    Create Foreign Keys          0          0                     0.000s
        Create Triggers          0          0                     0.001s
       Install Comments          0          0                     0.000s
-----------------------  ---------  ---------  ---------  --------------
      Total import time          ?     237118    12.5 MB          4.810s
迁移zabbix_proxy.sqlite时，double precision死活过不去，type里面含空格，貌似bug	
-bash-4.2$ cat zabbix
load database
  from sqlite:///var/lib/pgsql/zproxy.sqlite
  into postgresql:///zabbix

with include drop,create tables,create indexes,reset sequences

cast type "double precision" to float8 using float-to-string

set work_mem to '16MB',maintenance_work_mem to '512MB';

## to mysql
-bash-4.2$ pgloader --verbose mysql://test:Test_123456789@10.67.48.209/snipeit postgresql:///snipeit
2021-11-05T01:22:58.066000Z NOTICE Starting pgloader, log system is ready.
2021-11-05T01:22:58.121000Z LOG pgloader version "3.6.2"
2021-11-05T01:22:58.393000Z LOG Migrating from #<MYSQL-CONNECTION mysql://test@10.67.48.209:3306/snipeit {1005A2C963}>
2021-11-05T01:22:58.394000Z LOG Migrating into #<PGSQL-CONNECTION pgsql://postgres@UNIX:5432/snipeit {1005C76AE3}>
2021-11-05T01:23:01.254000Z NOTICE Prepare PostgreSQL database.
2021-11-05T01:23:01.595000Z NOTICE COPY snipeit.accessories
2021-11-05T01:23:01.610000Z NOTICE COPY snipeit.accessories_users
2021-11-05T01:23:01.614000Z NOTICE COPY snipeit.action_logs
2021-11-05T01:23:01.628000Z NOTICE COPY snipeit.assets
2021-11-05T01:23:01.628000Z NOTICE COPY snipeit.asset_logs
2021-11-05T01:23:01.628000Z NOTICE COPY snipeit.asset_maintenances
2021-11-05T01:23:01.628000Z NOTICE COPY snipeit.asset_uploads
2021-11-05T01:23:01.628000Z NOTICE COPY snipeit.categories
2021-11-05T01:23:01.628000Z NOTICE COPY snipeit.checkout_requests
2021-11-05T01:23:01.628000Z NOTICE COPY snipeit.companies
2021-11-05T01:23:01.629000Z NOTICE COPY snipeit.components
2021-11-05T01:23:01.629000Z NOTICE COPY snipeit.components_assets
2021-11-05T01:23:01.629000Z NOTICE COPY snipeit.consumables
2021-11-05T01:23:01.629000Z NOTICE COPY snipeit.consumables_users
2021-11-05T01:23:01.629000Z NOTICE COPY snipeit.custom_fields
2021-11-05T01:23:01.629000Z NOTICE COPY snipeit.custom_fieldsets
2021-11-05T01:23:01.629000Z NOTICE COPY snipeit.custom_field_custom_fieldset
2021-11-05T01:23:01.629000Z NOTICE COPY snipeit.departments
2021-11-05T01:23:01.629000Z NOTICE COPY snipeit.depreciations
2021-11-05T01:23:01.629000Z NOTICE COPY snipeit.groups
2021-11-05T01:23:01.629000Z NOTICE COPY snipeit.imports
2021-11-05T01:23:01.630000Z NOTICE COPY snipeit.licenses
2021-11-05T01:23:01.630000Z NOTICE COPY snipeit.license_seats
2021-11-05T01:23:01.630000Z NOTICE COPY snipeit.locations
2021-11-05T01:23:01.630000Z NOTICE COPY snipeit.login_attempts
2021-11-05T01:23:01.630000Z NOTICE COPY snipeit.manufacturers
2021-11-05T01:23:01.630000Z NOTICE COPY snipeit.migrations
2021-11-05T01:23:01.630000Z NOTICE COPY snipeit.models
2021-11-05T01:23:01.630000Z NOTICE COPY snipeit.models_custom_fields
2021-11-05T01:23:01.630000Z NOTICE COPY snipeit.oauth_access_tokens
2021-11-05T01:23:01.630000Z NOTICE COPY snipeit.oauth_auth_codes
2021-11-05T01:23:01.636000Z NOTICE COPY snipeit.oauth_clients
2021-11-05T01:23:01.636000Z NOTICE COPY snipeit.oauth_personal_access_clients
2021-11-05T01:23:01.637000Z NOTICE COPY snipeit.oauth_refresh_tokens
2021-11-05T01:23:01.637000Z NOTICE COPY snipeit.password_resets
2021-11-05T01:23:01.638000Z NOTICE COPY snipeit.permission_groups
2021-11-05T01:23:01.639000Z NOTICE COPY snipeit.requested_assets
2021-11-05T01:23:01.639000Z NOTICE COPY snipeit.requests
2021-11-05T01:23:01.640000Z NOTICE COPY snipeit.settings
2021-11-05T01:23:01.640000Z NOTICE COPY snipeit.status_labels
2021-11-05T01:23:01.641000Z NOTICE COPY snipeit.suppliers
2021-11-05T01:23:01.641000Z NOTICE COPY snipeit.throttle
2021-11-05T01:23:01.648000Z NOTICE COPY snipeit.users
2021-11-05T01:23:01.649000Z NOTICE COPY snipeit.users_groups
2021-11-05T01:23:01.699000Z NOTICE DONE copying snipeit.accessories_users
2021-11-05T01:23:01.703000Z NOTICE DONE copying snipeit.accessories
2021-11-05T01:23:01.748000Z NOTICE CREATE UNIQUE INDEX idx_25242_primary ON snipeit.accessories (id);
2021-11-05T01:23:01.791000Z NOTICE CREATE UNIQUE INDEX idx_25250_primary ON snipeit.accessories_users (id);
2021-11-05T01:23:01.825000Z NOTICE DONE copying snipeit.action_logs
2021-11-05T01:23:01.870000Z NOTICE DONE copying snipeit.assets
2021-11-05T01:23:01.895000Z NOTICE DONE copying snipeit.asset_logs
2021-11-05T01:23:01.900000Z NOTICE CREATE INDEX idx_25265_assets_deleted_at_location_id_index ON snipeit.assets (deleted_at, location_id);
2021-11-05T01:23:01.912000Z NOTICE DONE copying snipeit.categories
2021-11-05T01:23:01.929000Z NOTICE DONE copying snipeit.checkout_requests
2021-11-05T01:23:01.944000Z NOTICE CREATE INDEX idx_25265_assets_deleted_at_rtd_location_id_index ON snipeit.assets (deleted_at, rtd_location_id);
2021-11-05T01:23:01.962000Z NOTICE DONE copying snipeit.companies
2021-11-05T01:23:01.977000Z NOTICE DONE copying snipeit.components
2021-11-05T01:23:01.981000Z NOTICE CREATE INDEX idx_25256_action_logs_target_id_target_type_index ON snipeit.action_logs (target_id, target_type);
2021-11-05T01:23:01.998000Z NOTICE CREATE UNIQUE INDEX idx_25324_primary ON snipeit.companies (id);
2021-11-05T01:23:02.014000Z NOTICE DONE copying snipeit.components_assets
2021-11-05T01:23:02.018000Z NOTICE CREATE INDEX idx_25265_assets_deleted_at_model_id_index ON snipeit.assets (deleted_at, model_id);
2021-11-05T01:23:02.044000Z NOTICE DONE copying snipeit.consumables
2021-11-05T01:23:02.060000Z NOTICE CREATE INDEX idx_25265_assets_deleted_at_status_id_index ON snipeit.assets (deleted_at, status_id);
2021-11-05T01:23:02.063000Z NOTICE CREATE INDEX idx_25256_action_logs_item_type_item_id_action_type_index ON snipeit.action_logs (item_type, item_id, action_type);
2021-11-05T01:23:02.065000Z NOTICE CREATE UNIQUE INDEX idx_25256_primary ON snipeit.action_logs (id);
2021-11-05T01:23:02.078000Z NOTICE CREATE INDEX idx_25256_action_logs_target_type_target_id_action_type_index ON snipeit.action_logs (target_type, target_id, action_type);
2021-11-05T01:23:02.095000Z NOTICE DONE copying snipeit.consumables_users
2021-11-05T01:23:02.101000Z NOTICE CREATE INDEX idx_25256_action_logs_thread_id_index ON snipeit.action_logs (thread_id);
2021-11-05T01:23:02.115000Z NOTICE CREATE UNIQUE INDEX idx_25344_primary ON snipeit.consumables (id);
2021-11-05T01:23:02.115000Z NOTICE CREATE UNIQUE INDEX idx_25330_primary ON snipeit.components (id);
2021-11-05T01:23:02.124000Z NOTICE CREATE INDEX idx_25256_action_logs_created_at_index ON snipeit.action_logs (created_at);
2021-11-05T01:23:02.125000Z NOTICE DONE copying snipeit.custom_fields
2021-11-05T01:23:02.133000Z NOTICE DONE copying snipeit.asset_maintenances
2021-11-05T01:23:02.159000Z NOTICE CREATE UNIQUE INDEX idx_25324_companies_name_unique ON snipeit.companies (name);
2021-11-05T01:23:02.170000Z NOTICE CREATE INDEX idx_25265_assets_deleted_at_name_index ON snipeit.assets (deleted_at, name);
2021-11-05T01:23:02.171000Z NOTICE CREATE INDEX idx_25265_assets_assigned_type_assigned_to_index ON snipeit.assets (assigned_type, assigned_to);
2021-11-05T01:23:02.172000Z NOTICE DONE copying snipeit.asset_uploads
2021-11-05T01:23:02.176000Z NOTICE CREATE INDEX idx_25265_assets_deleted_at_asset_tag_index ON snipeit.assets (deleted_at, asset_tag);
2021-11-05T01:23:02.177000Z NOTICE CREATE INDEX idx_25265_assets_deleted_at_supplier_id_index ON snipeit.assets (deleted_at, supplier_id);
2021-11-05T01:23:02.190000Z NOTICE CREATE INDEX idx_25265_assets_deleted_at_assigned_type_assigned_to_index ON snipeit.assets (deleted_at, assigned_type, assigned_to);
2021-11-05T01:23:02.193000Z NOTICE CREATE UNIQUE INDEX idx_25317_primary ON snipeit.checkout_requests (id);
2021-11-05T01:23:02.219000Z NOTICE CREATE INDEX idx_25265_assets_rtd_location_id_index ON snipeit.assets (rtd_location_id);
2021-11-05T01:23:02.228000Z NOTICE DONE copying snipeit.departments
2021-11-05T01:23:02.229000Z NOTICE CREATE INDEX idx_25317_checkout_requests_user_id_requestable_id_requestable_type ON snipeit.checkout_requests (user_id, requestable_id, requestable_type);
2021-11-05T01:23:02.230000Z WARNING PostgreSQL warning: identifier "idx_25317_checkout_requests_user_id_requestable_id_requestable_type" will be truncated to "idx_25317_checkout_requests_user_id_requestable_id_requestable_"
2021-11-05T01:23:02.239000Z NOTICE DONE copying snipeit.custom_field_custom_fieldset
2021-11-05T01:23:02.248000Z NOTICE CREATE UNIQUE INDEX idx_25337_primary ON snipeit.components_assets (id);
2021-11-05T01:23:02.252000Z NOTICE DONE copying snipeit.custom_fieldsets
2021-11-05T01:23:02.261000Z NOTICE CREATE UNIQUE INDEX idx_25265_primary ON snipeit.assets (id);
2021-11-05T01:23:02.267000Z NOTICE CREATE INDEX idx_25265_assets_created_at_index ON snipeit.assets (created_at);
2021-11-05T01:23:02.275000Z NOTICE CREATE UNIQUE INDEX idx_25280_primary ON snipeit.asset_logs (id);
2021-11-05T01:23:02.276000Z NOTICE CREATE UNIQUE INDEX idx_25358_primary ON snipeit.custom_fields (id);
2021-11-05T01:23:02.279000Z NOTICE CREATE UNIQUE INDEX idx_25304_primary ON snipeit.categories (id);
2021-11-05T01:23:02.294000Z NOTICE CREATE UNIQUE INDEX idx_25298_primary ON snipeit.asset_uploads (id);
2021-11-05T01:23:02.300000Z NOTICE DONE copying snipeit.depreciations
2021-11-05T01:23:02.306000Z NOTICE CREATE UNIQUE INDEX idx_25369_primary ON snipeit.custom_fieldsets (id);
2021-11-05T01:23:02.308000Z NOTICE CREATE UNIQUE INDEX idx_25352_primary ON snipeit.consumables_users (id);
2021-11-05T01:23:02.309000Z NOTICE CREATE UNIQUE INDEX idx_25378_primary ON snipeit.departments (id);
2021-11-05T01:23:02.311000Z NOTICE DONE copying snipeit.imports
2021-11-05T01:23:02.314000Z NOTICE DONE copying snipeit.groups
2021-11-05T01:23:02.325000Z NOTICE CREATE UNIQUE INDEX idx_25289_primary ON snipeit.asset_maintenances (id);
2021-11-05T01:23:02.327000Z NOTICE DONE copying snipeit.licenses
2021-11-05T01:23:02.344000Z NOTICE CREATE UNIQUE INDEX idx_25384_primary ON snipeit.depreciations (id);
2021-11-05T01:23:02.361000Z NOTICE DONE copying snipeit.locations
2021-11-05T01:23:02.369000Z NOTICE DONE copying snipeit.login_attempts
2021-11-05T01:23:02.376000Z NOTICE DONE copying snipeit.license_seats
2021-11-05T01:23:02.381000Z NOTICE CREATE UNIQUE INDEX idx_25399_primary ON snipeit.imports (id);
2021-11-05T01:23:02.382000Z NOTICE CREATE UNIQUE INDEX idx_25390_primary ON snipeit.groups (id);
2021-11-05T01:23:02.402000Z NOTICE DONE copying snipeit.manufacturers
2021-11-05T01:23:02.404000Z NOTICE CREATE UNIQUE INDEX idx_25408_primary ON snipeit.licenses (id);
2021-11-05T01:23:02.423000Z NOTICE DONE copying snipeit.models_custom_fields
2021-11-05T01:23:02.429000Z NOTICE CREATE UNIQUE INDEX idx_25428_primary ON snipeit.locations (id);
2021-11-05T01:23:02.437000Z NOTICE CREATE UNIQUE INDEX idx_25434_primary ON snipeit.login_attempts (id);
2021-11-05T01:23:02.437000Z NOTICE CREATE UNIQUE INDEX idx_25419_primary ON snipeit.license_seats (id);
2021-11-05T01:23:02.438000Z NOTICE CREATE UNIQUE INDEX idx_25440_primary ON snipeit.manufacturers (id);
2021-11-05T01:23:02.448000Z NOTICE DONE copying snipeit.oauth_access_tokens
2021-11-05T01:23:02.459000Z NOTICE DONE copying snipeit.models
2021-11-05T01:23:02.472000Z NOTICE CREATE UNIQUE INDEX idx_25463_primary ON snipeit.models_custom_fields (id);
2021-11-05T01:23:02.480000Z NOTICE DONE copying snipeit.migrations
2021-11-05T01:23:02.481000Z NOTICE CREATE INDEX idx_25470_oauth_access_tokens_user_id_index ON snipeit.oauth_access_tokens (user_id);
2021-11-05T01:23:02.481000Z NOTICE DONE copying snipeit.oauth_auth_codes
2021-11-05T01:23:02.495000Z NOTICE CREATE UNIQUE INDEX idx_25452_primary ON snipeit.models (id);
2021-11-05T01:23:02.500000Z NOTICE DONE copying snipeit.oauth_clients
2021-11-05T01:23:02.520000Z NOTICE DONE copying snipeit.oauth_refresh_tokens
2021-11-05T01:23:02.521000Z NOTICE CREATE UNIQUE INDEX idx_25470_primary ON snipeit.oauth_access_tokens (id);
2021-11-05T01:23:02.526000Z NOTICE DONE copying snipeit.password_resets
2021-11-05T01:23:02.549000Z NOTICE CREATE UNIQUE INDEX idx_25484_primary ON snipeit.oauth_clients (id);
2021-11-05T01:23:02.550000Z NOTICE CREATE UNIQUE INDEX idx_25446_primary ON snipeit.migrations (id);
2021-11-05T01:23:02.562000Z NOTICE CREATE UNIQUE INDEX idx_25476_primary ON snipeit.oauth_auth_codes (id);
2021-11-05T01:23:02.570000Z NOTICE CREATE INDEX idx_25497_oauth_refresh_tokens_access_token_id_index ON snipeit.oauth_refresh_tokens (access_token_id);
2021-11-05T01:23:02.571000Z NOTICE DONE copying snipeit.permission_groups
2021-11-05T01:23:02.580000Z NOTICE CREATE UNIQUE INDEX idx_25497_primary ON snipeit.oauth_refresh_tokens (id);
2021-11-05T01:23:02.581000Z NOTICE CREATE INDEX idx_25500_password_resets_token_index ON snipeit.password_resets (token);
2021-11-05T01:23:02.582000Z NOTICE DONE copying snipeit.requests
2021-11-05T01:23:02.591000Z NOTICE DONE copying snipeit.oauth_personal_access_clients
2021-11-05T01:23:02.605000Z NOTICE DONE copying snipeit.requested_assets
2021-11-05T01:23:02.611000Z NOTICE CREATE INDEX idx_25484_oauth_clients_user_id_index ON snipeit.oauth_clients (user_id);
2021-11-05T01:23:02.615000Z NOTICE CREATE INDEX idx_25500_password_resets_email_index ON snipeit.password_resets (email);
2021-11-05T01:23:02.632000Z NOTICE CREATE UNIQUE INDEX idx_25505_primary ON snipeit.permission_groups (id);
2021-11-05T01:23:02.633000Z NOTICE CREATE UNIQUE INDEX idx_25493_primary ON snipeit.oauth_personal_access_clients (id);
2021-11-05T01:23:02.646000Z NOTICE DONE copying snipeit.status_labels
2021-11-05T01:23:02.658000Z NOTICE CREATE UNIQUE INDEX idx_25514_primary ON snipeit.requested_assets (id);
2021-11-05T01:23:02.661000Z NOTICE CREATE INDEX idx_25493_oauth_personal_access_clients_client_id_index ON snipeit.oauth_personal_access_clients (client_id);
2021-11-05T01:23:02.662000Z NOTICE DONE copying snipeit.throttle
2021-11-05T01:23:02.667000Z NOTICE DONE copying snipeit.suppliers
2021-11-05T01:23:02.679000Z NOTICE CREATE UNIQUE INDEX idx_25520_primary ON snipeit.requests (id);
2021-11-05T01:23:02.701000Z NOTICE DONE copying snipeit.settings
2021-11-05T01:23:02.719000Z NOTICE CREATE UNIQUE INDEX idx_25614_primary ON snipeit.suppliers (id);
2021-11-05T01:23:02.721000Z NOTICE CREATE UNIQUE INDEX idx_25620_primary ON snipeit.throttle (id);
2021-11-05T01:23:02.724000Z NOTICE CREATE UNIQUE INDEX idx_25600_primary ON snipeit.status_labels (id);
2021-11-05T01:23:02.745000Z NOTICE DONE copying snipeit.users_groups
2021-11-05T01:23:02.749000Z NOTICE CREATE UNIQUE INDEX idx_25529_primary ON snipeit.settings (id);
2021-11-05T01:23:02.753000Z NOTICE CREATE INDEX idx_25620_throttle_user_id_index ON snipeit.throttle (user_id);
2021-11-05T01:23:02.760000Z NOTICE DONE copying snipeit.users
2021-11-05T01:23:02.785000Z NOTICE CREATE UNIQUE INDEX idx_25642_primary ON snipeit.users_groups (user_id, group_id);
2021-11-05T01:23:02.786000Z NOTICE CREATE UNIQUE INDEX idx_25629_primary ON snipeit.users (id);
2021-11-05T01:23:02.792000Z NOTICE CREATE INDEX idx_25629_users_activation_code_index ON snipeit.users (activation_code);
2021-11-05T01:23:02.793000Z NOTICE CREATE INDEX idx_25629_users_reset_password_code_index ON snipeit.users (reset_password_code);
2021-11-05T01:23:02.823000Z NOTICE Completing PostgreSQL database.
2021-11-05T01:23:02.823000Z NOTICE Reset sequences
2021-11-05T01:23:03.005000Z NOTICE ALTER TABLE snipeit.accessories_users ADD PRIMARY KEY USING INDEX idx_25250_primary;
2021-11-05T01:23:03.011000Z NOTICE ALTER TABLE snipeit.accessories ADD PRIMARY KEY USING INDEX idx_25242_primary;
2021-11-05T01:23:03.013000Z NOTICE ALTER TABLE snipeit.action_logs ADD PRIMARY KEY USING INDEX idx_25256_primary;
2021-11-05T01:23:03.015000Z NOTICE ALTER TABLE snipeit.assets ADD PRIMARY KEY USING INDEX idx_25265_primary;
2021-11-05T01:23:03.018000Z NOTICE ALTER TABLE snipeit.asset_logs ADD PRIMARY KEY USING INDEX idx_25280_primary;
2021-11-05T01:23:03.020000Z NOTICE ALTER TABLE snipeit.categories ADD PRIMARY KEY USING INDEX idx_25304_primary;
2021-11-05T01:23:03.022000Z NOTICE ALTER TABLE snipeit.checkout_requests ADD PRIMARY KEY USING INDEX idx_25317_primary;
2021-11-05T01:23:03.024000Z NOTICE ALTER TABLE snipeit.companies ADD PRIMARY KEY USING INDEX idx_25324_primary;
2021-11-05T01:23:03.026000Z NOTICE ALTER TABLE snipeit.components ADD PRIMARY KEY USING INDEX idx_25330_primary;
2021-11-05T01:23:03.029000Z NOTICE ALTER TABLE snipeit.components_assets ADD PRIMARY KEY USING INDEX idx_25337_primary;
2021-11-05T01:23:03.031000Z NOTICE ALTER TABLE snipeit.consumables ADD PRIMARY KEY USING INDEX idx_25344_primary;
2021-11-05T01:23:03.033000Z NOTICE ALTER TABLE snipeit.consumables_users ADD PRIMARY KEY USING INDEX idx_25352_primary;
2021-11-05T01:23:03.035000Z NOTICE ALTER TABLE snipeit.custom_fields ADD PRIMARY KEY USING INDEX idx_25358_primary;
2021-11-05T01:23:03.037000Z NOTICE ALTER TABLE snipeit.asset_maintenances ADD PRIMARY KEY USING INDEX idx_25289_primary;
2021-11-05T01:23:03.039000Z NOTICE ALTER TABLE snipeit.asset_uploads ADD PRIMARY KEY USING INDEX idx_25298_primary;
2021-11-05T01:23:03.041000Z NOTICE ALTER TABLE snipeit.departments ADD PRIMARY KEY USING INDEX idx_25378_primary;
2021-11-05T01:23:03.043000Z NOTICE ALTER TABLE snipeit.custom_fieldsets ADD PRIMARY KEY USING INDEX idx_25369_primary;
2021-11-05T01:23:03.045000Z NOTICE ALTER TABLE snipeit.depreciations ADD PRIMARY KEY USING INDEX idx_25384_primary;
2021-11-05T01:23:03.047000Z NOTICE ALTER TABLE snipeit.imports ADD PRIMARY KEY USING INDEX idx_25399_primary;
2021-11-05T01:23:03.049000Z NOTICE ALTER TABLE snipeit.groups ADD PRIMARY KEY USING INDEX idx_25390_primary;
2021-11-05T01:23:03.051000Z NOTICE ALTER TABLE snipeit.licenses ADD PRIMARY KEY USING INDEX idx_25408_primary;
2021-11-05T01:23:03.053000Z NOTICE ALTER TABLE snipeit.locations ADD PRIMARY KEY USING INDEX idx_25428_primary;
2021-11-05T01:23:03.055000Z NOTICE ALTER TABLE snipeit.login_attempts ADD PRIMARY KEY USING INDEX idx_25434_primary;
2021-11-05T01:23:03.057000Z NOTICE ALTER TABLE snipeit.license_seats ADD PRIMARY KEY USING INDEX idx_25419_primary;
2021-11-05T01:23:03.059000Z NOTICE ALTER TABLE snipeit.manufacturers ADD PRIMARY KEY USING INDEX idx_25440_primary;
2021-11-05T01:23:03.061000Z NOTICE ALTER TABLE snipeit.models_custom_fields ADD PRIMARY KEY USING INDEX idx_25463_primary;
2021-11-05T01:23:03.063000Z NOTICE ALTER TABLE snipeit.oauth_access_tokens ADD PRIMARY KEY USING INDEX idx_25470_primary;
2021-11-05T01:23:03.066000Z NOTICE ALTER TABLE snipeit.models ADD PRIMARY KEY USING INDEX idx_25452_primary;
2021-11-05T01:23:03.068000Z NOTICE ALTER TABLE snipeit.migrations ADD PRIMARY KEY USING INDEX idx_25446_primary;
2021-11-05T01:23:03.070000Z NOTICE ALTER TABLE snipeit.oauth_auth_codes ADD PRIMARY KEY USING INDEX idx_25476_primary;
2021-11-05T01:23:03.072000Z NOTICE ALTER TABLE snipeit.oauth_clients ADD PRIMARY KEY USING INDEX idx_25484_primary;
2021-11-05T01:23:03.074000Z NOTICE ALTER TABLE snipeit.oauth_refresh_tokens ADD PRIMARY KEY USING INDEX idx_25497_primary;
2021-11-05T01:23:03.077000Z NOTICE ALTER TABLE snipeit.permission_groups ADD PRIMARY KEY USING INDEX idx_25505_primary;
2021-11-05T01:23:03.078000Z NOTICE ALTER TABLE snipeit.requests ADD PRIMARY KEY USING INDEX idx_25520_primary;
2021-11-05T01:23:03.081000Z NOTICE ALTER TABLE snipeit.oauth_personal_access_clients ADD PRIMARY KEY USING INDEX idx_25493_primary;
2021-11-05T01:23:03.083000Z NOTICE ALTER TABLE snipeit.requested_assets ADD PRIMARY KEY USING INDEX idx_25514_primary;
2021-11-05T01:23:03.085000Z NOTICE ALTER TABLE snipeit.status_labels ADD PRIMARY KEY USING INDEX idx_25600_primary;
2021-11-05T01:23:03.087000Z NOTICE ALTER TABLE snipeit.throttle ADD PRIMARY KEY USING INDEX idx_25620_primary;
2021-11-05T01:23:03.089000Z NOTICE ALTER TABLE snipeit.suppliers ADD PRIMARY KEY USING INDEX idx_25614_primary;
2021-11-05T01:23:03.091000Z NOTICE ALTER TABLE snipeit.settings ADD PRIMARY KEY USING INDEX idx_25529_primary;
2021-11-05T01:23:03.094000Z NOTICE ALTER TABLE snipeit.users_groups ADD PRIMARY KEY USING INDEX idx_25642_primary;
2021-11-05T01:23:03.096000Z NOTICE ALTER TABLE snipeit.users ADD PRIMARY KEY USING INDEX idx_25629_primary;
2021-11-05T01:23:03.113000Z NOTICE ALTER DATABASE "snipeit" SET search_path TO public, snipeit;
2021-11-05T01:23:03.131000Z LOG report summary reset
                           table name     errors       read   imported      bytes      total time       read      write
-------------------------------------  ---------  ---------  ---------  ---------  --------------  ---------  ---------
                      fetch meta data          0        113        113                     0.302s
                       Create Schemas          0          0          0                     0.006s
                     Create SQL Types          0          0          0                     0.016s
                        Create tables          0         88         88                     0.216s
                       Set Table OIDs          0         44         44                     0.008s
-------------------------------------  ---------  ---------  ---------  ---------  --------------  ---------  ---------
                  snipeit.accessories          0        154        154    17.9 kB          0.106s     0.040s     0.002s
            snipeit.accessories_users          0          8          8     0.3 kB          0.084s     0.020s
                       snipeit.assets          0       2030       2030   466.6 kB          0.239s     0.148s     0.087s
                  snipeit.action_logs          0       2855       2855   329.1 kB          0.189s     0.131s     0.050s
                   snipeit.asset_logs          0          0          0                     0.129s     0.025s
           snipeit.asset_maintenances          0          0          0                     0.354s     0.012s
                   snipeit.categories          0         80         80     7.3 kB          0.121s     0.005s     0.001s
                snipeit.asset_uploads          0          0          0                     0.379s     0.003s
            snipeit.checkout_requests          0          0          0                     0.134s     0.002s
                    snipeit.companies          0          1          1     0.1 kB          0.165s     0.003s
                   snipeit.components          0          0          0                     0.180s     0.002s
            snipeit.components_assets          0          0          0                     0.215s     0.005s
                  snipeit.consumables          0         91         91    11.2 kB          0.243s     0.005s     0.001s
            snipeit.consumables_users          0         18         18     0.9 kB          0.291s     0.003s
                snipeit.custom_fields          0          3          3     0.3 kB          0.320s     0.003s
 snipeit.custom_field_custom_fieldset          0          6          6     0.0 kB          0.430s     0.002s
             snipeit.custom_fieldsets          0          2          2     0.1 kB          0.444s     0.006s
                snipeit.depreciations          0          0          0                     0.490s     0.002s
                      snipeit.imports          0          0          0                     0.500s     0.002s
                snipeit.license_seats          0          0          0                     0.563s     0.002s
                  snipeit.departments          0          0          0                     0.415s     0.003s
               snipeit.login_attempts          0        221        221    38.0 kB          0.553s     0.006s     0.007s
                       snipeit.groups          0          1          1     1.9 kB          0.498s     0.004s
                     snipeit.licenses          0          0          0                     0.507s     0.003s
                   snipeit.migrations          0        278        278    14.2 kB          0.655s     0.007s     0.002s
                    snipeit.locations          0          4          4     0.4 kB          0.537s     0.004s
                snipeit.manufacturers          0         58         58     4.3 kB          0.575s     0.005s
         snipeit.models_custom_fields          0          0          0                     0.587s     0.006s
                       snipeit.models          0        178        178    18.0 kB          0.625s     0.026s     0.002s
             snipeit.oauth_auth_codes          0          0          0                     0.645s     0.002s
snipeit.oauth_personal_access_clients          0          3          3     0.1 kB          0.753s     0.003s
              snipeit.password_resets          0          1          1     0.1 kB          0.685s     0.003s
             snipeit.requested_assets          0          0          0                     0.761s     0.002s
                     snipeit.settings          0          2          2     1.0 kB          0.855s     0.005s
                    snipeit.suppliers          0          1          1     0.1 kB          0.816s     0.003s
                        snipeit.users          0         73         73    24.7 kB          0.906s     0.006s     0.003s
          snipeit.oauth_access_tokens          0          0          0                     0.586s     0.006s
                snipeit.oauth_clients          0          6          6     0.8 kB          0.633s     0.004s
         snipeit.oauth_refresh_tokens          0          0          0                     0.649s     0.003s
            snipeit.permission_groups          0          0          0                     0.698s     0.002s
                     snipeit.requests          0          0          0                     0.707s     0.003s
                snipeit.status_labels          0          4          4     0.4 kB          0.766s     0.003s
                     snipeit.throttle          0          0          0                     0.781s     0.002s
                 snipeit.users_groups          0          3          3     0.0 kB          0.862s     0.002s
-------------------------------------  ---------  ---------  ---------  ---------  --------------  ---------  ---------
              COPY Threads Completion          0          4          4                     1.119s
                       Create Indexes          0         69         69                     0.960s
               Index Build Completion          0         69         69                     0.034s
                      Reset Sequences          0         38         38                     0.132s
                         Primary Keys          0         42         42                     0.093s
                  Create Foreign Keys          0          0          0                     0.000s
                      Create Triggers          0          2          2                     0.012s
                      Set Search Path          0          1          1                     0.002s
                     Install Comments          0          0          0                     0.000s
-------------------------------------  ---------  ---------  ---------  ---------  --------------  ---------  ---------
                    Total import time          ?       6081       6081   937.9 kB          2.352s
 