#dblink示例1
postgres=# create view remote_zabbix_server2 as
           select * from dblink ('dbname=zabbix port=5432 host=10.67.51.222 user=zabbix password=Foxconn123','select hostid,host,status from hosts')
           as t1(hostid bigint,host text,status integer);
CREATE VIEW
postgres=# select * from remote_zabbix_server2 where hostid>10449;
 hostid |    host     | status
--------+-------------+--------
  10450 | ZBtest1-win |      0
  10451 | ZBtest2-win |      0
  10452 | jumpserver  |      0
(3 rows)

示例2
postgres=# create view remote_zabbix_server3 as
           select * from dblink ('dbname=zabbix port=5432 host=10.67.51.222 user=zabbix password=Foxconn123','select hostid,host,status from hosts')
           as t1(hostid bigint,host text,status integer) where hostid>10449;
CREATE VIEW
postgres=# select * from remote_zabbix_server3;
 hostid |    host     | status
--------+-------------+--------
  10450 | ZBtest1-win |      0
  10451 | ZBtest2-win |      0
  10452 | jumpserver  |      0
(3 rows)

#dblink示例3
先用dblink_fdw创建remote server
然后select * from dblink('remote server','sql语句') as 别名 (字段名 字段类型);

# postgresql awr配置
1 下载并解压pg_profile--0.3.4.tar.gz，解压后的文件放到/usr/pgsql-13/share/extension
https://github.com/zubkov-andrei/pg_profile/releases/download/0.3.4/pg_profile--0.3.4.tar.gz

2 修改postgresql.conf，配置以下参数
-bash-4.2$ cat postgresql.conf |egrep -i '^pg_stat_statements|^track|^shared_preload_libraries'
shared_preload_libraries = 'pg_stat_statements'
track_activities = on
track_counts = on
track_io_timing = on
track_functions = 'all'                 # none, pl, all
pg_stat_statements.max = 10000
pg_stat_statements.track = all
systemctl restart postgresql-13

3 创建extension
create extension pg_stat_statements;
create extension dblink;
create schema profile;
create extension pg_profile schema profile;

4 创建awr snapshot
postgres=# select profile.snapshot();
        snapshot
------------------------
 (local,OK,00:00:00.37)
(1 row)

几分钟后，再次创建snapshot
postgres=# select profile.snapshot();
        snapshot
------------------------
 (local,OK,00:00:00.37)
(1 row)

postgres=# select profile.show_samples();
           show_samples
-----------------------------------
 (1,"2021-09-15 08:23:56+00",t,,,)
 (2,"2021-09-15 08:32:06+00",t,,,)
(2 rows)

5 生成awr html
-bash-4.2$ psql -qtc "select profile.get_report(1,2)" --output awr_report_postgres_1_2.html

用cronjob 创建计划任务

*/30 * * * *  psql -c 'SELECT profile.snapshot()' > /tmp/pg_awr.log  2>&1

# pg_stat_kcache配置
https://github.com/powa-team/pg_stat_kcache/
功能 Gathers statistics about real reads and writes done by the filesystem layer
[root@postgres-1 ~]# yum install pg_stat_kcache13

# postgresql.conf
shared_preload_libraries = 'pg_stat_statements,pg_stat_kcache'
pg_stat_kcache.track = top

restart postgresql

postgres=# create extension pg_stat_kcache;
CREATE EXTENSION
postgres=# select * from pg_stat_kcache();
-[ RECORD 1 ]----+-----------------------
queryid          | 6305979699841620080
top              | t
userid           | 16426
dbid             | 14172
plan_reads       | 0
plan_writes      | 0
plan_user_time   | 0
plan_system_time | 0
plan_minflts     | 0
plan_majflts     | 0
plan_nswaps      | 0
plan_msgsnds     | 0
plan_msgrcvs     | 0
plan_nsignals    | 0
plan_nvcsws      | 0
plan_nivcsws     | 0
exec_reads       | 0
exec_writes      | 0
exec_user_time   | 0.0009139999999999994
exec_system_time | 0.0005109999999999993
exec_minflts     | 348
exec_majflts     | 0
exec_nswaps      | 0
exec_msgsnds     | 0
exec_msgrcvs     | 0
exec_nsignals    | 0
exec_nvcsws      | 0
exec_nivcsws     | 0


# pg_cron配置
It’s important to take into account that pg_cron does not run any jobs as long as the server is in hot standby mode,
but it automatically starts when the server is promoted.
[root@postgres-1 ~]# yum install pg_cron_13

修改postgresql.conf，配置以下参数
shared_preload_libraries = 'pg_stat_statements,pg_cron'
cron.database_name = 'postgres'
重启pg:   systemctl restart postgresql-13

postgres=# create extension pg_cron;
CREATE EXTENSION

postgres=# select cron.schedule('30 * * * *',$$SELECT profile.snapshot()$$);
 schedule
----------
        1
(1 row)

postgres=# select * from cron.job;
 jobid |  schedule  |          command          | nodename  | nodeport | database | username | active | jobname
-------+------------+---------------------------+-----------+----------+----------+----------+--------+---------
     1 | 30 * * * * | SELECT profile.snapshot() | localhost |     5432 | postgres | postgres | t      |
(1 row)

postgres=# update cron.job set nodename='';    改为connection走unix domain socks，否则pg_hba.conf就得允许 host postgres postgres 127.0.0.1/32 trust
UPDATE 1
postgres=# select * from cron.job;
 jobid |  schedule  |          command          | nodename | nodeport | database | username | active | jobname
-------+------------+---------------------------+----------+----------+----------+----------+--------+---------
     1 | 30 * * * * | SELECT profile.snapshot() |          |     5432 | postgres | postgres | t      |
(1 row)

postgres=# select * from cron.job;
-[ RECORD 1 ]-----------------------
jobid    | 1
schedule | 40 * * * *
command  | SELECT profile.snapshot()
nodename |
nodeport | 5432
database | postgres
username | postgres
active   | t
jobname  |

取消job
postgres=# select cron.unschedule(1);
-[ RECORD 1 ]-
unschedule | t

postgres=# select * from cron.job;
(0 rows)

# pg_repack 插件
pg_repack is a PostgreSQL extension which lets you remove bloat from tables and indexes, and optionally restore the physical order of clustered indexes. 
Unlike CLUSTER and VACUUM FULL it works online, without holding an exclusive lock on the processed tables during processing. pg_repack is efficient to boot, with performance comparable to using CLUSTER directly.
Notes:
Only superusers can use the utility.
The target table must have a PRIMARY KEY or at least a UNIQUE index on a NOT NULL column.
Performing a full-table repack requires free disk space about twice as large as the target table(s) and its indexes. For example, if the total size of the tables and indexes to be reorganized is 2GB,
 an additional 4GB of disk space is required.
yum install pg_repack_13
进入目标数据库  create extension pg_repack
-bash-4.2$ pg_repack -d postgres --table profile.last_stat_tables
INFO: repacking table "profile.last_stat_tables"
-bash-4.2$
打开调试，看看repack做了哪些操作
-bash-4.2$ pg_repack -d postgres --table profile.sample_stat_user_functions -E DEBUG
DEBUG: No workers to disconnect.
INFO: repacking table "profile.sample_stat_user_functions"
DEBUG: ---- repack_one_table ----
DEBUG: target_name       : profile.sample_stat_user_functions
DEBUG: target_oid        : 17165
DEBUG: target_toast      : 0
DEBUG: target_tidx       : 0
DEBUG: pkid              : 17168
DEBUG: ckid              : 0
DEBUG: create_pktype     : CREATE TYPE repack.pk_17165 AS (server_id integer, sample_id integer, datid oid, funcid oid)
DEBUG: create_log        : CREATE TABLE repack.log_17165 (id bigserial PRIMARY KEY, pk repack.pk_17165, row profile.sample_stat_user_functions)
DEBUG: create_trigger    : CREATE TRIGGER repack_trigger AFTER INSERT OR DELETE OR UPDATE ON profile.sample_stat_user_functions FOR EACH ROW EXECUTE PROCEDURE repack.repack_trigger('INSERT INTO repack.log_17165(pk, row) VALUES( CASE WHEN $1 IS NULL THEN NULL ELSE (ROW($1.server_id, $1.sample_id, $1.datid, $1.funcid)::repack.pk_17165) END, $2)')
DEBUG: enable_trigger    : ALTER TABLE profile.sample_stat_user_functions ENABLE ALWAYS TRIGGER repack_trigger
DEBUG: create_table      : CREATE TABLE repack.table_17165 WITH (oids = false) TABLESPACE pg_default AS SELECT server_id,sample_id,datid,funcid,calls,total_time,self_time,trg_fn FROM ONLY profile.sample_stat_user_functions WITH NO DATA
DEBUG: copy_data         : INSERT INTO repack.table_17165 SELECT server_id,sample_id,datid,funcid,calls,total_time,self_time,trg_fn FROM ONLY profile.sample_stat_user_functions
DEBUG: alter_col_storage : (skipped)
DEBUG: drop_columns      : (skipped)
DEBUG: delete_log        : DELETE FROM repack.log_17165
DEBUG: lock_table        : LOCK TABLE profile.sample_stat_user_functions IN ACCESS EXCLUSIVE MODE
DEBUG: sql_peek          : SELECT * FROM repack.log_17165 ORDER BY id LIMIT $1
DEBUG: sql_insert        : INSERT INTO repack.table_17165 VALUES ($1.*)
DEBUG: sql_delete        : DELETE FROM repack.table_17165 WHERE (server_id, sample_id, datid, funcid) = ($1.server_id, $1.sample_id, $1.datid, $1.funcid)
DEBUG: sql_update        : UPDATE repack.table_17165 SET (server_id, sample_id, datid, funcid, calls, total_time, self_time, trg_fn) = ($2.server_id, $2.sample_id, $2.datid, $2.funcid, $2.calls, $2.total_time, $2.self_time, $2.trg_fn) WHERE (server_id, sample_id, datid, funcid) = ($1.server_id, $1.sample_id, $1.datid, $1.funcid)
DEBUG: sql_pop           : DELETE FROM repack.log_17165 WHERE id IN (
DEBUG: ---- setup ----
DEBUG: index[0].target_oid      : 17168
DEBUG: index[0].create_index    : CREATE UNIQUE INDEX index_17168 ON repack.table_17165 USING btree (server_id, sample_id, datid, funcid)
DEBUG: LOCK TABLE profile.sample_stat_user_functions IN ACCESS SHARE MODE
DEBUG: No competing DDL to cancel.
DEBUG: Waiting on ACCESS SHARE lock...
DEBUG: ---- copy tuples ----
DEBUG: No competing DDL to cancel.
DEBUG: ---- create indexes ----
DEBUG: Have 1 indexes and num_workers=0
DEBUG: set up index_jobs [0]
DEBUG: target_oid   : 17168
DEBUG: create_index : CREATE UNIQUE INDEX index_17168 ON repack.table_17165 USING btree (server_id, sample_id, datid, funcid)
DEBUG: ---- swap ----
DEBUG: ---- drop ----
DEBUG: ---- analyze ----
DEBUG: No workers to disconnect.

# pgstattuple插件  查看表的物理长度、"死亡"元组的百分比以及其他信息
postgres=# create extension pgstattuple;
CREATE EXTENSION
postgres=# select * from pg_relpages('profile.sample_kcache_total');   查看page数
 pg_relpages
-------------
          14

postgres=# select * from pgstattuple('profile.sample_kcache_total');
 table_len | tuple_count | tuple_len | tuple_percent | dead_tuple_count | dead_tuple_len | dead_tuple_percent | free_space | free_percent
-----------+-------------+-----------+---------------+------------------+----------------+--------------------+------------+--------------
    221184 |         456 |    109440 |         49.48 |                6 |           1440 |               0.65 |     105692 |        47.78
postgres=# select * from pgstatindex('idx_t3_t');
 version | tree_level | index_size | root_block_no | internal_pages | leaf_pages | empty_pages | deleted_pages | avg_leaf_density | leaf_fragmentation
---------+------------+------------+---------------+----------------+------------+-------------+---------------+------------------+--------------------
       4 |          1 |     106496 |             3 |              1 |         11 |           0 |             0 |            88.32 |                  0
(1 row)

# pg_squeeze插件
安装 yum install pg_squeeze_13
Apply the following settings to postgresql.conf:

wal_level = logical
max_replication_slots = 1 # ... or add 1 to the current value.
shared_preload_libraries = 'pg_squeeze' # ... or add the library to the existing ones.

Start the PG cluster.
As a superuser, run
CREATE EXTENSION pg_squeeze;

1 立即一次性的squeeze表
postgres=# select * from pgstattuple('profile.sample_kcache_total');
 table_len | tuple_count | tuple_len | tuple_percent | dead_tuple_count | dead_tuple_len | dead_tuple_percent | free_space | free_percent
-----------+-------------+-----------+---------------+------------------+----------------+--------------------+------------+--------------
    221184 |         456 |    109440 |         49.48 |                6 |           1440 |               0.65 |     105692 |        47.78
(1 row)

postgres=# select squeeze.squeeze_table('profile','sample_kcache_total',null,null,null);
 squeeze_table
---------------

(1 row)

postgres=# select * from pgstattuple('profile.sample_kcache_total');
 table_len | tuple_count | tuple_len | tuple_percent | dead_tuple_count | dead_tuple_len | dead_tuple_percent | free_space | free_percent
-----------+-------------+-----------+---------------+------------------+----------------+--------------------+------------+--------------
    114688 |         456 |    109440 |         95.42 |                0 |              0 |                  0 |       3032 |         2.64
(1 row)

2 添加计划任务
postgres=# insert into squeeze.tables (tabschema,tabname,schedule,free_space_extra) values('profile','sample_kcache_total',('{40}','{7}',null,null,null),'10');
INSERT 0 1
postgres=# select * from squeeze.tables;
 id | tabschema |       tabname       | clustering_index | rel_tablespace | ind_tablespaces | free_space_extra | min_size | vacuum_max_age | max_retry | skip_analyze |   schedule
----+-----------+---------------------+------------------+----------------+-----------------+------------------+----------+----------------+-----------+--------------+---------------
  1 | profile   | sample_kcache_total |                  |                |                 |               10 |        8 | 01:00:00       |         0 | f            | ({40},{7},,,)
(1 row)


Extensions included in the PostgreSQL distribution
pg_stat_statements 			query statistics
pgstattuple 				row versions statistics
pg_buffercache 				buffer cache status
Other extensions
pg_stat_plans 				query plan statistics
pg_stat_kcache				CPU and I/O statistics
pg_qualstats 				predicate statistics	

postgres-1上安装的extension
postgres=# \dx
                                            List of installed extensions
        Name        | Version |   Schema   |                              Description
--------------------+---------+------------+------------------------------------------------------------------------
 dblink             | 1.2     | public     | connect to other PostgreSQL databases from within a database
 file_fdw           | 1.0     | public     | foreign-data wrapper for flat file access
 hstore             | 1.7     | public     | data type for storing sets of (key, value) pairs
 ogr_fdw            | 1.1     | public     | foreign-data wrapper for GIS data access
 pageinspect        | 1.8     | public     | inspect the contents of database pages at a low level
 pg_buffercache     | 1.3     | public     | examine the shared buffer cache
 pg_cron            | 1.3     | public     | Job scheduler for PostgreSQL
 pg_freespacemap    | 1.2     | public     | examine the free space map (FSM)
 pg_prewarm         | 1.2     | public     | prewarm relation data
 pg_profile         | 0.3.4   | profile    | PostgreSQL load profile repository and report builder
 pg_repack          | 1.4.7   | public     | Reorganize tables in PostgreSQL databases with minimal locks
 pg_squeeze         | 1.3     | squeeze    | A tool to remove unused space from a relation.
 pg_stat_kcache     | 2.2.0   | public     | Kernel statistics gathering
 pg_stat_statements | 1.8     | public     | track planning and execution statistics of all SQL statements executed
 pg_visibility      | 1.2     | public     | examine the visibility map (VM) and page-level visibility info
 pgfincore          | 1.2     | public     | examine and manage the os buffer cache
 pgrowlocks         | 1.2     | public     | show row-level locking information
 pgstattuple        | 1.5     | public     | show tuple-level statistics
 plpgsql            | 1.0     | pg_catalog | PL/pgSQL procedural language
 postgres_fdw       | 1.0     | public     | foreign-data wrapper for remote PostgreSQL servers
 redis_fdw          | 1.0     | public     | foreign-data wrapper for Redis
 sqlite_fdw         | 1.0     | public     | SQLite Foreign Data Wrapper
 timescaledb        | 2.5.0   | public     | Enables scalable inserts and complex queries for time-series data
 uuid-ossp          | 1.1     | public     | generate universally unique identifiers (UUIDs)
