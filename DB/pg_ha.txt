###############  pgbouncer连接池软件  ############### 
### 启动容器
读写分离配置，DATABASES这行指定了用户，所以只有两个池存在
docker run -d \
-p 5439:5439 \
--name=pgbouncer \
-e "DATABASES=pg_rw = host = 10.67.39.58 port=5432 user=postgres password=postgres dbname=chensen,pg_ro = host = 10.67.39.59 port=5432 user=postgres password=postgres dbname=chensen" \
-e "PGBOUNCER_LISTEN_PORT=5439" \
-v /root/userlist.txt:/tmp/userlist.txt \
pgbouncer/pgbouncer

更好的写法，更多的用户放在auth_file里了
[root@worker1 ~]# cat pgb2.sh
docker run -d \
-p 5439:5439 \
--name=pgbouncer \
-e "DATABASES=pg_rw = host = 10.67.39.58 port=5432 dbname=chensen,pg_ro = host = 10.67.39.59 port=5432 dbname=chensen" \
-e "PGBOUNCER_LISTEN_PORT=5439" \
-e "PGBOUNCER_AUTH_TYPE=md5" \
-e "PGBOUNCER_AUTH_FILE=/etc/pgbouncer/userlist.txt" \
-e "PGBOUNCER_POOL_MODE=transaction" \
-e "PGBOUNCER_MAX_CLIENT_CONN=500" \
-e "PGBOUNCER_DEFAULT_POOL_SIZE=30" \
-v /root/userlist.txt:/etc/pgbouncer/userlist.txt \
pgbouncer/pgbouncer

最佳做法，只放pgbouncer在auth_file里，其他用户通过auth_query查询到密码
# Create a Postgres user to use as auth_user
Direct access to pg_shadow requires admin rights. It’s preferable to use a non-superuser that calls a SECURITY DEFINER function instead.
# Create the user/password lookup function in Postgres
CREATE OR REPLACE FUNCTION user_search(uname TEXT) RETURNS TABLE (usename name, passwd text) as
$$
  SELECT usename, passwd FROM pg_shadow WHERE usename=$1;
$$
LANGUAGE sql SECURITY DEFINER;
# Configure pgbouncer.ini
[pgbouncer]
auth_type = md5
auth_file = /etc/pgbouncer/userlist.txt
auth_user = pgbouncer
auth_query = SELECT usename, passwd FROM user_search($1)
https://www.enterprisedb.com/postgres-tutorials/pgbouncer-authquery-and-authuser-pro-tips


--------------------log-------------------
[root@worker1 ~]# docker logs -f pgbouncer
Creating pgbouncer config in /etc/pgbouncer
#pgbouncer.ini

[databases]
pg_rw = host = 10.67.39.58 port=5432 dbname=chensen
pg_ro = host = 10.67.39.59 port=5432 dbname=chensen

[pgbouncer]
listen_addr = 0.0.0.0
listen_port = 5439
auth_file = /etc/pgbouncer/userlist.txt
auth_type = md5
pool_mode = transaction
max_client_conn = 500
default_pool_size = 30
ignore_startup_parameters = extra_float_digits

# Log settings
admin_users = postgres

# Connection sanity checks, timeouts

# TLS settings

# Dangerous timeouts

Starting pgbouncer.
2021-10-29 06:02:29.469 UTC [1] LOG kernel file descriptor limit: 1048576 (hard: 1048576); max_client_conn: 500, max expected fd use: 932
2021-10-29 06:02:29.470 UTC [1] LOG listening on 0.0.0.0:5439
2021-10-29 06:02:29.470 UTC [1] LOG listening on unix:/tmp/.s.PGSQL.5439

--------------------log-------------------
查看pgbouncer虚拟数据库里的连接池信息
postgres@u2004:~$ psql -U postgres -h 10.67.36.62 -p 5439 -d pgbouncer
pgbouncer=# show pools;       5个连接，2个在pg_rw sam 这个池里
 database  |   user    | cl_active | cl_waiting | sv_active | sv_idle | sv_used | sv_tested | sv_login | maxwait | maxwait_us |  pool_mode
-----------+-----------+-----------+------------+-----------+---------+---------+-----------+----------+---------+------------+-------------
 pg_ro     | chensen   |         1 |          0 |         0 |       0 |       1 |         0 |        0 |       0 |          0 | transaction
 pg_rw     | clm       |         1 |          0 |         0 |       0 |       1 |         0 |        0 |       0 |          0 | transaction
 pg_rw     | sam       |         2 |          0 |         0 |       0 |       1 |         0 |        0 |       0 |          0 | transaction
 pgbouncer | pgbouncer |         1 |          0 |         0 |       0 |       0 |         0 |        0 |       0 |          0 | statement
(4 rows)



主库可写
postgres@u2004:~$ psql -U postgres -h 10.67.36.62 -p 5439 -d pg_rw
pg_rw=# create table s1(id int primary key,name text);
CREATE TABLE
pg_rw=# insert into s1 values(1,'wang');
INSERT 0 1
副库只读	
postgres@u2004:~$ psql -U postgres -h 10.67.36.62 -p 5439 -d pg_ro
pg_ro=# insert into s1 values(2,'jun');
ERROR:  cannot execute INSERT in a read-only transaction

# SCRAM-SHA-256加密算法
MD5哈希算法构造的密码越来越不安全，所以，PG顺应发展，从10版本开始支持了SCRAM-SHA-256加密算法
postgres=# select usename,passwd from pg_shadow where usename in('sam','cl','clm','clm2','chensen','postgres');  # 与下面的查询一样
postgres=# select rolname,rolpassword from pg_authid where rolname in('hank','zabbix');
 rolname |                                                              rolpassword                                                              
---------+---------------------------------------------------------------------------------------------------------------------------------------
 zabbix  | md5435f13d666b53dd9b4b829e237213fd8
 hank    | SCRAM-SHA-256$4096:yqNGsct76W5ZjPvMxxjzRw==$NmR4QIuHRlhu+I/HP1TQ4OC6stmtgN6Oc7oZa76tKxQ=:kNOwGMU+tSbJ2QQiD1Hb/rCKX7/coQEdkeUjD9+pEhE=


#pg_hba.conf没有修改，但是同样可以通过密码登陆，这是pg的一个兼容性特性，即使没写SCRAM-SHA-256，可以自动识别密码为SCRAM-SHA-256加密的，然后验证通过，而且使用老的MD5加密的用户也可以正常登陆
host  all  all  0.0.0.0/0 md5
如果修改pg_hba.conf为scram-sha-256，则md5加密的用户无法登陆	

### pgbouncer应用到zabbix
[root@worker1 ~]# cat pgb2.sh
docker run -d \
-p 5439:5439 \
--name=pgbouncer \
-e "DATABASES=zabbix = host = 10.67.39.58 port=5432 dbname=zabbix" \
-e "PGBOUNCER_LISTEN_PORT=5439" \
-e "PGBOUNCER_AUTH_TYPE=md5" \
-e "PGBOUNCER_AUTH_FILE=/etc/pgbouncer/userlist.txt" \
-e "PGBOUNCER_POOL_MODE=transaction" \
-e "PGBOUNCER_MAX_CLIENT_CONN=500" \
-e "PGBOUNCER_DEFAULT_POOL_SIZE=30" \
-v /root/userlist.txt:/etc/pgbouncer/userlist.txt \
pgbouncer/pgbouncer

userlist.txt的内容是下面SQL语句查询得到的
select usename,passwd from pg_shadow where usename in('sam','cl','clm','clm2','chensen','postgres');
[root@worker1 ~]# cat userlist.txt
"chensen" "SCRAM-SHA-256$4096:/NxbhfBkyOGU1cXNGWsYOg==$VSTc609r5sEmiygt8bT0zmN6J3gZarTd0Q1WmoZw6vA=:MP1ZVEYSOLx7UhIsrA9duq7XNPad2XQ6oW7Sx43XgTo="
"postgres" "SCRAM-SHA-256$4096:lKegIbz0kAwGJDjsLQ1MaQ==$HwLkYyvkpr03e036YWoDeNDNdDpjhOIU5YPaD1iOhBE=:VRRsGYkDoPGQkcbBfnV60lWtEh8YEKZI0gq7N7pAEuc="
"cl" "SCRAM-SHA-256$4096:qtoUTfa+vSsjazXjXcow6Q==$GTlV4TW7peKGKbMMfTLt5taPf6cCcg1dbk3aAb0AY7g=:JoONpYaP0JX8ORIBGpVQE61DC4wjKibzme6eqoln8c8="
"clm" "SCRAM-SHA-256$4096:uiEfQdGbnPwOt7NLTfbYRQ==$6mWvoU4bnyKBGyKzoPGHFZoTL5uD73n8/SfCkErPrW0=:V+WLZWg2LgAl0FnBNkDncfFpvQHiVj+QCoUQ6lKaoDY="
"clm2" "SCRAM-SHA-256$4096:SPuYZfPOlOZvHZXSbALefg==$SrgfVPR2bLNlcUUFrcWvOifAxBmO5O+c7M4RtWAtMow=:wYC5+yLNc3WC+x2MRMqCtA/TvGE0sbSwLYE2xg6/Y7U="
"sam" "SCRAM-SHA-256$4096:tZiRnt5eB20XLhsB2SocGA==$sCH2cxbefAjlqA/6Fytq4vfwCsYL3bCRl7qsQZhx29g=:CAmgPUOI+rHwASSBiRTLj1SLq+XGjIKpw4Ux1499DzE="
"zabbix" "SCRAM-SHA-256$4096:E8FjuZpQGXxfg0s4k58DoA==$NrrMgeW3K7v/PqbooSZ/9VQTpTp8ADZvSY4pUJ4kLR4=:hKoX/IEiGOQoDsaDeZzIc14z+IKy/IWNXsyaeqaJ3V4="


查看pgbouncer的log
Creating pgbouncer config in /etc/pgbouncer
#pgbouncer.ini

[databases]
zabbix = host = 10.67.39.58 port=5432 dbname=zabbix

[pgbouncer]
listen_addr = 0.0.0.0
listen_port = 5439
auth_file = /etc/pgbouncer/userlist.txt
auth_type = md5
pool_mode = transaction
max_client_conn = 500
default_pool_size = 30
ignore_startup_parameters = extra_float_digits

# Log settings
admin_users = postgres

# Connection sanity checks, timeouts

# TLS settings

# Dangerous timeouts

Starting pgbouncer.


验证pgbouncer
postgres@u2004:~$  psql -U zabbix -h 10.67.36.62 -p 5439 -d zabbix
Password for user zabbix:

更改zabbix的db设置
docker run --name zabbix-server-timescalesb -d \
-e TZ='Asia/Shanghai' \
-e ZBX_SERVER_NAME='zabbixserver' \
-e DB_SERVER_HOST="10.67.36.62" \
-e DB_SERVER_PORT="5439" \
-e POSTGRES_USER="zabbix" \
-e POSTGRES_PASSWORD="Foxconn123" \
-e POSTGRES_DB="zabbix" \
-e DB_SERVER_SCHEMA="public" \
-e POSTGRES_USE_IMPLICIT_SEARCH_PATH="true" \
-p 10051:10051 \
zabbix/zabbix-server-pgsql:centos-5.4.7      #5.4.0 没有POSTGRES_USE_IMPLICIT_SEARCH_PATH这个参数，所以pgbounce报错unsupported startup parameter: options=--search_path=public

docker run --name zabbix-web-nginx-timescaledb -d \
-e TZ='Asia/Shanghai' \
-e PHP_TZ='Asia/Shanghai' \
-e ZBX_SERVER_NAME='zabbixserver' \
-e POSTGRES_USER="zabbix" \
-e POSTGRES_PASSWORD="Foxconn123" \
-e DB_SERVER_HOST="10.67.36.62" \
-e DB_SERVER_PORT="5439" \
-e POSTGRES_DB="zabbix" \
-e DB_SERVER_SCHEMA="public" \
-e POSTGRES_USE_IMPLICIT_SEARCH_PATH="true" \
--link zabbix-server-timescalesb:zabbix-server \
-p 28080:8080 \
zabbix/zabbix-web-nginx-pgsql:centos-5.4.7

在pgbouncer上查看连接
pgbouncer=# show clients;
 type |   user   | database  | state  |     addr     | port  | local_addr | local_port |      connect_time       |      request_time       | wait | wait_us | close_needed |      ptr       | link | remote_pid | tls
------+----------+-----------+--------+--------------+-------+------------+------------+-------------------------+-------------------------+------+---------+--------------+----------------+------+------------+-----
 C    | postgres | pgbouncer | active | 10.67.50.141 | 35494 | 172.17.0.2 |       5439 | 2021-11-02 07:15:26 UTC | 2021-11-02 07:17:00 UTC |   88 |  855789 |            0 | 0x55d94e7ea540 |      |          0 |
 C    | zabbix   | zabbix    | active | 10.67.36.61  | 40744 | 172.17.0.2 |       5439 | 2021-11-02 05:36:18 UTC | 2021-11-02 06:45:08 UTC |    0 |       0 |            0 | 0x55d94e7ea9a0 |      |          0 |
 C    | zabbix   | zabbix    | active | 10.67.36.61  | 40742 | 172.17.0.2 |       5439 | 2021-11-02 05:36:18 UTC | 2021-11-02 06:45:07 UTC |    0 |       0 |            0 | 0x55d94e7eabd0 |      |          0 |
 C    | zabbix   | zabbix    | active | 10.67.36.61  | 40766 | 172.17.0.2 |       5439 | 2021-11-02 05:36:18 UTC | 2021-11-02 05:36:18 UTC |    0 |       0 |            0 | 0x55d94e7ec3e0 |      |          0 |
 C    | zabbix   | zabbix    | active | 10.67.36.61  | 40770 | 172.17.0.2 |       5439 | 2021-11-02 05:36:18 UTC | 2021-11-02 07:16:38 UTC |    0 |       0 |            0 | 0x55d94e7ec840 |      |          0 |
 C    | zabbix   | zabbix    | active | 10.67.36.61  | 40776 | 172.17.0.2 |       5439 | 2021-11-02 05:36:18 UTC | 2021-11-02 07:16:27 UTC |    0 |       0 |            0 | 0x55d94e7ecca0 |      |          0 |
 C    | zabbix   | zabbix    | active | 10.67.36.61  | 40778 | 172.17.0.2 |       5439 | 2021-11-02 05:36:18 UTC | 2021-11-02 07:16:52 UTC |    0 |       0 |            0 | 0x55d94e7ed100 |      |          0 |
 C    | zabbix   | zabbix    | active | 10.67.36.61  | 40784 | 172.17.0.2 |       5439 | 2021-11-02 05:36:18 UTC | 2021-11-02 05:36:42 UTC |    0 |       0 |            0 | 0x55d94e7ed790 |      |          0 |
 C    | zabbix   | zabbix    | active | 10.67.36.61  | 40748 | 172.17.0.2 |       5439 | 2021-11-02 05:36:18 UTC | 2021-11-02 07:16:00 UTC |    0 |       0 |            0 | 0x55d94e7eb030 |      |          0 |
 C    | zabbix   | zabbix    | active | 10.67.36.61  | 40790 | 172.17.0.2 |       5439 | 2021-11-02 05:36:18 UTC | 2021-11-02 07:16:49 UTC |    0 |       0 |            0 | 0x55d94e7ede20 |      |          0 |
 C    | zabbix   | zabbix    | active | 10.67.36.61  | 40788 | 172.17.0.2 |       5439 | 2021-11-02 05:36:18 UTC | 2021-11-02 07:16:05 UTC |    0 |       0 |            0 | 0x55d94e7edbf0 |      |          0 |
 C    | zabbix   | zabbix    | active | 10.67.36.61  | 40768 | 172.17.0.2 |       5439 | 2021-11-02 05:36:18 UTC | 2021-11-02 07:16:16 UTC |    0 |       0 |            0 | 0x55d94e7ec610 |      |          0 |
 C    | zabbix   | zabbix    | active | 10.67.36.61  | 40772 | 172.17.0.2 |       5439 | 2021-11-02 05:36:18 UTC | 2021-11-02 05:36:40 UTC |    0 |       0 |            0 | 0x55d94e7eca70 |      |          0 |
 C    | zabbix   | zabbix    | active | 10.67.36.61  | 40782 | 172.17.0.2 |       5439 | 2021-11-02 05:36:18 UTC | 2021-11-02 05:36:38 UTC |    0 |       0 |            0 | 0x55d94e7ed560 |      |          0 |
 C    | zabbix   | zabbix    | active | 10.67.36.61  | 40780 | 172.17.0.2 |       5439 | 2021-11-02 05:36:18 UTC | 2021-11-02 05:36:39 UTC |    0 |       0 |            0 | 0x55d94e7ed330 |      |          0 |
 C    | zabbix   | zabbix    | active | 10.67.36.61  | 40786 | 172.17.0.2 |       5439 | 2021-11-02 05:36:18 UTC | 2021-11-02 05:36:43 UTC |    0 |       0 |            0 | 0x55d94e7ed9c0 |      |          0 |
 C    | zabbix   | zabbix    | active | 10.67.36.61  | 40754 | 172.17.0.2 |       5439 | 2021-11-02 05:36:18 UTC | 2021-11-02 07:16:57 UTC |    0 |       0 |            0 | 0x55d94e7eb260 |      |          0 |
 C    | zabbix   | zabbix    | active | 10.67.36.61  | 40732 | 172.17.0.2 |       5439 | 2021-11-02 05:36:17 UTC | 2021-11-02 07:16:29 UTC |    0 |       0 |            0 | 0x55d94e7ea310 |      |          0 |
 C    | zabbix   | zabbix    | active | 10.67.36.61  | 40758 | 172.17.0.2 |       5439 | 2021-11-02 05:36:18 UTC | 2021-11-02 07:16:55 UTC |    0 |       0 |            0 | 0x55d94e7ebb20 |      |          0 |
 C    | zabbix   | zabbix    | active | 10.67.36.61  | 40750 | 172.17.0.2 |       5439 | 2021-11-02 05:36:18 UTC | 2021-11-02 07:16:56 UTC |    0 |       0 |            0 | 0x55d94e7eb6c0 |      |          0 |
 C    | zabbix   | zabbix    | active | 10.67.36.61  | 40760 | 172.17.0.2 |       5439 | 2021-11-02 05:36:18 UTC | 2021-11-02 07:16:19 UTC |    0 |       0 |            0 | 0x55d94e7ebf80 |      |          0 |
 C    | zabbix   | zabbix    | active | 10.67.36.61  | 40764 | 172.17.0.2 |       5439 | 2021-11-02 05:36:18 UTC | 2021-11-02 07:16:57 UTC |    0 |       0 |            0 | 0x55d94e7ec1b0 |      |          0 |
 C    | zabbix   | zabbix    | active | 10.67.36.61  | 40774 | 172.17.0.2 |       5439 | 2021-11-02 05:36:18 UTC | 2021-11-02 07:17:00 UTC |    0 |       0 |            0 | 0x55d94e7eced0 |      |          0 |
 C    | zabbix   | zabbix    | active | 10.67.36.61  | 40752 | 172.17.0.2 |       5439 | 2021-11-02 05:36:18 UTC | 2021-11-02 07:16:58 UTC |    0 |       0 |            0 | 0x55d94e7eb490 |      |          0 |
 C    | zabbix   | zabbix    | active | 10.67.36.61  | 40756 | 172.17.0.2 |       5439 | 2021-11-02 05:36:18 UTC | 2021-11-02 07:16:59 UTC |    0 |       0 |            0 | 0x55d94e7eb8f0 |      |          0 |
 C    | zabbix   | zabbix    | active | 10.67.36.61  | 40762 | 172.17.0.2 |       5439 | 2021-11-02 05:36:18 UTC | 2021-11-02 07:16:55 UTC |    0 |       0 |            0 | 0x55d94e7ebd50 |      |          0 |
(26 rows)

pgbouncer=# show servers;
 type |  user  | database | state |    addr     | port | local_addr | local_port |      connect_time       |      request_time       | wait | wait_us | close_needed |      ptr       | link | remote_pid | tls
------+--------+----------+-------+-------------+------+------------+------------+-------------------------+-------------------------+------+---------+--------------+----------------+------+------------+-----
 S    | zabbix | zabbix   | idle  | 10.67.39.58 | 5432 | 172.17.0.2 |      53538 | 2021-11-02 06:42:58 UTC | 2021-11-02 07:17:14 UTC |    0 |       0 |            0 | 0x55d94e84ea70 |      |       9374 |
 S    | zabbix | zabbix   | idle  | 10.67.39.58 | 5432 | 172.17.0.2 |      57462 | 2021-11-02 07:11:15 UTC | 2021-11-02 07:16:57 UTC |    0 |       0 |            0 | 0x55d94e84e840 |      |      11254 |
 S    | zabbix | zabbix   | idle  | 10.67.39.58 | 5432 | 172.17.0.2 |      52686 | 2021-11-02 06:36:51 UTC | 2021-11-02 07:16:56 UTC |    0 |       0 |            0 | 0x55d94e84e610 |      |       8958 |
 S    | zabbix | zabbix   | used  | 10.67.39.58 | 5432 | 172.17.0.2 |      57460 | 2021-11-02 07:11:15 UTC | 2021-11-02 07:16:23 UTC |    0 |       0 |            0 | 0x55d94e84db20 |      |      11253 |
 S    | zabbix | zabbix   | used  | 10.67.39.58 | 5432 | 172.17.0.2 |      57456 | 2021-11-02 07:11:15 UTC | 2021-11-02 07:11:44 UTC |    0 |       0 |            0 | 0x55d94e84dd50 |      |      11251 |
 S    | zabbix | zabbix   | used  | 10.67.39.58 | 5432 | 172.17.0.2 |      57458 | 2021-11-02 07:11:15 UTC | 2021-11-02 07:11:43 UTC |    0 |       0 |            0 | 0x55d94e84d8f0 |      |      11252 |
(6 rows)

在pg上查看连接
zabbix=# select datname,pid,usename,application_name,client_addr,client_port,state,backend_xid,backend_xmin,backend_type from pg_stat_activity where datname='zabbix';
 datname |  pid  | usename  |            application_name             | client_addr | client_port | state  | backend_xid | backend_xmin |              backend_type
---------+-------+----------+-----------------------------------------+-------------+-------------+--------+-------------+--------------+-----------------------------------------
 zabbix  | 23462 | postgres | TimescaleDB Background Worker Scheduler |             |             | idle   |             |              | TimescaleDB Background Worker Scheduler
 zabbix  |  8958 | zabbix   |                                         | 10.67.36.62 |       52686 | idle   |             |              | client backend
 zabbix  | 26124 | postgres | psql                                    |             |          -1 | active |             |       804702 | client backend
 zabbix  | 11251 | zabbix   |                                         | 10.67.36.62 |       57456 | idle   |             |              | client backend
 zabbix  |  9374 | zabbix   | psql                                    | 10.67.36.62 |       53538 | idle   |             |              | client backend
 zabbix  | 11252 | zabbix   |                                         | 10.67.36.62 |       57458 | idle   |             |              | client backend
 zabbix  | 11253 | zabbix   | psql                                    | 10.67.36.62 |       57460 | idle   |             |              | client backend
 zabbix  | 11254 | zabbix   | psql                                    | 10.67.36.62 |       57462 | idle   |             |              | client backend
(8 rows)

################################################
postgresql-13主从 streaming复制 同步模式
===========================================================================================================================
1 概念和原理
一.物理流复制
物理流复制是一种数据库主备同步技术，该特性同步的数据是数据库中物理页面变化数据（WAL），该模式备库的底层数据页面状态和主库完全相同，这样的实现方案让数据库主备以及同步状态都非常稳定。
二.流复制中的角色
1. 主库 backend 进程，它负责执行用户的 SQL，在修改数据前会先记录 WAL（Write-Ahead Logging）日志。这些日志中事物提交日志（CommitTransaction）由 backend 进程负责写到磁盘。
2. 主库 WALsender 进程，负责把 WAL 日志发送给备库的 WALreceiver 进程。
3. 备库 WALreceiver 进程，负责接收 WALsender 发送的 WAL 日志，并持久化到存储。
4. 备库 startup 进程，负责恢复 WALsender 写到磁盘上的 WAL 日志，把数据 apply 到数据页面上。
异步流复制和同步流复制
一.异步流复制
默认状态下的流复制是以异步方式工作的，也就是说主库写本地数据和 WAL 日志，WALsender 异步的把数据发送给备库，备库收到数据后再异步的做数据恢复。
异步模式可以做到较好的性能，它的劣势是：极端情况下，主库如果当机，被库被激活成主库，部分 WAL 没有发送到备库，可能造成数据丢失。
二.同步流复制
相对于异步模式，PostgreSQL 还支持同步模式的流复制。同模模式可以细分为三级
1. REMOTE_WRITE 保证该事务的所有数据被备库收到（备库收到数据并调用 write 写磁盘，但并未持久化到磁盘）
2. REMOTE_FLUSH 保证该事务的所有数据在备库持久化到磁盘（调用 flush，但只读查询看不到）
3. REMOTE_APPLY 保证该事务的所有数据在备库被恢复到数据页面（恢复进程读取并解析 WAL，再 APPLY 到数据页面，在备库上执行的只读查询能看到数据的变化）
三. 同步流复制源码解析
1. MVCC 机制和数据可见性
简单的说 PostgreSQL ACID 是基于 MVCC 和 WAL 技术。数据的修改过程可以简单描述为
1. 首先 backend 开启是一个事务,获得一个事务号 XID;
2. 在这个事务中对数据的任意修改，都被 XID 标记。
3. 其他 backend 在扫描数据时，会看到被这个 XID 修改过的数据，根据当前的隔离级别，选择对这些数据是否可见（默认的读已提交隔离级别看不到这些数据）。
4. 只有当此 XID 最后被标记成 commit （写 WAL commit log 和写 clog）后，其他的 backend 才能看到这个 XID 修改的数据。
2. 同模流复制的关键点
总结一下，实现流复制的同步模式，关键点在每个事务提交或回滚时，保证它产生的所有数据变化日志，即 WAL 都“同步”到备库。最后一条 WAL commit log 尤为关键。
3. 如何实现同步流复制
铺垫完所有概念和前提技术，我们看看同步模式具体是怎么实现的。以事务提交流程为例：
1. [主库 backend 进程]调用 RecordTransactionCommit 中写 WAL commit log，获得这条日志在在 WAL 中的位置 XLogRecPtr
2. [主库 backend 进程]完成写 WAL 后，进入 SyncRepWaitForLSN 等待 WAL 日志“同步”到备库。具体做法是:在共享内存中创建一个等待队列 SHMQueue 记录 XLogRecPtr，并调动 WaitLatch，让出 CPU 等待被唤醒。
3. [主库 WALsender 进程]相应所有备库的 WALreceiver 拉取 WAL 的请求。把 WAL 发送给所有备库。
4. [备库 WALreceiver 进程]写 WAL 的偏移（LogstreamResult.Write）和持久化 WAL 偏移（LogstreamResult.Flush）记录下来。
5. [备库 startup 进程]不断的恢复数据，把当前恢复到的 WAL 位点放在共享内存 xlogctl->lastReplayedEndRecPtr 中。
6. [备库 WALreceiver 进程]不断通过 r 报文和主库 WALsender 进程同步的状态，即 XLOGWRITELSN XLOGREMOTELSN XLOGAPPLYLSN（XLogWalRcvSendReply）
7. [主库 WALsender 进程]收到备库发送的 r 报文后，检查共享内存中的等待队列 SHMQueue, 根据备库反馈的位点结合 SHMQueue，唤醒那些等待队列中睡眠的 主库 backend 进程（WalSndWaitForWal）。
8. [主库 backend 进程]被唤醒，当前事务成功提交，SQL 执行完成返回给客户端。
===========================================================================================================================
PostgreSQL V12中没有了recovery.conf
从向后兼容的观点来看，PostgreSQL v12中最大的变化是recovery.conf文件中的参数放到了postgresql.conf配置文件中。

放弃recovery.conf
在PG12以前，如果数据目录存在recovery.conf文件，当PG实例启动时将进入恢复模式（recovery或standby）,该文件包含了用于配置恢复的所有参数，例如：
standby_mode：确定这是正常的归档恢复还是standby模式
restore_command：此命令恢复已归档的WAL段
recovery_target*：此参数确定要恢复到的点
primary_conninfo：如何连接到流复制主服务器
长期以来，recovery.conf一直被认为是一个缺陷，因为配置参数分布在多个不同的文件中是不合理的，另外还不能使用ALTER SYSTEM命令对参数进行修改。

从PG12开始，由于该文件不存在，由下面两个新文件进行替换：
recovery.signal：告诉PostgreSQL进入正常的归档恢复
standby.signal：告诉PostgreSQL进入standby模式
如果两个文件都存在，则standby.signal优先。

暂停和恢复从库的wal replay
select pg_wal_replay_pause();

TAKING logical BACKUP FROM SLAVE

select pg_wal_replay_resume();
2 配置
# Install the repository RPM:
sudo yum install -y https://download.postgresql.org/pub/repos/yum/reporpms/EL-7-x86_64/pgdg-redhat-repo-latest.noarch.rpm

# Install PostgreSQL:
sudo yum install -y postgresql13-server

# Optionally initialize the database and enable automatic start:
sudo /usr/pgsql-13/bin/postgresql-13-setup initdb
sudo systemctl enable postgresql-13
sudo systemctl start postgresql-13

环境变量
export PATH=/usr/pgsql-13/bin:$PATH
export PGDATA=/var/lib/postgresql/data

cat /etc/hosts
127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4
::1         localhost localhost.localdomain localhost6 localhost6.localdomain6
10.67.39.58  postgres-1
10.67.39.59  postgres-2

------主库操作
1 初始化数据库
postgresql-setup --initdb

2 在pg_hba.conf增加一行
host    replication     repl            postgres-2              trust

3 修改postgresql.conf
listen_addresses = '*'
synchronous_standby_names = '*'    同步模式的设置
synchronous_commit = on    默认设置，可以用select * from pg_settings where name='synchronous_commit';验证
# - Archiving -
archive_mode = on              
archive_command = 'test ! -f /opt/archivedir/%f && cp %p /opt/archivedir/%f'

4 重启postgresql
5 创建复制用户
create user repl replication LOGIN CONNECTION LIMIT 30 ENCRYPTED PASSWORD 'Foxconn123';

**********************可以简化********************
---------从库操作
从库只安装数据库软件，不进行数据库初始化
/usr/pgsql-13/bin/pg_basebackup --pgdata=$PGDATA --format=p --write-recovery-conf --checkpoint=fast --label=mffb --progress --host=postgres-1 --port=5432 --username=repl
***在PG12之前，-R备份结束之后会自动生成recovery.conf文件，用来做流复制判断主从同步的信息。但是从PG12开始，这个文件已经不需要了。***
***只需要在参数文件postgresql.conf中配置primary_conninfo参数即可。***

修改postgresql.conf， 这个配置文件从主库复制来
primary_conninfo = 'host=10.67.39.58 port=5432 user=repl password=Foxconn123'
primary_slot_name = 'postgres2_slot'

---------主库操作
在主库创建replication slot
***Slots can be created and dropped either via the streaming replication protocol (see Section 53.4) or via SQL functions (see Section 9.27.6).***
select * from pg_create_physical_replication_slot('postgres2_slot');
select slot_name,slot_type,active,wal_status from pg_replication_slots;
**********************可以简化********************
pg_basebackup就能创建复制槽（使用-C），并且复制完后，postgresql.auto.conf有 primary_conninfo和primary_slot_name信息
pg_basebackup -X stream -D /var/lib/pgsql/14/data -h {{ postgresrep_master_address }} -c fast -U repl -R --slot=replicate -C

---------从库操作
systemctl start postgresql-13
如果从库设置正确的话，可以从log里看到
2021-07-14 06:07:25.820 UTC [852] LOG:  started streaming WAL from primary at 0/3000000 on timeline 1

---------在主库再次检查
postgres=# select slot_name,slot_type,active,wal_status from pg_replication_slots;
   slot_name    | slot_type | active | wal_status
----------------+-----------+--------+------------
 standby_slot   | physical  | f      |
 postgres2_slot | physical  | t      | reserved
---------观察进程
从库进程
-bash-4.2$ ps -ef |grep wal
postgres   852 17759  0 06:07 ?        00:00:01 postgres: walreceiver streaming 0/302FA60
主库进程
-bash-4.2$ ps -ef|grep wal
postgres  2481 18063  0 06:07 ?        00:00:00 postgres: walsender repl 10.67.39.59(38252) streaming 0/302FA60

--------主库观察同步状态
postgres=# select * from pg_stat_replication;
-[ RECORD 1 ]----+------------------------------
pid              | 2481
usesysid         | 16384
usename          | repl
application_name | walreceiver
client_addr      | 10.67.39.59
client_hostname  | postgres-2
client_port      | 38252
backend_start    | 2021-07-14 06:07:28.239589+00
backend_xmin     |
state            | streaming
sent_lsn         | 0/4000148
write_lsn        | 0/4000148
flush_lsn        | 0/4000148
replay_lsn       | 0/4000148
write_lag        |
flush_lag        |
replay_lag       |
sync_priority    | 1
sync_state       | sync    同步方式
reply_time       | 2021-07-14 07:05:54.037038+00

--------从库观察同步状态
postgres=# select * from pg_stat_wal_receiver;
-[ RECORD 1 ]---------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
pid                   | 852
status                | streaming
receive_start_lsn     | 0/3000000
receive_start_tli     | 1
written_lsn           | 0/4000148
flushed_lsn           | 0/4000148
received_tli          | 1
last_msg_send_time    | 2021-07-14 07:04:26.345695+00
last_msg_receipt_time | 2021-07-14 07:04:23.79761+00
latest_end_lsn        | 0/4000148
latest_end_time       | 2021-07-14 06:40:52.494625+00
slot_name             | postgres2_slot
sender_host           | postgres-1
sender_port           | 5432
conninfo              | user=repl passfile=/var/lib/pgsql/.pgpass channel_binding=prefer dbname=replication host=postgres-1 port=5432 fallback_application_name=walreceiver sslmode=prefer sslcompression=0 ssl_min_protocol_version=TLSv1.2 gssencmode=prefer krbsrvname=postgres target_session_attrs=any

 ---------测试
 在主库create table, 从库观察
 
postgres=# select pg_is_in_recovery();       主库是f代表false ；备库是t，代表true
 pg_is_in_recovery
-------------------
 t


切归档
[root@postgres-1 archivedir]# ls -lh
total 33M
-rw-------. 1 postgres postgres 16M Jul 13 09:20 000000010000000000000001
-rw-------. 1 postgres postgres 16M Jul 13 09:20 000000010000000000000002
-rw-------. 1 postgres postgres 316 Jul 13 09:20 000000010000000000000002.00000028.backup

postgres=# select pg_switch_wal();
 pg_switch_wal
---------------
 0/302FA78
(1 row)

[root@postgres-1 archivedir]# ls -lh
total 49M
-rw-------. 1 postgres postgres 16M Jul 13 09:20 000000010000000000000001
-rw-------. 1 postgres postgres 16M Jul 13 09:20 000000010000000000000002
-rw-------. 1 postgres postgres 316 Jul 13 09:20 000000010000000000000002.00000028.backup
-rw-------. 1 postgres postgres 16M Jul 14 06:36 000000010000000000000003
或者
postgres=# select * from pg_stat_get_archiver();
-[ RECORD 1 ]------+-----------------------------
archived_count     | 11
last_archived_wal  | 000000010000000000000008
last_archived_time | 2021-07-14 09:07:57.06432+00
failed_count       | 0
last_failed_wal    |
last_failed_time   |
stats_reset        | 2021-07-13 08:26:45.98489+00

postgres=# select pg_switch_wal();
-[ RECORD 1 ]-+----------
pg_switch_wal | 0/901BD78

postgres=# select * from pg_stat_get_archiver();
-[ RECORD 1 ]------+------------------------------
archived_count     | 12
last_archived_wal  | 000000010000000000000009
last_archived_time | 2021-07-15 06:21:10.562539+00
failed_count       | 0
last_failed_wal    |
last_failed_time   |
stats_reset        | 2021-07-13 08:26:45.98489+00

####Rollback from Synchronous to Asynchronous PostgreSQL Replication
Postgresql.conf注释下面两行
#synchronous_standby_names = 'pgsql_0_node_0'
#synchronous_commit = on
And restart the database service.
$ systemctl restart postgresql-13

#逻辑复制
逻辑复制槽with test_decoding插件
postgres=# select * from pg_create_logical_replication_slot('logical_slot','test_decoding');
  slot_name   |    lsn
--------------+------------
 logical_slot | 5/1F24AAB0
(1 row)

postgres=# select * from t6;
 id | age | name
----+-----+------
  1 |  30 | aa
  3 |  30 | c
  4 |  30 | d
  7 |  33 | g
(4 rows)

postgres=# insert into t6 values(8,45,'hh');
INSERT 0 1

postgres=# select * from pg_logical_slot_get_changes('logical_slot',null,null);
    lsn     |   xid   |                                  data
------------+---------+------------------------------------------------------------------------
 5/1F26BB90 | 1647821 | BEGIN 1647821
 5/1F26BB90 | 1647821 | table public.t6: INSERT: id[integer]:8 age[integer]:45 name[text]:'hh'
 5/1F26BD20 | 1647821 | COMMIT 1647821
(3 rows)

postgres=# select * from pg_replication_slots;
-[ RECORD 1 ]-------+---------------
....
-[ RECORD 2 ]-------+---------------
slot_name           | logical_slot
plugin              | test_decoding
slot_type           | logical
datoid              | 14172
database            | postgres
temporary           | f
active              | f
active_pid          |
xmin                |
catalog_xmin        | 1647771
restart_lsn         | 5/1F254B50
confirmed_flush_lsn | 5/1F290648
wal_status          | reserved
safe_wal_size       |

postgres=# select * from pg_drop_replication_slot('logical_slot');
-[ RECORD 1 ]------------+-
pg_drop_replication_slot |



