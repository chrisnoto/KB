Extra：关于MYSQL如何解析查询的额外信息。坏的例子是Using temporary和Using filesort，
意思MYSQL根本不能使用索引，结果是检索会很慢
Range checked for each Record（index map:#）:没有找到理想的索引，因此对于从前面表中来的每一个行组合，
MYSQL检查使用哪个索引，并用它来从表中返回行。这是使用索引的最慢的连接之一

Using filesort: 看到这个的时候，查询就需要优化了。MYSQL需要进行额外的步骤来发现如何对返回的行排序。
它根据连接类型以及存储排序键值和匹配条件的全部行的行指针来排序全部行

Using temporary 看到这个的时候，查询需要优化了。这里，MYSQL需要创建一个临时表来存储结果，
这通常发生在对不同的列集进行ORDER BY上，而不是GROUP BY上

### 死锁默认的处理及查找
When deadlock detection is enabled, InnoDB instantly detects it and rolls back one of the transactions. Otherwise, 
it relies on the innodb_lock_wait_timeout to roll it back. Whatever, you’ll meet the error: “Deadlock found when trying to get lock; 
try restarting transaction”. Note, that even if you don’t run transactions manually it always exists, see how autocommit option works.

If it’s not enough to see the only last deadlock, enable innodb_print_all_deadlocks option and checkout error log:

SET GLOBAL innodb_print_all_deadlocks = 1;


MariaDB [(none)]> set global innodb_print_all_deadlocks='ON';
Query OK, 0 rows affected (0.000 sec)

MariaDB [(none)]> set global innodb_deadlock_detect='ON';
Query OK, 0 rows affected (0.000 sec)

### 安装指定版本的mariadb
[mariadb]
name = MariaDB-10.3.18
#baseurl=http://yum.mariadb.org/10.3.18/centos7-amd64
baseurl=http://archive.mariadb.org/mariadb-10.3.18/yum/centos7-amd64
gpgkey=https://yum.mariadb.org/RPM-GPG-KEY-MariaDB
gpgcheck=0

使用gtid mode
####### empty database ########
change master to master_host = '10.67.38.253', master_user = 'repl', master_password = 'copy', master_port = 3306, master_use_gtid = slave_pos;
start slave;


同步失败, 恢复slave
# on master
set @@global.read_only=1;
# on slave
stop slave;
set @@global.gtid_slave_pos='0-1-46733'
change master to master_host = '10.67.38.252', master_user = 'repl', master_password = 'copy', master_port = 3306, master_use_gtid = slave_pos;
start slave;
# on master
set @@global.read_only=0;

GTID的缺点(限制)
1、不支持非事务引擎;
2、不支持create table ... select 语句复制(主库直接报错);(原理: 会生成两个sql, 一个是DDL创建表SQL, 一个是insert into 插入数据的sql; 由于DDL会导致自动提交, 所以这个sql至少需要两个GTID, 但是GTID模式下, 只能给这个sql生成一个GTID)
3、不允许一个SQL同时更新一个事务引擎表和非事务引擎表;
4、在一个复制组中，必须要求统一开启GTID或者是关闭GTID;
5、开启GTID需要重启 (mysql5.7除外);
6、 开启GTID后，就不再使用原来的传统复制方式;
7、 对于create temporary table 和 drop temporary table语句不支持;
8、不支持sql_slave_skip_counter;
###### mysql partitioning #######
#  mysql -uroot -pFoxconn123 zabbix <partition_call.sql
#  mysql -uroot -pFoxconn123 zabbix <partition_all.sql
#  ./partition.sh


########  maxscale  ##########
docker run -d --name mxs \
-v:/root/maxscale.cnf:/etc/maxscale.cnf.d/my-maxscale.cnf \
-p 8989:8989 \
-p 4006:4006 \
mariadb/maxscale:2.3

# Creating a user account for MaxScale
CREATE USER 'maxscale'@'%' IDENTIFIED BY 'vSTJ456';
GRANT SELECT ON mysql.user TO 'maxscale'@'%';
GRANT SELECT ON mysql.db TO 'maxscale'@'%';
GRANT SELECT ON mysql.tables_priv TO 'maxscale'@'%';
GRANT SELECT ON mysql.roles_mapping TO 'maxscale'@'%';
GRANT SHOW DATABASES ON *.* TO 'maxscale'@'%';
# Creating a monitor user account for MaxScale
CREATE USER 'monitor_user'@'%' IDENTIFIED BY 'my_password';
GRANT REPLICATION CLIENT on *.* to 'monitor_user'@'%';
# If the automatic failover of the MariaDB Monitor will used, the user will require additional grants. 
GRANT SUPER, RELOAD on *.* to 'monitor_user'@'%';

RESET SLAVE makes the slave forget its replication position in the master's binary log. This statement is meant to be used for a clean start. 
It deletes the master.info and relay-log.info files, all the relay log files, and starts a new relay log file.

###### set maxscale passive ########
[root@worker2 ~]# docker exec mxs maxctrl show maxscale |grep passive
│              │     "passive": false,                                                │
[root@worker2 ~]# docker exec mxs maxctrl alter maxscale passive true
OK
[root@worker2 ~]# docker exec mxs maxctrl show maxscale |grep passive
│              │     "passive": true,                                                 │



################# galera 集群 5月2日 整体挂掉#############
故障原因    galear三台节点磁盘100% full
解决过程:
1 先扩容
2 找到能成为primary的db02，  show status like 'wsrep_last_committed'，db02拥有最高的数值， galera_new_cluster
3  db01的mariadb服务无法启动，原因galera同步800G数据肯定超时
 解决  先删除2,3,4月份的监控数据，然后增加override.conf 
 /etc/systemd/system/mariadb.service.d/override.conf
[Service]
TimeoutStartSec=24min
4  db01服务成功启动,  wsrep状态为syncd,  cluster size为2
5 db02的mariadb服务无法启动，提示:
May  4 16:54:09 vstjzabdb03 kernel: mysqld[2365]: segfault at fffffffffffffffb ip 000055950dc5c9d4 sp 00007fc7d462e280 error 5 in mysqld[55950d2bb000+12c4000]
May  5 08:55:46 vstjzabdb03 kernel: mysqld[3446]: segfault at fffffffffffffffb ip 00005605164a89d4 sp 00007fa5a0402280 error 5 in mysqld[560515b07000+12c4000]
怎么重启mariadb服务都会出现段错误，接着进行下面的调试，mariadb意外启动成功
#################### gdb 调试  #######
[root@vstjzabdb03 log]# gdb /usr/sbin/mysqld
GNU gdb (GDB) Red Hat Enterprise Linux 7.6.1-115.el7
Copyright (C) 2013 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "x86_64-redhat-linux-gnu".
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>...
Reading symbols from /usr/sbin/mysqld...Reading symbols from /usr/sbin/mysqld...(no debugging symbols found)...done.
(no debugging symbols found)...done.
Missing separate debuginfos, use: debuginfo-install MariaDB-server-10.3.18-1.el7.centos.x86_64
(gdb) run --defaults-file=/etc/my.cnf.d/server.cnf --datadir=/data/mysql --user=mysql --pid-file=/data/mysql/vstjzabdb03.pid --sock=/data/mysql/mysql.sock --port=3306 --wsrep_start_position=8d212702-f4a8-11e9-a02f-fbab2c96aed2:275806858
Starting program: /usr/sbin/mysqld --defaults-file=/etc/my.cnf.d/server.cnf --datadir=/data/mysql --user=mysql --pid-file=/data/mysql/vstjzabdb03.pid --sock=/data/mysql/mysql.sock --port=3306 --wsrep_start_position=8d212702-f4a8-11e9-a02f-fbab2c96aed2:275806858
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib64/libthread_db.so.1".
2020-05-05 16:07:53 0 [Note] Using unique option prefix 'sock' is error-prone and can break in the future. Please use the full name 'socket' instead.
2020-05-05 16:07:53 0 [Note] /usr/sbin/mysqld (mysqld 10.3.18-MariaDB-log) starting as process 4081 ...
[New Thread 0x7ffff3006700 (LWP 4085)]

########## vstjszbdb01的mariadb无法启动 #########
May 11 13:59:46 vstjzabdb01 sh: 2020-05-11 13:59:44 0 [ERROR] InnoDB: Unable to lock /data/mysql/ibdata1 error: 11
May 11 13:59:46 vstjzabdb01 sh: 2020-05-11 13:59:44 0 [Note] InnoDB: Check that you do not already have another mysqld process using the same InnoDB data or log files.
May 11 13:59:46 vstjzabdb01 sh: 2020-05-11 13:59:44 0 [Note] InnoDB: Unable to open the first data file
May 11 13:59:46 vstjzabdb01 sh: 2020-05-11 13:59:44 0 [ERROR] InnoDB: Operating system error number 11 in a file operation.
May 11 13:59:46 vstjzabdb01 sh: 2020-05-11 13:59:44 0 [ERROR] InnoDB: Error number 11 means 'Resource temporarily unavailable'
May 11 13:59:46 vstjzabdb01 sh: 2020-05-11 13:59:44 0 [Note] InnoDB: Some operating system error numbers are described at https://mariadb.com/kb/en/library/operating-syste
m-error-codes/
May 11 13:59:46 vstjzabdb01 sh: 2020-05-11 13:59:44 0 [ERROR] InnoDB: Cannot open datafile '/data/mysql/ibdata1'
May 11 13:59:46 vstjzabdb01 sh: 2020-05-11 13:59:44 0 [ERROR] InnoDB: Could not open or create the system tablespace. If you tried to add new data files to the system tabl
espace, and it failed here, you should now edit innodb_data_file_path in my.cnf back to what it was, and remove the new ibdata files InnoDB created in this failed attempt.
 InnoDB only wrote those files full of zeros, but did not yet use them in any way. But be careful: do not remove old data files which contain your precious data!
May 11 13:59:46 vstjzabdb01 sh: 2020-05-11 13:59:44 0 [ERROR] InnoDB: Plugin initialization aborted with error Cannot open a file
May 11 13:59:46 vstjzabdb01 sh: 2020-05-11 13:59:45 0 [Note] InnoDB: Starting shutdown...
May 11 13:59:46 vstjzabdb01 sh: 2020-05-11 13:59:46 0 [ERROR] Plugin 'InnoDB' init function returned error.
May 11 13:59:46 vstjzabdb01 sh: 2020-05-11 13:59:46 0 [ERROR] Plugin 'InnoDB' registration as a STORAGE ENGINE failed.
May 11 13:59:46 vstjzabdb01 sh: 2020-05-11 13:59:46 0 [Note] Plugin 'FEEDBACK' is disabled.
May 11 13:59:46 vstjzabdb01 sh: 2020-05-11 13:59:46 0 [ERROR] Unknown/unsupported storage engine: InnoDB
May 11 13:59:46 vstjzabdb01 sh: 2020-05-11 13:59:46 0 [ERROR] Aborting'


#######################Full Cluster Recovery#################

In this scenario, all nodes failed or did not gracefully shutdown. Total loss of quorum occurred and the cluster is not accepting any SQL requests. After a hard crash such as this, 
even if all the nodes come back online the MariaDB service will be unable to start. This is due to the unclean shutdown and none of the nodes were able to do the last commit. 
A Galera cluster can crash in various ways resulting in different methods to recover from a full crash.  

Recovery Based On Highest seqno Value
This method is helpful when there is a slight possibility that at least one node was able to gracefully shutdown during the crash. The node with the latest data will have the highest seqno
 value among all the crashed nodes. We can find the clue in the content of which/var/lib/mysql/grastate.dat will show the value of seqno. Depending on the nature of crash either all of the
 nodes will have identical negative seqno value or one of the nodes will have the highest positive seqno value.

Following shows the content of grastate.dat in node 3. This node has negative seqno and no group ID. This the case when a node crashes during Data Definition Language (DDL) processing:

$ cat /var/lib/mysql/grastate.dat
# GALERA saved state
version: 2.1
uuid: 00000000-0000-0000-0000-000000000000
seqno: -1
safe_to_bootstrap: 0
Following shows the content of grastate.dat in node 2. This node crashed during transaction processing resulting in negative seqno but with group ID:

$ cat /var/lib/mysql/grastate.dat
# GALERA saved state
version: 2.1
uuid: 886dd8da-3d07-11e8-a109-8a3c80cebab4
seqno: -1
safe_to_bootstrap: 0
Following is the content of grastate.dat on node 1 with highest seqno value:

$ cat /var/lib/mysql/grastate.dat
# GALERA saved state
version: 2.1
uuid: 886dd8da-3d07-11e8-a109-8a3c80cebab4
seqno: 31929
safe_to_bootstrap: 1
Note that a node will only have positive highest seqno value when the node was able to gracefully shutdown. This is the node need to be recovered first.

If all the nodes contain the value of -1 for seqno and 0 for safe_to_bootstrap, that is an indication that a full cluster crash has occurred. At this point, 
we could start the cluster using the command galera_new_cluster. But it is not recommended at all since there is no way to know that each node has an identical copy of the database data. 

Before restarting the node 1 we need to make a change in the cluster configuration file /etc/my.cnf.d/server.cnf to remove the mention of IPs of cluster nodes. 
Following is the content of [galera] section of the configuration before any changes:

[galera]
# Mandatory settings
wsrep_on=ON
wsrep_provider=/usr/lib64/galera/libgalera_smm.so
wsrep_cluster_address="gcomm://10.0.0.51,10.0.0.52,10.0.0.53"
wsrep_cluster_name='galeraCluster01'
wsrep_node_address='10.0.0.51'
wsrep_node_name='galera-01'
wsrep_sst_method=rsync
binlog_format=row
default_storage_engine=InnoDB
innodb_autoinc_lock_mode=2
Note that wsrep_cluster_address shows the IP of all member nodes. We need to remove the addresses as follows:

wsrep_cluster_address="gcomm://"
We can now restart the mariadb service in this node:

$ systemctl restart mariadb
 Only after verifying that the service started successfully we can proceed to restart services on the other nodes one at a time. Only after all nodes are successfully running,
 we need to edit the cluster configuration on node 1 to add the IP addresses of all the member nodes and restart the service:

wsrep_cluster_address="gcomm://10.8.8.53,10.8.8.54,10.8.8.55"
The Galera cluster should be up and running at this point and all nodes should be syncing with the surviving node.  

Recovery Based On Last Committed
This is the worst case scenario of a Galera cluster crash where all nodes have completely crashed resulting seqno value of -1. As mentioned earlier, resist the temptation of 
running the command galera_new_cluster on a node then trying to rejoin rest of the nodes to the cluster before checking which node has the latest commit. When galera_new_cluster command
 is used, it actually creates a new cluster with a new set of IDs then all other nodes join into it starting clean sync. 

To check which node has the last commit we can check the value of wsrep_last_commit on each node separately. The node with the highest value is the one with the latest commit. 
We can bootstrap that node to start the cluster then join other member nodes. This process is similar to bootstraping the node with highest seqno as we have seen in the previous section. 

Stop mariadb service:

$ systemctl stop mariadb
Edit wsrep_cluster_address in [galera] section of /etc/my.cnf.d/server.cnf to remove mention of member nodes:

wsrep_cluster_address="gcomm://"
Restart mariadb service:

$ systemctl start mariadb
From database shell check the last committed value:

MariaDB [(none)]> show status like 'wsrep_last_committed';
+----------------------+---------+
| Variable_name | Value |
+----------------------+---------+
| wsrep_last_committed | 319589 |
+----------------------+---------+
1 row in set (0.01 sec)
Repeat the process on all nodes to retrieve the last committed value. The node with the latest data will have the highest value. Create a new cluster on the node with the highest committed value:

$ galera_new_cluster
Change the value of wsrep_cluster_address on rest of the nodes to mention IP addresses, then restart mariadb service one node at a time. The cluster should be up and running and data sync 
should commit all the changes. Check the last committed value on all nodes after a while to ensure nodes are now in sync. 

### binlog的删除
MariaDB [(none)]> purge binary logs before '2022-02-01 08:37:42';
Query OK, 0 rows affected (1.781 sec)


###### 容器版mariadb升级######
开启mariadb 10.3.34的容器并导入数据
[root@chens01 ~]# cat grafanadb.sh
docker run -d \
 --name grafana_db \
 -p 3306:3306 \
 -e 'TZ=Asia/Shanghai' \
 -e MARIADB_ROOT_PASSWORD="vSTJ456" \
 -v /data/mysql:/data/mysql \
 mariadb:10.3.34 \
 --character-set-server=utf8 \
 --collation-server=utf8_bin \
 --datadir=/data/mysql \
 --socket=/data/mysql/mysql.sock \
 --default-storage-engine=InnoDB \
 --innodb-autoinc-lock-mode=2 \
 --log-error=/data/mysql/error.log \
 --skip-name-resolve
 
导入数据：
mysql -h10.66.13.27 -uroot -p < mariadb_bk/xtjprometheus02_dbbackup_20230704.sql 

升级10.3.34 到 10.6.14版本
##安全关闭mariadb
 
#innodb_fast_shutdown有3个值：
默认是1 可选0 1 2
支持全动态局设置
使用场景：在做数据库关闭升级的时候 set  global innodb_fast_shutdown=0，这个时候能最大保障数据的完整性。

设置为1：关闭MySQL的时候不会做清除脏页和插入缓冲区的合并操作，也不会将脏页刷新到磁盘

设置为0：会做清除脏页和插入缓冲区的合并操作，也会将脏页全部刷新到磁盘上面去，但是这个时候关闭的速度也是最慢的

设置为2：不会做清除脏页和插入缓冲区的合并操作，也不会将脏页刷新到磁盘，但是会刷新到redo log里面，再下次启动mysql的时候恢复

MariaDB [(none)]> select @@innodb_fast_shutdown;
+------------------------+
| @@innodb_fast_shutdown |
+------------------------+
|                      1 |
+------------------------+
1 row in set (0.000 sec)

MariaDB [(none)]> set global innodb_fast_shutdown=0;   
Query OK, 0 rows affected (0.000 sec)

MariaDB [(none)]> select @@innodb_fast_shutdown;
+------------------------+
| @@innodb_fast_shutdown |
+------------------------+
|                      0 |
+------------------------+
1 row in set (0.000 sec)

MariaDB [(none)]> Bye
[root@chens01 ~]# docker stop grafana_db
grafana_db

[root@chens01 ~]# docker rm -f grafana_db
grafana_db

如果不做上面fast shutdown的设置，直接docker rm -f 容器的话，会报如下错误
[ERROR] InnoDB: Upgrade after a crash is not supported. The redo log was created with MariaDB 10.3.34. You must start up and shut down MariaDB 10.4 or earlier on the data directory.


[root@chens01 ~]# cat grafanadb.sh
docker run -d \
 --name grafana_db \
 -p 3306:3306 \
 -e 'TZ=Asia/Shanghai' \
 -e MARIADB_ROOT_PASSWORD="vSTJ456" \
 -v /data/mysql:/data/mysql \
 mariadb:10.6.14 \
 --character-set-server=utf8 \
 --collation-server=utf8_bin \
 --datadir=/data/mysql \
 --socket=/data/mysql/mysql.sock \
 --default-storage-engine=InnoDB \
 --innodb-autoinc-lock-mode=2 \
 --log-error=/data/mysql/error.log \
 --skip-name-resolve

开启10.6.14的容器，执行升级  需要带变量MARIADB_AUTO_UPGRADE=1 （可以不用变量，mariadb-upgrade识别不到改变路径的mysql.sock，依然指向/run/mysqld/mysql.sock）
./grafanadb.sh

手动执行mariadb-upgrade
[root@chens01 ~]# docker exec -it grafana_db bash
root@3258741ffa85:/# mariadb-upgrade -S /data/mysql/mysql.sock -uroot -p
Enter password:
Major version upgrade detected from 10.3.34-MariaDB to 10.6.14-MariaDB. Check required!
Phase 1/7: Checking and upgrading mysql database
Processing databases
mysql
mysql.column_stats                                 OK
mysql.columns_priv                                 OK
mysql.db                                           OK
mysql.event                                        OK
mysql.func                                         OK
mysql.gtid_slave_pos                               OK
mysql.help_category                                OK
mysql.help_keyword                                 OK
mysql.help_relation                                OK
mysql.help_topic                                   OK
mysql.host                                         OK
mysql.index_stats                                  OK
mysql.innodb_index_stats                           OK
mysql.innodb_table_stats                           OK
mysql.plugin                                       OK
mysql.proc                                         OK
mysql.procs_priv                                   OK
mysql.proxies_priv                                 OK
mysql.roles_mapping                                OK
mysql.servers                                      OK
mysql.table_stats                                  OK
mysql.tables_priv                                  OK
mysql.time_zone                                    OK
mysql.time_zone_leap_second                        OK
mysql.time_zone_name                               OK
mysql.time_zone_transition                         OK
mysql.time_zone_transition_type                    OK
mysql.transaction_registry                         OK
mysql.user                                         OK
Phase 2/7: Installing used storage engines... Skipped
Phase 3/7: Fixing views
Phase 4/7: Running 'mysql_fix_privilege_tables'
Phase 5/7: Fixing table and database names
Phase 6/7: Checking and upgrading tables
Processing databases
alert_api
alert_api.alert                                    OK
grafana
grafana.alert                                      OK
grafana.alert_configuration                        OK
grafana.alert_image                                OK
grafana.alert_instance                             OK
grafana.alert_notification                         OK
grafana.alert_notification_state                   OK
grafana.alert_rule                                 OK
grafana.alert_rule_tag                             OK
grafana.alert_rule_version                         OK
grafana.annotation                                 OK
grafana.annotation_tag                             OK
grafana.api_key                                    OK
grafana.builtin_role                               OK
grafana.cache_data                                 OK
grafana.dashboard                                  OK
grafana.dashboard_acl                              OK
grafana.dashboard_provisioning                     OK
grafana.dashboard_public_config                    OK
grafana.dashboard_snapshot                         OK
grafana.dashboard_tag                              OK
grafana.dashboard_version                          OK
grafana.data_keys                                  OK
grafana.data_source                                OK
grafana.entity_event                               OK
grafana.file                                       OK
grafana.file_meta                                  OK
grafana.kv_store                                   OK
grafana.library_element                            OK
grafana.library_element_connection                 OK
grafana.login_attempt                              OK
grafana.migration_log                              OK
grafana.ngalert_configuration                      OK
grafana.org                                        OK
grafana.org_user                                   OK
grafana.permission                                 OK
grafana.playlist                                   OK
grafana.playlist_item                              OK
grafana.plugin_setting                             OK
grafana.preferences                                OK
grafana.provenance_type                            OK
grafana.query_history                              OK
grafana.query_history_star                         OK
grafana.quota                                      OK
grafana.role                                       OK
grafana.secrets                                    OK
grafana.seed_assignment                            OK
grafana.server_lock                                OK
grafana.session                                    OK
grafana.short_url                                  OK
grafana.star                                       OK
grafana.tag                                        OK
grafana.team                                       OK
grafana.team_member                                OK
grafana.team_role                                  OK
grafana.temp_user                                  OK
grafana.test_data                                  OK
grafana.user                                       OK
grafana.user_auth                                  OK
grafana.user_auth_token                            OK
grafana.user_role                                  OK
information_schema
performance_schema
sys
sys.sys_config                                     OK
Phase 7/7: Running 'FLUSH PRIVILEGES'
OK

再执行一遍，确认已经升级完毕
root@3258741ffa85:/# mariadb-upgrade -S /data/mysql/mysql.sock -uroot -pvSTJ456
This installation of MariaDB is already upgraded to 10.6.14-MariaDB.
There is no need to run mysql_upgrade again for 10.6.14-MariaDB.

[root@chens01 ~]# mysql -h10.66.13.27 -uroot -p -e 'select @@event_scheduler'
Enter password:
+-------------------+
| @@event_scheduler |
+-------------------+
| OFF               |
+-------------------+
[root@chens01 ~]# mysql -h10.66.13.27 -uroot -p
Enter password:
Welcome to the MariaDB monitor.  Commands end with ; or \g.
Your MariaDB connection id is 19
Server version: 10.6.14-MariaDB-1:10.6.14+maria~ubu2004 mariadb.org binary distribution

Copyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others.

Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.

MariaDB [(none)]> set global event_scheduler=on;
Query OK, 0 rows affected (0.000 sec)

MariaDB [(none)]> select @@event_scheduler;
+-------------------+
| @@event_scheduler |
+-------------------+
| ON                |
+-------------------+
1 row in set (0.000 sec)

# mysql的connect引擎
create table linux2 (
targets varchar(256) jpath='$.targets[*]',
area char(2) jpath='$.labels.area',
team char(10) jpath='$.labels.team',
job char(20) jpath='$.labels.job',
servicetype char(10) jpath='$.labels.service_type')
engine=CONNECT table_type=BSON File_name='linux.json';

create table hostemail (
name varchar(256) jpath='$.email[*].name',
sa_receiver char(20) jpath='$.email[*].receivers[*].sa_receiver',
mail char(40) jpath='$.email[*].receivers[*].mail',
fixed_phone char(20) jpath='$.email[*].receivers[*].fixed_phone',
mobile_phone char(20) jpath='$.email[*].receivers[*].mobile_phone')
engine=CONNECT table_type=JSON File_name='host_email.json';



DECLARE @ThresholdSeconds INT = 5;

SELECT TOP 10
    t.text AS query_text,
    qs.total_worker_time / 1000000.0 AS total_worker_time_seconds,
    qs.execution_count
FROM 
    sys.dm_exec_query_stats qs
CROSS APPLY 
    sys.dm_exec_sql_text(qs.sql_handle) t
WHERE 
    qs.total_worker_time / 1000000.0 >= @ThresholdSeconds
ORDER BY 
    qs.total_worker_time DESC;