########nginx 会话保持#######
1 ip_hash
IP哈希存在一个比较严重缺陷，即：客户端必须能够直连Nginx服务器，他们之间不能再插入其它层级，否则Nginx就识别不到客户端的IP了
2 第三方模块 nginx-sticky-module
2012年之后就没更新了 ，nginx-1.12.1都不支持了
nginx-sticky-module-1.1.tar.gz	nginx-sticky-module-1.1  Type-Source  Featured	Sep 25, 2012
3 商业版 nginx plus 的cookie insertion
4 第三方模块 nginx-sticky-module-ng   生成环境要多测试  网上有不推荐的
haproxy对会话保持支持非常好
######nginx平滑重启######
[root@localhost conf.d]# ps -ef |grep nginx
root      2029     1  0 13:15 ?        00:00:00 nginx: master process /usr/sbin/nginx -c /etc/nginx/nginx.conf
nginx     2031  2029  0 13:15 ?        00:00:00 nginx: worker process
root      2075  1869  0 13:33 pts/2    00:00:00 grep nginx
[root@localhost conf.d]# kill -HUP 2029
[root@localhost conf.d]# ps -ef |grep nginx
root      2029     1  0 13:15 ?        00:00:00 nginx: master process /usr/sbin/nginx -c /etc/nginx/nginx.conf
nginx     2031  2029  0 13:15 ?        00:00:00 nginx: worker process is shutting down
nginx     2076  2029  0 13:33 ?        00:00:00 nginx: worker process
root      2078  1869  0 13:33 pts/2    00:00:00 grep nginx
[root@localhost conf.d]# ps -ef |grep nginx
root      2029     1  0 13:15 ?        00:00:00 nginx: master process /usr/sbin/nginx -c /etc/nginx/nginx.conf
nginx     2076  2029  0 13:33 ?        00:00:00 nginx: worker process
root      2086  1869  0 13:34 pts/2    00:00:00 grep nginx

配置并强化SSL终止后，完整的配置文件将如下所示：

/etc/nginx/sites-available/ example.com

upstream mywebapp1 {
    server 10.130.227.11;
    server 10.130.227.22;
}

server {
    listen 80;
    listen 443 ssl;
    server_name example.com www.emxaple.com;

    ssl on;
    ssl_certificate         /etc/nginx/ssl/example.com/server.crt;
    ssl_certificate_key     /etc/nginx/ssl/example.com/server.key;
    ssl_trusted_certificate /etc/nginx/ssl/example.com/ca-certs.pem;

    ssl_session_cache shared:SSL:20m;
    ssl_session_timeout 10m;

    ssl_prefer_server_ciphers       on;
    ssl_protocols                   TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers                     ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:ECDH+3DES:DH+3DES:RSA+AESGCM:RSA+AES:RSA+3DES:!aNULL:!MD5:!DSS;

    add_header Strict-Transport-Security "max-age=31536000";

    location / {
        proxy_pass http://mywebapp1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}

# 安全类的header
X-Frame-Options 用来告诉浏览器，页面能不能以 frame、 iframe、 object 形式嵌套在其他站点中，用来避免点击劫持(clickjacking)攻击。
例如用下面代码将百度以 iframe 嵌入到自己的站点，然后监听 iframe 事件做些其他事情，用户如果不看URL估计以为自己在用百度。

<iframe src="https://www.baidu.com/" width="100%" height="100%" frameborder="no"></iframe>

举例： 允许nginx嵌入后端grafana的监控panel
1 nginx前端配置
X-XSS-Protection: 0
X-Frame-Options: ALLOW-FROM http://10.67.50.237:3000

2 以下代码将grafana panel以iframe嵌入到静态页面
<iframe src="http://10.67.50.237:3000/d-solo/SIwpPZiVk/elasticsearch_v2?orgId=1&panelId=53" width="450" height="200" frameborder="0"></iframe>


X-XSS-Protection
用于处理跨站脚本攻击 (XSS)。

可选值：

0：禁止XSS过滤
1：启用XSS过滤。 如果检测到跨站脚本攻击，浏览器将清除页面中不安全的部分，但页面仍然可以访问。
1;mode=block：启用XSS过滤。 如果检测到攻击，浏览器将直接阻止页面加载。

# 反向代理grafana  以uri方式
  grafana:
    image: grafana/grafana:latest
    volumes:
      - ~/prometheus-grafana/grafana/provisioning:/etc/grafana/provisioning
      - /opt/grafana/data:/var/lib/grafana
    ports:
      - 3000:3000
    environment:
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Viewer
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_BASIC_ENABLED=false
      - GF_ENABLE_GZIP=true
      - GF_SERVER_ROOT_URL=/grafana
      - GF_SERVER_SERVE_FROM_SUB_PATH=true
      - GF_USERS_DEFAULT_THEME=light
      - GF_SECURITY_ALLOW_EMBEDDING=true

nginx配置：	  
     location /grafana/ {
         proxy_set_header Host $http_host;
         proxy_pass http://10.67.50.237:3000;
     }

######## http -> https ######
server {
listen 80;
listen 443 ssl;

server_name domain.tld www.domain.tld;

# global HTTP handler
if ($scheme = http) {
        return 301 https://www.domain.tld$request_uri;
}
#### Redirect All HTTP traffic
server {
  listen 80 default_server;
  listen [::]:80 default_server;
  server_name _;
  return 301 https://$host$request_uri;
}
##########Nginx Redirect HTTP To HTTPS
Now that you configured and installed an SSL certificate for Nginx, it is time to drop all HTTP traffic and send users to HTTPS version. Edit nginx.conf file:
sudo vi /etc/nginx/nginx.conf

if ($host ~* ^(example\.com|www\.example\.com)$ ){
  rewrite  ^/(.*)$  https://example.com/$1  permanent;
}
OR better use the following rewrite:
rewrite  ^ https://$server_name$request_uri? permanent;

Or use new syntax (recommended):
return         301 https://$server_name$request_uri;

####### buffer 和 cache #########
在代理过程中，两个连接速度不一致会对客户端的体验带来不良的影响：
   从客户端到代理服务器的连接
   从代理服务器到后端服务器的连接
buffer（缓冲） 帮助减轻后端服务器负担，达到处理更多 request的目的
Nginx 还提供cache功能来缓存来自后端服务器的内容，减少要连接 upstream 的次数。

######## $request_uri 判断 反向代理路径 ######
Here is a sample test case I had set before posting this answer.

events {
    worker_connections  1024;
}
http {
server {
   listen 80;

   location /test1 {
     proxy_pass http://127.0.0.1:81;
   }

   location /test2 {
     proxy_pass http://127.0.0.1:81/;
   }

   location /test3/ {
     proxy_pass http://127.0.0.1:81;
   }

   location /test4/ {
     proxy_pass http://127.0.0.1:81/;
   }

}

server {
   listen 81;

   location / {
     echo "$request_uri";
   }
}
}
Now the results explains the difference between all 4 location blocks

$ curl http://192.168.33.100/test1/abc/test
/test1/abc/test

$ curl http://192.168.33.100/test2/abc/test
//abc/test

$ curl http://192.168.33.100/test3/abc/test
/test3/abc/test

$ curl http://192.168.33.100/test4/abc/test
/abc/test
As you can see in /test4 url the proxied server only sees /abc/test

######### /app1 -> backend #######
                location /app1/ {
                    proxy_set_header Host $http_host/app1;
                    proxy_set_header X-Real-IP $remote_addr;
                    proxy_set_header X-Scheme $scheme;
                    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto $scheme;
                    proxy_redirect    off;
                    add_header Pragma "no-cache";
                    add_header Cache-Control "no-cache";

                    proxy_pass http://internal.ip:port/;
                    sub_filter 'action="/'  'action="/app1/';
                    sub_filter 'href="/'  'href="/app1/';
                    sub_filter 'src="/'  'src="/app1/';
                    sub_filter_once off;
            }

# 亦驰nginx配置			
user  nobody nobody;
worker_processes auto;
worker_cpu_affinity auto;
worker_rlimit_nofile 102400;

error_log  /var/log/nginx/error.log;
pid        /var/run/nginx.pid;

events {
   use epoll;
   worker_connections  65535;
}

http {
       server_tokens off;
       server_info off;
       server_tag FOXCONN_LB;
       sendfile on;
       keepalive_timeout  45;

       include mime.types;
       default_type  application/octet-stream;
       add_header LB_NODE $hostname;

       log_format  main  '$http_host $remote_addr ${request_time}s $upstream_addr [$time_local] '
                          '"$request" $status $body_bytes_sent '
                          '"$http_referer" "$http_user_agent"';

       log_format mainjson '{"@timestamp":"$time_iso8601",'
                        '"host":"$hostname",'
                        '"server_ip":"$server_addr",'
                        '"client_ip":"$remote_addr",'
                        '"xff":"$http_x_forwarded_for",'
                        '"domain":"$host",'
                        '"url":"$uri",'
                        '"referer":"$http_referer",'
                        '"args":"$args",'
                        '"upstreamtime":"$upstream_response_time",'
                        '"responsetime":"$request_time",'
                        '"request_method":"$request_method",'
                        '"status":"$status",'
                        '"size":"$body_bytes_sent",'
                        '"request_body":"$request_body",'
                        '"request_length":"$request_length",'
                        '"protocol":"$server_protocol",'
                        '"upstreamhost":"$upstream_addr",'
                        '"file_dir":"$request_filename",'
                        '"http_user_agent":"$http_user_agent"'
                        '}';

       access_log off;

       client_header_buffer_size 4k;
       large_client_header_buffers 8 4k;
       client_max_body_size 8m;
       server_names_hash_max_size 512;
       server_names_hash_bucket_size 128;
       req_status_zone server "$server_name" 30M;
       req_status server;

       client_header_timeout 30s;
       client_body_timeout 60s;
       send_timeout 60s;

       lingering_close off;
       underscores_in_headers on;
       resolver_timeout 3s;

       proxy_http_version 1.1;
       check_shm_size 30M;

       proxy_buffering on;
       proxy_buffer_size 8k;
       proxy_buffers 256 8k;
       proxy_busy_buffers_size 128k;

       proxy_connect_timeout 120s;
       proxy_send_timeout 120s;
       proxy_read_timeout 120s;
       proxy_ignore_client_abort on;

server {
        listen       81;
        server_name  status-localhost localhost;

        location / {
                        return 403;
        }
        location /nginx_status {
                        stub_status on;
                        access_log   off;
                        allow 10.0.0.0/8;
                        allow 127.0.0.1/32;
                        deny all;
        }
        location /nginx_counter {
                        req_status_show server;
                        access_log   off;
                        allow 10.0.0.0/8;
                        allow 127.0.0.1/32;
                        deny all;
        }
        location /check_status {
                        check_status;
                        access_log   off;
                        allow 10.0.0.0/8;
                        allow 127.0.0.1/32;
                        deny all;
        }
}

       include conf.d/*.conf;

}

[root@xtjnginx01 conf]# /usr/local/nginx/sbin/nginx -V
Tengine version: Tengine/2.3.3
nginx version: nginx/1.18.0
built by gcc 4.8.5 20150623 (Red Hat 4.8.5-44) (GCC)
built with OpenSSL 1.1.1k  25 Mar 2021
TLS SNI support enabled
configure arguments: --prefix=/usr/local/nginx --user=nobody --group=nobody --with-cc-opt=-I/usr/local/openssl/include/ --with-ld-opt=-L/usr/local/openssl/lib/ --with-http_sub_module --with-http_stub_status_module --with-http_realip_module --with-http_ssl_module --with-http_v2_module --with-http_gzip_static_module --with-stream --with-stream_realip_module --with-stream=dynamic --add-module=./modules/ngx_http_upstream_check_module --add-module=./modules/ngx_http_upstream_consistent_hash_module --add-module=./modules/ngx_http_reqstat_module --add-module=./modules/ngx_http_upstream_dynamic_module --add-module=./modules/ngx_http_upstream_dyups_module --add-module=./modules/ngx_http_upstream_session_sticky_module --add-module=./modules/ngx_http_user_agent_module --add-module=./modules/ngx_slab_stat --add-module=./modules/ngx_http_lua_module --with-pcre=/usr/local/src/pcre-8.45 --with-jemalloc
			