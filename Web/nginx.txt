########nginx 会话保持#######
1 ip_hash
IP哈希存在一个比较严重缺陷，即：客户端必须能够直连Nginx服务器，他们之间不能再插入其它层级，否则Nginx就识别不到客户端的IP了
2 第三方模块 nginx-sticky-module
2012年之后就没更新了 ，nginx-1.12.1都不支持了
nginx-sticky-module-1.1.tar.gz	nginx-sticky-module-1.1  Type-Source  Featured	Sep 25, 2012
3 商业版 nginx plus 的cookie insertion
4 第三方模块 nginx-sticky-module-ng   生成环境要多测试  网上有不推荐的
haproxy对会话保持支持非常好
######nginx平滑重启######
[root@localhost conf.d]# ps -ef |grep nginx
root      2029     1  0 13:15 ?        00:00:00 nginx: master process /usr/sbin/nginx -c /etc/nginx/nginx.conf
nginx     2031  2029  0 13:15 ?        00:00:00 nginx: worker process
root      2075  1869  0 13:33 pts/2    00:00:00 grep nginx
[root@localhost conf.d]# kill -HUP 2029
[root@localhost conf.d]# ps -ef |grep nginx
root      2029     1  0 13:15 ?        00:00:00 nginx: master process /usr/sbin/nginx -c /etc/nginx/nginx.conf
nginx     2031  2029  0 13:15 ?        00:00:00 nginx: worker process is shutting down
nginx     2076  2029  0 13:33 ?        00:00:00 nginx: worker process
root      2078  1869  0 13:33 pts/2    00:00:00 grep nginx
[root@localhost conf.d]# ps -ef |grep nginx
root      2029     1  0 13:15 ?        00:00:00 nginx: master process /usr/sbin/nginx -c /etc/nginx/nginx.conf
nginx     2076  2029  0 13:33 ?        00:00:00 nginx: worker process
root      2086  1869  0 13:34 pts/2    00:00:00 grep nginx

配置并强化SSL终止后，完整的配置文件将如下所示：

/etc/nginx/sites-available/ example.com

upstream mywebapp1 {
    server 10.130.227.11;
    server 10.130.227.22;
}

server {
    listen 80;
    listen 443 ssl;
    server_name example.com www.emxaple.com;

    ssl on;
    ssl_certificate         /etc/nginx/ssl/example.com/server.crt;
    ssl_certificate_key     /etc/nginx/ssl/example.com/server.key;
    ssl_trusted_certificate /etc/nginx/ssl/example.com/ca-certs.pem;

    ssl_session_cache shared:SSL:20m;
    ssl_session_timeout 10m;

    ssl_prefer_server_ciphers       on;
    ssl_protocols                   TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers                     ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:ECDH+3DES:DH+3DES:RSA+AESGCM:RSA+AES:RSA+3DES:!aNULL:!MD5:!DSS;

    add_header Strict-Transport-Security "max-age=31536000";

    location / {
        proxy_pass http://mywebapp1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}

######## http -> https ######
server {
listen 80;
listen 443 ssl;

server_name domain.tld www.domain.tld;

# global HTTP handler
if ($scheme = http) {
        return 301 https://www.domain.tld$request_uri;
}
#### Redirect All HTTP traffic
server {
  listen 80 default_server;
  listen [::]:80 default_server;
  server_name _;
  return 301 https://$host$request_uri;
}
##########Nginx Redirect HTTP To HTTPS
Now that you configured and installed an SSL certificate for Nginx, it is time to drop all HTTP traffic and send users to HTTPS version. Edit nginx.conf file:
sudo vi /etc/nginx/nginx.conf

if ($host ~* ^(example\.com|www\.example\.com)$ ){
  rewrite  ^/(.*)$  https://example.com/$1  permanent;
}
OR better use the following rewrite:
rewrite  ^ https://$server_name$request_uri? permanent;

Or use new syntax (recommended):
return         301 https://$server_name$request_uri;

####### buffer 和 cache #########
在代理过程中，两个连接速度不一致会对客户端的体验带来不良的影响：
   从客户端到代理服务器的连接
   从代理服务器到后端服务器的连接
buffer（缓冲） 帮助减轻后端服务器负担，达到处理更多 request的目的
Nginx 还提供cache功能来缓存来自后端服务器的内容，减少要连接 upstream 的次数。

######## $request_uri 判断 反向代理路径 ######
Here is a sample test case I had set before posting this answer.

events {
    worker_connections  1024;
}
http {
server {
   listen 80;

   location /test1 {
     proxy_pass http://127.0.0.1:81;
   }

   location /test2 {
     proxy_pass http://127.0.0.1:81/;
   }

   location /test3/ {
     proxy_pass http://127.0.0.1:81;
   }

   location /test4/ {
     proxy_pass http://127.0.0.1:81/;
   }

}

server {
   listen 81;

   location / {
     echo "$request_uri";
   }
}
}
Now the results explains the difference between all 4 location blocks

$ curl http://192.168.33.100/test1/abc/test
/test1/abc/test

$ curl http://192.168.33.100/test2/abc/test
//abc/test

$ curl http://192.168.33.100/test3/abc/test
/test3/abc/test

$ curl http://192.168.33.100/test4/abc/test
/abc/test
As you can see in /test4 url the proxied server only sees /abc/test

######### /app1 -> backend #######
                location /app1/ {
                    proxy_set_header Host $http_host/app1;
                    proxy_set_header X-Real-IP $remote_addr;
                    proxy_set_header X-Scheme $scheme;
                    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto $scheme;
                    proxy_redirect    off;
                    add_header Pragma "no-cache";
                    add_header Cache-Control "no-cache";

                    proxy_pass http://internal.ip:port/;
                    sub_filter 'action="/'  'action="/app1/';
                    sub_filter 'href="/'  'href="/app1/';
                    sub_filter 'src="/'  'src="/app1/';
                    sub_filter_once off;
            }