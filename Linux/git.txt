git guide reference  https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/0013743256916071d599b3aed534aaab22a0db6c4e07fd0000

git config --global http.proxy 10.67.124.99:808
git config --global https.proxy 10.67.124.99:808


##################撤销修改
场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。

场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作。
git reset HEAD file
git checkout -- file
场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考”版本回退“一节，不过前提是没有推送到远程库。

####################版本回退
首先，Git必须知道当前版本是哪个版本，在Git中，用HEAD表示当前版本，也就是最新的提交3628164...882e1e0（注意我的提交ID和你的肯定不一样），
上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100。
回退到上一个版本：  git reset --hard HEAD^
$ git reflog
ea34578 HEAD@{0}: reset: moving to HEAD^
3628164 HEAD@{1}: commit: append GPL
ea34578 HEAD@{2}: commit: add distributed
cb926e7 HEAD@{3}: commit (initial): wrote a readme file
回退到指定版本：  git reset --hard 3628164
HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset --hard commit_id。
穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。
要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。

###################删除和恢复
在Git中，删除也是一个修改操作，我们实战一下，先添加一个新文件test.txt到Git并且提交：

$ git add test.txt
$ git commit -m "add test.txt"
[master 94cdc44] add test.txt
 1 file changed, 1 insertion(+)
 create mode 100644 test.txt
一般情况下，你通常直接在文件管理器中把没用的文件删了，或者用rm命令删了：

$ rm test.txt
这个时候，Git知道你删除了文件，因此，工作区和版本库就不一致了，git status命令会立刻告诉你哪些文件被删除了：

$ git status
# On branch master
# Changes not staged for commit:
#   (use "git add/rm <file>..." to update what will be committed)
#   (use "git checkout -- <file>..." to discard changes in working directory)
#
#       deleted:    test.txt
#
no changes added to commit (use "git add" and/or "git commit -a")
现在你有两个选择，一是确实要从版本库中删除该文件，那就用命令git rm删掉，并且git commit：

$ git rm test.txt
rm 'test.txt'
$ git commit -m "remove test.txt"
[master d17efd8] remove test.txt
 1 file changed, 1 deletion(-)
 delete mode 100644 test.txt
现在，文件就从版本库中被删除了。

另一种情况是删错了，因为版本库里还有呢，所以可以很轻松地把误删的文件恢复到最新版本：

$ git checkout -- test.txt
git checkout其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。

###############git branch###########
首先，我们创建dev分支，然后切换到dev分支：

$ git checkout -b dev
Switched to a new branch 'dev'
git checkout命令加上-b参数表示创建并切换，相当于以下两条命令：

$ git branch dev
$ git checkout dev
Switched to branch 'dev'
然后，用git branch命令查看当前分支：

$ git branch
* dev
  master
git branch命令会列出所有分支，当前分支前面会标一个*号。

然后，我们就可以在dev分支上正常提交，比如对readme.txt做个修改，加上一行：

Creating a new branch is quick.
然后提交：

$ git add readme.txt 
$ git commit -m "branch test"
[dev fec145a] branch test
 1 file changed, 1 insertion(+)
现在，dev分支的工作完成，我们就可以切换回master分支：

$ git checkout master
Switched to branch 'master'
切换回master分支后，再查看一个readme.txt文件，刚才添加的内容不见了！因为那个提交是在dev分支上，而master分支此刻的提交点并没有变：
现在，我们把dev分支的工作成果合并到master分支上：

$ git merge dev
Updating d17efd8..fec145a
Fast-forward
 readme.txt |    1 +
 1 file changed, 1 insertion(+)
git merge命令用于合并指定分支到当前分支。合并后，再查看readme.txt的内容，就可以看到，和dev分支的最新提交是完全一样的。

注意到上面的Fast-forward信息，Git告诉我们，这次合并是“快进模式”，也就是直接把master指向dev的当前提交，所以合并速度非常快。

当然，也不是每次合并都能Fast-forward，我们后面会讲其他方式的合并。

合并完成后，就可以放心地删除dev分支了：

$ git branch -d dev
Deleted branch dev (was fec145a).
删除后，查看branch，就只剩下master分支了：

$ git branch
* master
因为创建、合并和删除分支非常快，所以Git鼓励你使用分支完成某个任务，合并后再删掉分支，这和直接在master分支上工作效果是一样的，但过程更安全。

#######Create a new repository
git clone git@cicd.efoxconn.com:poc_internal/Test_Lamei.git
cd Test_Lamei
touch README.md
git add README.md
git commit -m "add README"
git push -u origin master

########Existing folder
cd existing_folder
git init
git remote add origin git@cicd.efoxconn.com:poc_internal/Test_Lamei.git
git add .
git commit -m "Initial commit"
git push -u origin master

#########Existing Git repository
cd existing_repo
git remote add origin git@cicd.efoxconn.com:poc_internal/Test_Lamei.git
git push -u origin --all
git push -u origin --tags

#########git ##########
git checkout -b test
git status
git branch
vi README.md
git status
git add README.md
git commit README.md
git status
git log --branches --not --remotes
git push origin test
git config --global credential.helper 'cache --timeout=7200'

fork：在github页面，点击fork按钮。将别人的仓库复制一份到自己的仓库。
clone：将github中的仓库克隆到自己本地电脑中
git clone 本地沒有repository時，將遠程repository整個下載過來，包括裏面的日誌信息，git項目里
的分支
git pull  本地有repository時，將遠程repository里新的commit數據下載過來，並且將文件與本地分支進行merge
git pull = git fetch + merge
git fetch 拿到了远程所有分支的更新，我用 cat .git/FETCH_HEAD 可以看到其状态，
若都是 not-for-merge 则不会有接下来的 merge 动作
merge 动作的默认目标是当前分支，若要切换目标，可以直接切换分支
merge 动作的来源则取决于你是否有 tracking，若有则读取配置自动完成，若无则请指明【来源】

#####getconfig.sh#########
#!/bin/bash

srvname=`uname -n`
sospath=`pwd`
user=`who ami i|cut -d' ' -f1`
sosfile="sosreport*.tar.[a-z][a-z]*"
decomdir=""

CHECKSOS() {
  type sosreport
  if [ $? -eq 0 ]
  then
    echo "sosreport is installed"
  else
    echo "sosreport need to be installed before running the script!!"
    exit 1
  fi
}

DECOM () {
f=$1
result=`file $f`
for t in XZ gzip bzip2
do
  echo $result |grep -qi "$t compressed data"
  if [ $? -eq 0 ]
  then
    ctype=$t
  fi
done

case "$ctype" in
  XZ)
    decomdir=`tar tJvf $f|head -1|awk '{print $NF}'`
    tar Jxvf $f
    ;;
  gzip)
    decomdir=`tar tzvf $f|head -1|awk '{print $NF}'`
    tar zxvf $f
    ;;
  bzip2)
    decomdir=`tar tjvf $f|head -1|awk '{print $NF}'`
    tar jxvf $f
    ;;
esac
}

CHECKSOS
type rpm
if [ $? -eq 0 ]
then
  sec="selinux"
else
  sec="apparmor"
fi

if [ -d ~/sos* ]
then
  rm -rf ~/sos*
fi

if [ ! -d ~/SA ]
then
  mkdir ~/SA
fi

SOS=`which sosreport`
$SOS --batch --tmp-dir=$sospath -n memory,system,hardware,process,$sec
cd ~
DECOM $sosfile
rm -f ~/$sosfile ~/sosreport*md5
mv ~/$decomdir ~/sosreport
rm -rf ~/sosreport/var
find ~/sosreport -name '*.log' -print0 | xargs -0 rm -f
find ~/sosreport -type f -size +512k -print0 | xargs -0 rm -f

cp -r ~/sosreport/etc ~/SA
if [ ${user} != root ]
then
  chown -R ${user}.${user} ~/SA
fi


#####git-conf.sh#########
#!/bin/bash

srvname="`uname -n`"
repopath="/SA"

CHECKGIT() {
  type git
  if [ $? -eq 0 ]
  then
    echo "git is installed"
  else
    echo "git need to be installed before running the script!!"
    exit 1
  fi
}

INITREPO() {
echo "cloning git repo"
cd /

expect -c "
set timeout 10;
spawn git clone git@10.67.50.42:SA;
        expect {
                \"*yes/no*\" {send \"yes\r\";}
        }
expect eof "

mkdir -p ${repopath}/${srvname}
git config --global user.name "chensen"
git config --global user.email root@localhost
git config --global push.default simple
}

GITREPO() {
  if [ -d ${repopath} ]
  then
    ls ${repopath}/${srvname}
    if [ $? -ne 0 ]
    then
      INITREPO
    fi
  else
    INITREPO
fi
}

CHECKGIT
GITREPO

type rpm
if [ $? -eq 0 ]
then
  sec="selinux"
else
  sec="apparmor"
fi

if [ -d /var/tmp/sos* ]
then
  rm -rf /var/tmp/sos*
fi

SOS=`which sosreport`
$SOS --batch --tmp-dir=/var/tmp -n logs,processor,memory,sar,cgroups,dbus,system,hardware,process,$sec
cd /var/tmp
xz -d /var/tmp/sosreport*.tar.xz
tar xvf /var/tmp/sosreport-*.tar
rm -f /var/tmp/sosreport*.tar /var/tmp/sosreport*md5
mv /var/tmp/sosreport* /var/tmp/sosreport
rm -rf /var/tmp/sosreport/var
find /var/tmp/sosreport -name '*.log' -print0 | xargs -0 rm -f
find /var/tmp/sosreport -type f -size +512k -print0 | xargs -0 rm -f

cd ${repopath}
cp -r /var/tmp/sosreport/etc ${srvname}
git add .
git commit -m "initial server configuration files"
git push
