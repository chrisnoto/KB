############# Traditional Jobs

#调用jenkins api
1 前提
CSRF tokens (crumbs) are now only valid for the web session they were created in to limit the impact of attackers obtaining them. 
Scripts that obtain a crumb using the /crumbIssuer/api URL will now fail to perform actions protected from CSRF unless 
the scripts retain the web session ID in subsequent requests.

Scripts could instead use an API token, which has not required a CSRF token (crumb) since Jenkins 2.96.
To disable this improvement you can set the system property hudson.security.csrf.DefaultCrumbIssuer.EXCLUDE_SESSION_ID to true. 

新版本2.96之后，只用api token就可以了，不需要csrf token,用了也会报错

禁用csrf保护
在script console里执行： hudson.security.csrf.GlobalCrumbIssuerConfiguration.DISABLE_CSRF_PROTECTION = true

2 给用户添加token，如mytoken
3 在job里的“构建触发器”中勾选 “触发远程构建”，填入“mytoken”

两种方式都可以调用api
curl -v --user chensen:Foxconn123 -X POST "http://10.67.36.64:8080/job/youdian/buildWithParameters" --data DOMAIN=youdian-test.cesbg.foxconn
curl -v --user chensen:Foxconn123 -X POST "http://10.67.36.64:8080/job/youdian/buildWithParameters?DOMAIN=youdian-test.cesbg.foxconn"
curl -v --user chensen:Foxconn123 -X POST "http://10.67.36.64:8080/job/youdianv3/buildWithParameters?DOMAIN=youdian-test.cesbg.foxconn&IP=10.67.36.62"

查看lastbuild的状态
curl -s --user chensen:Foxconn123 -X POST "http://10.67.36.64:8080/job/youdianv2/lastBuild/api/json" |jq .result
"SUCCESS"


############# pipeline
parameter和触发远程构建需要单独配置，接下来配置pipeline

# docker-compose部署到jenkins agent自身上
pipeline {
    agent {
        label 'docker'    
    }
    parameters {
        string(name: 'DOMAIN', defaultValue: 'localhost', description: 'the domain name of pandian website')
    }
    stages {
        stage('Build') {
            steps {

                // Run docker-compose on docker agent.
                sh "docker-compose -f /root/pandian/docker-compose.yml up -d"

            }
        post { 
        always { 
            sh "docker-compose -f /root/pandian/docker-compose.yml ps -a"
            sh "curl -s -I http://${params.DOMAIN}/admin.php/Welcome/index"
        }
    }
        }   
    }
}

# 在jenkins机器上build管理后台镜像并且部署到另一台VM
pipeline {
    agent any
        parameters {
        string(name: 'DOMAIN', defaultValue: 'localhost', description: 'the domain name of pandian website')
        string(name: 'IP', defaultValue: 'localhost', description: 'the IP of deployment server')
    }
    stages {
        stage('Build') {
            steps {

                git credentialsId: 'git_h7108579', url: 'https://gitlab.ces.efoxconn.com/H7108579/pandian_v107.git'
                sh """
				docker build --no-cache -t 10.67.51.164:5000/youdian/web:v1 docker/
                docker push 10.67.51.164:5000/youdian/web:v1
				"""
                }
            }   
        stage('deploy') {
            steps {
                sh """
				cat >start.sh <<-EOF
				docker rm -f youdian_web
				docker run --pull always -d --name youdian_web -p 8082:8080 -e DOMAIN=${params.DOMAIN} 10.67.51.164:5000/youdian/web:v1
				EOF
                chmod +x start.sh;sshpass -p ext566-32081 scp -o StrictHostKeyChecking=no start.sh root@${params.IP}:~
                sshpass -p ext566-32081 ssh -o StrictHostKeyChecking=no root@${params.IP} 'sh /root/start.sh'
				"""
                  } 
            }  
    }
}

# 在proxmox上创建单个VM
pipeline {
    agent any
    parameters {
        string(name: 'vm_name', defaultValue: 'test', description: 'the name of VM')
        string(name: 'vm_ip', defaultValue: '10.67.50.42', description: 'the ip addr of VM')
        string(name: 'vm_netmask', defaultValue: '23', description: 'the netmask of VM')
        string(name: 'vm_gateway', defaultValue: '10.67.50.1', description: 'the gateway of VM')
    }
    stages {
        stage('Checkout') {
            steps {
                git credentialsId: 'git_h7108579', url: 'https://gitlab.ces.efoxconn.com/H7108579/createvm.git'
            }
        }
        stage('Terraform init') {
            steps {
                sh """
                export http_proxy=http://h7108579:pqhkr99ctw@10.36.6.66:3128
                export https_proxy=http://h7108579:pqhkr99ctw@10.36.6.66:3128
                /var/lib/jenkins/tools/org.jenkinsci.plugins.terraform.TerraformInstallation/terraform-chensen/terraform init
                """
            }
        }
        stage('Terraform apply') {
            steps {
                sh """
                /var/lib/jenkins/tools/org.jenkinsci.plugins.terraform.TerraformInstallation/terraform-chensen/terraform apply -var=\"vm_name=${params.vm_name}\" -var=\"vm_ip=${params.vm_ip}\" -var=\"vm_netmask=${params.vm_netmask}\" -var=\"vm_gateway=${params.vm_gateway}\" --auto-approve
                """
            }
        }
        
    }
}

# mariadb verify backup
pipeline {
    agent any
    stages {
        stage('prepare scripts') {
            steps {

                git credentialsId: 'git_h7108579', url: 'https://gitlab.ces.efoxconn.com/H7108579/mariadb_verify.git'
                sh """
                chmod +x *.sh
                tar zcvf deploy.tar.gz ./*
                sshpass -p Foxconn123 scp -o StrictHostKeyChecking=no deploy.tar.gz root@10.66.13.16:/opt
                sshpass -p Foxconn123 ssh -o StrictHostKeyChecking=no root@10.66.13.16 '[ -d "/opt/mariadb_verify" ] || mkdir -p /opt/mariadb_verify;tar zxvf /opt/deploy.tar.gz -C /opt/mariadb_verify'
                rm -f deploy.tar.gz
                """
                }
            }   
        stage('backup') {
            steps {
                sh """
				sshpass -p Foxconn123 ssh -o StrictHostKeyChecking=no root@10.66.13.16 'cd /opt/mariadb_verify;make backup'
				"""
                  } 
            }  
        stage('import data') {
            steps {
                sh """
				sshpass -p Foxconn123 ssh -o StrictHostKeyChecking=no root@10.66.13.16 'cd /opt/mariadb_verify;make import'
				"""
                  } 
            }
        stage('verify data') {
            steps {
                sh """
				sshpass -p Foxconn123 ssh -o StrictHostKeyChecking=no root@10.66.13.16 'cd /opt/mariadb_verify;make verify'
				"""
                  } 
            }             
        stage('transfer backup to remote server') {
            steps {
                sh """
				sshpass -p Foxconn123 ssh -o StrictHostKeyChecking=no root@10.66.13.16 'cd /opt/mariadb_verify;make transfer'
				"""
                  } 
            } 
        stage('cleanup docker container environment') {
            steps {
                sh """
				sshpass -p Foxconn123 ssh -o StrictHostKeyChecking=no root@10.66.13.16 'cd /opt/mariadb_verify;make down'
				sshpass -p Foxconn123 ssh -o StrictHostKeyChecking=no root@10.66.13.16 'rm -rf /opt/mariadb_verify /opt/deploy.tar.gz'
				"""
                  } 
            }            
    }
}