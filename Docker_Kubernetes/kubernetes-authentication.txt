---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#######访问 kubernetes API###########
###1 kubectl --raw方式
kubectl get --raw https://10.67.36.58/k8s/clusters/c-v6qjl/api/v1/nodes |python -m json.tool
kubectl get --raw apis/metrics.k8s.io/v1beta1/nodes

###2 浏览器访问
https://10.67.36.58/k8s/clusters/c-k789t/api/v1/nodes
metric-server api
https://10.67.36.58/k8s/clusters/c-v6qjl/apis/metrics.k8s.io/v1beta1/pods

###3 curl访问
在rancher UI->Users -> User profile -> API & Keys
Access Key: token-dx5tl
Secret Key: r9tbw9xrjm8j2spx8dmlhzm7kvmvhgxmz2xf7cjjjqdlkmlc8rzwq4
Bearer Token: token-dx5tl:r9tbw9xrjm8j2spx8dmlhzm7kvmvhgxmz2xf7cjjjqdlkmlc8rzwq4
#3.1使用bearer token
curl -k -X GET https://10.67.36.58/k8s/clusters/c-v6qjl/api/v1/nodes --header "Authorization: Bearer token-dx5tl:r9tbw9xrjm8j2spx8dmlhzmkvmvhgxmz2xf7cjjjqdlkmlc8rzwq4"

curl --cacert /root/.kube/ca.crt -X GET https://10.67.36.58/k8s/clusters/c-v6qjl/api/v1/nodes --header "Authorization: Bearer token-bpmcn:vpf6vm8964djfc89wzv6rtmmqcw2zfnt2jgzwstnwzsqkgtnkrnkgz"

#3.2 使用Basic用户密码
curl -k -u token-dx5tl:r9tbw9xrjm8j2spx8dmlhzm7kvmvhgxmz2xf7cjjjqdlkmlc8rzwq4 -X GET https://10.67.36.58/k8s/clusters/c-v6qjl/api/v1/nodes

curl --cacert /root/.kube/ca.crt -u token-dx5tl:r9tbw9xrjm8j2spx8dmlhzm7kvmvhgxmz2xf7cjjjqdlkmlc8rzwq4 -X GET https://10.67.36.58/k8s/clusters/c-v6qjl/apis/storage.k8s.io/v1bta1
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

#########访问 rancher API#######
curl --cacert /root/.kube/ca.crt -X GET https://10.67.36.58/v3/projects/c-v6qjl:p-gxmz9 --header "Authorization: Bearer token-bpmcn:vpf6vm8964djfc89wzv6rtmmqcw2zfnt2jgzwstnwzsqkgtnkrnkgz"
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#########kubectl 访问 kubernetes#########
###1 通过HTTPS证书双向认证的形式访问Api Server:
kubectl --server=https://192.168.61.100:6443 \
--certificate-authority=ca.pem  \
--client-certificate=client.crt \
--client-key=client.key \
get nodes

###2 kubectl使用Bearer访问Api Server:
kubectl --server=https://192.168.61.100:6443 \
--token=792c62a1b5f2b07b \
--insecure-skip-tls-verify=true \
cluster-info
[chensen@cobbler ~]$ kubectl --server=https://10.67.36.58/k8s/clusters/c-v6qjl --token=token-bpmcn:vpf6vm8964djfc89wzv6rtmmqcw2zfnt2jgzwstnwzsqkgtnkrnkgz --insecure-skip-tls-verify=true get no
NAME      STATUS    AGE       VERSION
master1   Ready     82d       v1.11.2
master2   Ready     21h       v1.11.2
master3   Ready     82d       v1.11.2
[chensen@cobbler ~]$ kubectl --server=https://10.67.36.58/k8s/clusters/c-v6qjl --token=token-bpmcn:vpf6vm8964djfc89wzv6rtmmqcw2zfnt2jgzwstnwzsqkgtnkrnkgz --certificate-authority=/home/chensen/ca.crt get no
NAME      STATUS    AGE       VERSION
master1   Ready     82d       v1.11.2
master2   Ready     21h       v1.11.2
master3   Ready     82d       v1.11.2

###3 kubectl使用用户密码访问Api Server:
kubectl --server=https://192.168.61.100:6443 \
--username=admin \
--password=1234 \
--insecure-skip-tls-verify=true \
cluster-info
[chensen@cobbler ~]$ kubectl --server=https://10.67.36.58/k8s/clusters/c-v6qjl --username=token-bpmcn --password=vpf6vm8964djfc89wzv6rtmmqcw2zfnt2jgzwstnwzsqkgtnkrnkgz --insecure-skip-tls-verify=true get no
NAME      STATUS    AGE       VERSION
master1   Ready     82d       v1.11.2
master2   Ready     21h       v1.11.2
master3   Ready     82d       v1.11.2
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

###Token authentication in practice
1 Listing service accounts
kubectl get sa
2 Finding the secret
kubectl get sa default -o yaml
SECRET=$(kubectl get sa default -o json | jq -r .secrets[0].name)
3 Extracting the token
View the secret: kubectl get secret $SECRET -o yaml
Extract the token and decode it
TOKEN=$(kubectl get secret $SECRET -o json | jq -r .data.token | base64 -d)
4 Using the token
  Find the ClusterIP for the kubernetes service:
   kubectl get svc kubernetes
   API=$(kubectl get svc kubernetes -o json | jq -r .spec.clusterIP)
  Connect without the token:
    curl -k https://$API
  Connect with the token:
    curl -k -H "Authorization: Bearer $TOKEN" https://$API
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	
#######配置k8s客戶端訪問k8s集群#######
方法一：拷貝master機器的/etc/kubernetes/admin.conf至客戶端的$HOME/.kube/目錄下
特別注意： 客戶端如有配置http proxy會導致無法訪問機器。

方法二： (配置多集群)
###########使用用户密码+CA证书验证###########
定义第一个集群
kubectl config set-credentials dev-admin --username=admin --password=1Qj9KUj0RMSrHQrolr2AMiiRhB9dEAMi
kubectl config set-cluster dev-cluster --server=https://cls-n9w6pjha.ccs.tencent-cloud.com --certificate-authority=/root/dev-ca.crt
kubectl config set-context dev-system --cluster=dev-cluster --user=dev-admin
kubectl config use-context dev-system
[root@cobbler ~]# kubectl config use-context dev-system
Switched to context "dev-system".
[root@cobbler ~]# kubectl get nodes
NAME          STATUS    AGE       VERSION
172.16.16.3   Ready     2d        v1.7.8-qcloud

定义第二个集群
kubectl config set-credentials prod-admin --username=admin --password=ZXIr6izA9AqcWXtfWgsqdBS58FalddUu
kubectl config set-cluster prod-cluster --server=https://cls-46q04qgm.ccs.tencent-cloud.com --certificate-authority=/root/prod-ca.crt
kubectl config set-context prod-system --cluster=prod-cluster --user=prod-admin
kubectl config use-context prod-system
[root@cobbler ~]# kubectl config use-context prod-system
Switched to context "prod-system".
[root@cobbler ~]# kubectl get nodes
NAME           STATUS    AGE       VERSION
172.16.16.46   Ready     2d        v1.7.8-qcloud
172.16.16.70   Ready     2d        v1.7.8-qcloud
172.16.16.79   Ready     2d        v1.7.8-qcloud
172.16.16.83   Ready     2d        v1.7.8-qcloud

############使用token+CA证书验证 或  token --insecure方式验证###########
kubectl config set-credentials default --token=${KUBERNETES_TOKEN}
if [ ! -z ${KUBERNETES_CERT} ]; then
  echo ${KUBERNETES_CERT} | base64 -d > ca.crt
  kubectl config set-cluster default --server=${KUBERNETES_SERVER} --certificate-authority=ca.crt
else
  echo "WARNING: Using insecure connection to cluster"
  kubectl config set-cluster default --server=${KUBERNETES_SERVER} --insecure-skip-tls-verify=true
fi
kubectl config set-context default --cluster=default --user=default
kubectl config use-context defaul

#########使用CA和client证书验证##########
KUBERNETES_PUBLIC_ADDRESS=$(gcloud compute addresses describe kubernetes-the-hard-way \
  --region $(gcloud config get-value compute/region) \
  --format 'value(address)')
Generate a kubeconfig file suitable for authenticating as the admin user:

kubectl config set-cluster kubernetes-the-hard-way \
  --certificate-authority=ca.pem \
  --embed-certs=true \
  --server=https://${KUBERNETES_PUBLIC_ADDRESS}:6443
kubectl config set-credentials admin \
  --client-certificate=admin.pem \
  --client-key=admin-key.pem
kubectl config set-context kubernetes-the-hard-way \
  --cluster=kubernetes-the-hard-way \
  --user=admin
kubectl config use-context kubernetes-the-hard-way

##############生成kubeconfig的配置步骤 客户端证书方式##############
客户端证书认证叫作TLS双向认证，也就是服务器客户端互相验证证书的正确性，在都正确的情况下协调通信加密方案。
为了使用这个方案，api-server需要用–client-ca-file选项来开启
1、定义变量
export KUBE_APISERVER="https://172.20.0.2:6443"
2、设置集群参数
kubectl config set-cluster kubernetes --certificate-authority=/etc/kubernetes/ssl/ca.pem --embed-certs=true --server=${KUBE_APISERVER}   #可以指定路径kubeconfig=/root/config.conf

说明：集群参数主要设置了所需要访问的集群的信息。使用set-cluster设置了需要访问的集群，如上为kubernetes；--certificate-authority设置了该集群的公钥；
--embed-certs为true表示将--certificate-authority证书写入到kubeconfig中；--server则表示该集群的kube-apiserver地址。
3、设置客户端认证参数
kubectl config set-credentials admin --client-certificate=/etc/kubernetes/ssl/admin.pem --embed-certs=true --client-key=/etc/kubernetes/ssl/admin-key.pem #可以指定路径kubeconfig=/root/config.conf

说明：用户参数主要设置用户的相关信息，主要是用户证书。如上的用户名为admin，证书为：/etc/kubernetes/ssl/admin.pem，私钥为：/etc/kubernetes/ssl/admin-key.pem
注意客户端的证书首先要经过集群CA的签署，否则不会被集群认可。此处使用的是ca认证方式，也可以使用token认证，如kubelet的 TLS Boostrap机制下的bootstrapping使用的就是token认证方式。

4、设置上下文参数
kubectl config set-context kubernetes   --cluster=kubernetes   --user=admin #可以指定路径kubeconfig=/root/config.conf

说明：上下文参数将集群参数和用户参数关联起来。如上面的上下文名称为kubenetes，集群为kubenetes，用户为admin，表示使用admin的用户凭证来访问kubenetes集群
的default命名空间，也可以增加--namespace来指定访问的命名空间。
5、设置默认上下文
kubectl config use-context kubernetes  #可以指定路径kubeconfig=/root/config.conf

说明：最后使用kubectl config use-context kubernetes来使用名为kubenetes的环境项来作为配置。如果配置了多个环境项，可通过切换不同的环境项名字来访问到不同的
集群环境。

默认生成的kubeconfig 被保存到 ~/.kube/config 文件

##################rancher TLS双向认证###############
注意 rancher UI用的CA 和 部署出来的kubernetes不一样
rancher UI: 签发者 cattle-ca   发给cattle
kubernetes: 签发者 kube-ca     发给kube-apiserver等服务,以及kube-admin
此处可以自己做一个client证书，添加权限： /O=system:masters
可以用 kube-admin 默认有admin权限
--------------client------------------------
[root@master1 ~]# openssl genrsa -out client.key 2048
Generating RSA private key, 2048 bit long modulus
.....+++
..+++
e is 65537 (0x10001)
[root@master1 ~]# openssl req -new -key client.key -subj "/CN=client/O=system:masters" -out client.csr
[root@master1 ~]# openssl x509 -req -in client.csr -CA /etc/kubernetes/ssl/kube-ca.pem -CAkey /etc/kubernetes/ssl/kube-ca-key.pem -CAcreateserial -out client.crt -days 3650
Signature ok
subject=/CN=client/O=system:masters
Getting CA Private Key

[chensen@cobbler ~]$ kubectl --server=https://10.67.36.62:6443 --certificate-authority=/home/chensen/kube-ca.crt --client-certificate=client.crt --client-key=client.key cluster-info
Kubernetes master is running at https://10.67.36.62:6443
KubeDNS is running at https://10.67.36.62:6443/api/v1/namespaces/kube-system/services/kube-dns/proxy

To further debug and diagnose cluster problems, use 'kubectl cluster-info dump'.
[chensen@cobbler ~]$ kubectl --server=https://10.67.36.62:6443 --certificate-authority=/home/chensen/kube-ca.crt --client-certificate=client.crt --client-key=client.key get no
NAME      STATUS    AGE       VERSION
master1   Ready     84d       v1.11.2
master2   Ready     2d        v1.11.2
master3   Ready     83d       v1.11.2
worker1   Ready     83d       v1.11.2
worker2   Ready     83d       v1.11.2
worker3   Ready     83d       v1.11.2

继续配置kube config
[chensen@cobbler ~]$ kubectl config set-cluster rancher --certificate-authority=/home/chensen/kube-ca.crt --embed-certs=true --server=https://10.67.36.62:6443
Cluster "rancher" set.
[chensen@cobbler ~]$ kubectl config set-credentials admin --client-certificate=client.crt --client-key=client.key
User "admin" set.
[chensen@cobbler ~]$ kubectl config set-context rancher --cluster=rancher --user=admin
Context "rancher" created.
[chensen@cobbler ~]$ kubectl config use-context rancher
Switched to context "rancher".

[chensen@cobbler ~]$ kubectl get po
NAME                            READY     STATUS    RESTARTS   AGE
hello-67bf8bd7c8-pm87z          1/1       Running   1          21d
hello-nodejs-65b56586cf-lv5rl   1/1       Running   1          21d
repo-858d7bf699-fxhjd           1/1       Running   0          2d
repo-httpd-b5967bd88-hjj9n      1/1       Running   1          30d

---------------kube-admin-----------------
第一种获取方法: rancher server里的/rancher/kube_config_cluster.yml
第二种获取方法如下
[root@cobbler ~]# kubectl -n kube-system get secrets kube-admin -o json |jq -r '.data["Config"]' |base64 -d  >config取得kube-admin的config
config中包含 kube-admin.crt和kube-admin.key和kube-ca.crt
apiVersion: v1
kind: Config
clusters:
- cluster:
    api-version: v1
    certificate-authority-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUN3akNDQWFxZ0F3SUJBZ0lCQURBTkJna3Foa2lHOXcwQkFRc0ZBREFTTVJBd0RnWURWUVFERXdkcmRXSmwKTFdOaE1CNFhEVEU0TVRBeU1EQTJNRFk
	xTmxvWERUSTRNVEF4TnpBMk1EWTFObG93RWpFUU1BNEdBMVVFQXhNSAphM1ZpWlMxallUQ0NBU0l3RFFZSktvWklodmNOQVFFQkJRQURnZ0VQQURDQ0FRb0NnZ0VCQUwrZ1ZEem5XallQClBDZmd0QUNLRnZoMUw1Y0tud3lvbXZucGpiZERKa1
	FCUi9sRCs0K0xBUnJWUnBJblpuODU4UUkwS0VXeDlLSjgKNzFSUUlUUDUzZ2ZQRGpWcmlmSWJIUGN5MUIvR1ZHQk9QeStxUGdXZi91eTc5WGlzT2M5ZjJ1KzMrN0RFMEIxcQoySGl4c2VFTy9mbm9nNnBtRkhvWFZ3eVlOSHNETHRRN1diS29IT
	WJmWVJMUmlpemZSY3dwVlEvblpaeWlUaEt6CjdhbDFSYVp2SVZRUlU5Ums5VXkwRnRiVkRTTm5GeVFwSGpSM1JDZUJ2UFQxZThISTNPYXlDZHNvZGk0UkRZREIKdEN4bXRIZnpoNEtCcno5Q1JObUNXWDVPS1BTZEZpM2RwQ3k4TC81UmVyZGp2
	aWV5OTAzT01DMElsRlV2OXVORgpIOG8zcTFpcDVIRUNBd0VBQWFNak1DRXdEZ1lEVlIwUEFRSC9CQVFEQWdLa01BOEdBMVVkRXdFQi93UUZNQU1CCkFmOHdEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBQ1dmVjc4YXBoMmhFYTU5T2RFbWZ0emV
	rR0hFTXFBemVOWC8KMzhsNDZLbGtScS9ST1ZCUmZCVThuMThQTyt5aElud0lEOUVkYlg1clpQbFJjZDVQcWZ3ZWNtNHhBNFJuV0Z4OQp5cGJ5THZKNFZFZ0hhTzlxZGFneWVRNEZJaUZVakJEeTVzTytoeTRMNDRLTmJIWXJVZTU1Wk5uOS9FcE
	w0UXpnCldtaGF2MUdUbkxhSERpT21DSmtjdmtwamFSSGFlK1gxK01qSzJ3NW1BNzJjZWFpb1NlQ1phSnNxa1hYdlNBWSsKL2FlcFAxd3pZUzNNeU1ZdkJBWXRxNlJYYnFRS0JIM01tM1FQc0RPZW91V2RQS2I5YXBwMmo5cWhjQkdVODcrYwpBU
	lVxNFYrUFBEQ3VQaVVxRytmSFdOamdVK3BWc1VTcmJHZVBTTGd2RWtLM2RXRHBuV1E9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
    server: "https://10.67.36.62:6443"
  name: "local"
contexts:
- context:
    cluster: "local"
    user: "kube-admin-local"
  name: "local"
current-context: "local"
users:
- name: "kube-admin-local"
  user:
    client-certificate-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUM2VENDQWRHZ0F3SUJBZ0lJZVNrNXdEU0dvb0V3RFFZSktvWklodmNOQVFFTEJRQXdFakVRTUE0R0ExVUUKQXhNSGEzVmlaUzFqWVRBZUZ3MHhPREV3TWpB
	d05qQTJOVFphRncweE9URXdNakF3TmpBMk5UbGFNQzR4RnpBVgpCZ05WQkFvVERuTjVjM1JsYlRwdFlYTjBaWEp6TVJNd0VRWURWUVFERXdwcmRXSmxMV0ZrYldsdU1JSUJJakFOCkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQ
	Wx2N1cyWDEvKzM1ZGtKVWRFZFpCUTc0RXdITEIKZEVzc01yLzhnck16cjN5clNsczRmTnFwUEF1dXROTXBCdEQ4aDhnbWlBZlp1YnVHSytWMW5mcE9yVXBZZTlOMgpDRVhiTVgralRkYmFYSHpjS1dJRGVxcFkrM0F0eU1velZHOTVGdExtbVVJYW
	N2TnRtMG13V0ZQaXhUaStWbXo5CkpESjMwd2M3KzB0T1U4akhRVkdJRHdoOVUvZXNha0NyMXRPUkZNU05LeE5UWktvQ0tPMmZ0cGdrRERmWEEzMG0KOHRMcnhVbFpDN0oxSld1d3hOUTFJRUpYQ21VVVZOZmYrNjBTd1RMRzl6cVdJRHFUYS9Rb05
	qbjA5eTBPTFdTTwp2UEFmcGhTaGw3UEh2blA2UW8yTWxmcWRhdG5YRlJDNUJ3dzd3dVBmMHZWbExsRW9XYTVudFZZaEl3SURBUUFCCm95Y3dKVEFPQmdOVkhROEJBZjhFQkFNQ0JhQXdFd1lEVlIwbEJBd3dDZ1lJS3dZQkJRVUhBd0l3RFFZSktv
	WkkKaHZjTkFRRUxCUUFEZ2dFQkFMOU9tUzVOOVp0b1dvdVJDeXM3TmJoQmxQUnQzaEdmcUlId28yckY2STcwcG1WcApCTjZPT0diN3ZaR2J0ZHJnNzFCTWlJMWFJUitIam1uT3FldE1RY0JNMy92YVJBZDFYODBBeEhaVndwWm5LVFNRClRzU254T
	DFWWGhranZqZ2ptSklSUTdCa0RaMmhFVytSc2krTVYrWVdPVFNRT2xXeFdjM20xdmZ4aFc0ODBycjkKYkcrQkpaZW5jYVhzK1A3eS9JRW1zQXNYMkN6S2YyNzBGTkRxaUc4cGRkSEVia3h2MjJrVWJBZm9mR2VFN1V4cgpTMklWazFnQjlweTlQNG
	h4Y0lPb0RGZEZ5ZUk0Ykp3YjdyR1NybW04b0tGZlpCSll5N0Q2Sk01NERNQ1BienV0CmNuTlZDdU9kaTdYSlFTWFhocm1VZ3FkeHpxODRaOWprVU1iY1FnST0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
    client-key-data: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBbHY3VzJYMS8rMzVka0pVZEVkWkJRNzRFd0hMQmRFc3NNci84Z3JNenIzeXJTbHM0CmZOcXBQQXV1dE5NcEJ0RDhoOGdtaUFmWnVidUdL
	K1YxbmZwT3JVcFllOU4yQ0VYYk1YK2pUZGJhWEh6Y0tXSUQKZXFwWSszQXR5TW96Vkc5NUZ0TG1tVUlhY3ZOdG0wbXdXRlBpeFRpK1ZtejlKREozMHdjNyswdE9VOGpIUVZHSQpEd2g5VS9lc2FrQ3IxdE9SRk1TTkt4TlRaS29DS08yZnRwZ2tER
	GZYQTMwbTh0THJ4VWxaQzdKMUpXdXd4TlExCklFSlhDbVVVVk5mZis2MFN3VExHOXpxV0lEcVRhL1FvTmpuMDl5ME9MV1NPdlBBZnBoU2hsN1BIdm5QNlFvMk0KbGZxZGF0blhGUkM1Qnd3N3d1UGYwdlZsTGxFb1dhNW50VlloSXdJREFRQUJBb0
	lCQUdEcGVWNG9KWTkyQUhsKwpxeVM2bmpMcmI4TlJKQWNQQkhRaU11QjBRZlVkRUJkdVN1Z2ZzOFQ5UG9tQ2llOTlETWZkVjVXeGJEWEFQUkpKCmVOOEhPNTRQZkpFbEhMbWNsRjNGclR1VmJaczA3RjJITWZKMkNSeUFXSEpxRE4zaG1oZGpEMnh
	JT0ErVlc4RHkKWDhPaE80Z1hybHBzSTJFckh5c0xscHpvTFlLcCs0ZnI5RklDWDN1MS9ZVEtyMmNyS3dIZHlXdEc2TUp6UWIwbwpGNTdWbmU2dVVnaXVFMlZFamFpTms0NSt3OElJRlpYcXNTOW5NSGt0dFRPTWJCK2VDNDFrWDZ3bGMwVkplblIy
	CkFwRjc2SHM1Q09GZy9DREp1KzlVNkMwMjJLb3lzVlRHd3U2TDRUbXNjVUkwWXJJSFFFOE9hRzVEbmp0Rmd2QkcKcG5seS95a0NnWUVBd1crTjRwWDZBNW1meU9vdGF4Ym9NQ2p2a0JNbU9NMHBXQnorWkU1VWtZNmx3R1libnhPegpodDNVamVrU
	Gx3MnVNN3laT0lXWm1ucG0yRFFQSGxNZXp1bVdDcGhoRXBsSFZNem1WNXdoSUQ4aTNoaEtjU0RsCkN2anoyajB5eUhUcVVnb1VRVXpKOTBKdFA4Vm1EWkFJeUlIc2d1TnFhNnFrTnEybVkwaXpDcVVDZ1lFQXg5VTgKaUlWL21GSi96bG8yV0NDWU
	JCNjVyQ1hYMXJyQTFEVnJIMHZGLzd2K2pQV0xMd0dXclI4S0N0L3JGd0ZUZFdOVApXdHBnMzE5dVVnZkk1Z0VoeGVNMmU1TWFyL2d5S0lYa0l4SmhSSng1QU1qbUR0N1FtRTVtRW5NRXd5QTBiSXl1ClByam9aV3FtTHkra3pCdTNVU2hUU044dTR
	Hd0lXQXczKzhIVDJpY0NnWUVBbUkzSUVwbEJjakZvU09ZWEo4d0wKRm1CU2Z3ZjdMdlR1MUdVWlpEWTZrQWsyUThURHAvTzd0SE9pdk1DLzROdVROWTVhTUs5ODhzM3g2alUwYnpBUwpyaENlbW9DT25rSndkVHFidHlDVkozOWptbEVCOUxLQ3NP
	S2lQczNoRFNMWDRoZTgzYnNYMVg5MzljRlN1UU9OClNjVGRxR1IrZTZjNmx6emdhcERkVTFrQ2dZQnBKQ2JQWmY0MmRPSE4vdVV0QlNrMnNidmJlYVhRMHozMTZZMU4KVUI4RGFUU0xrZjREWTRDVjRnajBvOUFic0pUcTVMSE0wYTI2bVltQUc1e
	DJlQTMvQW9kK0NXNDNQQTJZQ0twNgpVWWRnQkR3ZVQ1WE1LU3Z6bHZ4WnBLN1N3N1VSa0F0MThQQkZ2QkZvTGxjMUZUZ2t1V1RvcUpVUGU0Z0FXNTF4CkZ4Q1NiUUtCZ0g5YnIyU1FFY2JFdTVwNEVpK3lWTGxxMUNPWWt5T1BXR3gyb3NqWVcxQj
	M4WTlOSFZhaFExbWkKcEZzM0FKSkg5YjhWZ0hMdkZoSkU5UHorMU11aUYvT2ozSW92dmZSY2UyQTVaUEI2Y1lmU3JxTDhvQ3Z6NndURApkWGh1T3pjM0dUMERRaVFmbWN5SEVtekt0NjJxSVlnQm83YTd5dUEwMExGSUtyWXI0bGc4Ci0tLS0tRU5
	EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
[chensen@cobbler ~]$ kubectl --server=https://10.67.36.62:6443 --certificate-authority=/home/chensen/kube-ca.crt --client-certificate=kube-admin.crt --client-key=kube-admin.key get no
NAME      STATUS    AGE       VERSION
master1   Ready     82d       v1.11.2
master2   Ready     23h       v1.11.2
master3   Ready     82d       v1.11.2
worker1   Ready     82d       v1.11.2
worker2   Ready     82d       v1.11.2
worker3   Ready     82d       v1.11.2
[chensen@cobbler ~]$ kubectl --server=https://10.67.36.64:6443 --certificate-authority=/home/chensen/kube-ca.crt --client-certificate=kube-admin.crt --client-key=kube-admin.key get no
NAME      STATUS    AGE       VERSION
master1   Ready     82d       v1.11.2
master2   Ready     23h       v1.11.2
master3   Ready     82d       v1.11.2
worker1   Ready     82d       v1.11.2
worker2   Ready     82d       v1.11.2
worker3   Ready     82d       v1.11.2
[chensen@cobbler ~]$ kubectl --server=https://10.67.36.63:6443 --certificate-authority=/home/chensen/kube-ca.crt --client-certificate=kube-admin.crt --client-key=kube-admin.key get no
NAME      STATUS    AGE       VERSION
master1   Ready     82d       v1.11.2
master2   Ready     23h       v1.11.2
master3   Ready     82d       v1.11.2
worker1   Ready     82d       v1.11.2
worker2   Ready     82d       v1.11.2
worker3   Ready     82d       v1.11.2

###############创建SA################
[root@cobbler ~]# kubectl create sa test
serviceaccount "test" created
You have mail in /var/spool/mail/root
[root@cobbler ~]# kubectl get sa test -o json
{
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": {
        "creationTimestamp": "2019-01-11T01:06:51Z",
        "name": "test",
        "namespace": "default",
        "resourceVersion": "14468695",
        "selfLink": "/api/v1/namespaces/default/serviceaccounts/test",
        "uid": "2d7cdd1f-153d-11e9-b1f4-000c29f0f992"
    },
    "secrets": [
        {
            "name": "test-token-86bl8"
        }
    ]
}
[root@cobbler ~]# kubectl get sa test -o json | jq -r .secrets[].name
test-token-86bl8
[root@cobbler ~]# kubectl get secret test-token-86bl8 -o json
{
    "apiVersion": "v1",
    "data": {
        "ca.crt": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUN3akNDQWFxZ0F3SUJBZ0lCQURBTkJna3Foa2lHOXcwQkFRc0ZBREFTTVJBd0RnWURWUVFERXdkcmRXSmwKTFdOaE1CNFhEVEU0TVRBeU1EQTJNRFkxTmxvWERUSTRNVEF4TnpBMk1EWTFObG93RWpFUU1BNEdBMVVFQXhNSAphM1ZpWlMxallUQ0NBU0l3RFFZSktvWklodmNOQVFFQkJRQURnZ0VQQURDQ0FRb0NnZ0VCQUwrZ1ZEem5XallQClBDZmd0QUNLRnZoMUw1Y0tud3lvbXZucGpiZERKa1FCUi9sRCs0K0xBUnJWUnBJblpuODU4UUkwS0VXeDlLSjgKNzFSUUlUUDUzZ2ZQRGpWcmlmSWJIUGN5MUIvR1ZHQk9QeStxUGdXZi91eTc5WGlzT2M5ZjJ1KzMrN0RFMEIxcQoySGl4c2VFTy9mbm9nNnBtRkhvWFZ3eVlOSHNETHRRN1diS29ITWJmWVJMUmlpemZSY3dwVlEvblpaeWlUaEt6CjdhbDFSYVp2SVZRUlU5Ums5VXkwRnRiVkRTTm5GeVFwSGpSM1JDZUJ2UFQxZThISTNPYXlDZHNvZGk0UkRZREIKdEN4bXRIZnpoNEtCcno5Q1JObUNXWDVPS1BTZEZpM2RwQ3k4TC81UmVyZGp2aWV5OTAzT01DMElsRlV2OXVORgpIOG8zcTFpcDVIRUNBd0VBQWFNak1DRXdEZ1lEVlIwUEFRSC9CQVFEQWdLa01BOEdBMVVkRXdFQi93UUZNQU1CCkFmOHdEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBQ1dmVjc4YXBoMmhFYTU5T2RFbWZ0emVrR0hFTXFBemVOWC8KMzhsNDZLbGtScS9ST1ZCUmZCVThuMThQTyt5aElud0lEOUVkYlg1clpQbFJjZDVQcWZ3ZWNtNHhBNFJuV0Z4OQp5cGJ5THZKNFZFZ0hhTzlxZGFneWVRNEZJaUZVakJEeTVzTytoeTRMNDRLTmJIWXJVZTU1Wk5uOS9FcEw0UXpnCldtaGF2MUdUbkxhSERpT21DSmtjdmtwamFSSGFlK1gxK01qSzJ3NW1BNzJjZWFpb1NlQ1phSnNxa1hYdlNBWSsKL2FlcFAxd3pZUzNNeU1ZdkJBWXRxNlJYYnFRS0JIM01tM1FQc0RPZW91V2RQS2I5YXBwMmo5cWhjQkdVODcrYwpBUlVxNFYrUFBEQ3VQaVVxRytmSFdOamdVK3BWc1VTcmJHZVBTTGd2RWtLM2RXRHBuV1E9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K",
        "namespace": "ZGVmYXVsdA==",
        "token": "ZXlKaGJHY2lPaUpTVXpJMU5pSXNJbXRwWkNJNklpSjkuZXlKcGMzTWlPaUpyZFdKbGNtNWxkR1Z6TDNObGNuWnBZMlZoWTJOdmRXNTBJaXdpYTNWaVpYSnVaWFJsY3k1cGJ5OXpaWEoyYVdObFlXTmpiM1Z1ZEM5dVlXMWxjM0JoWTJVaU9pSmtaV1poZFd4MElpd2lhM1ZpWlhKdVpYUmxjeTVwYnk5elpYSjJhV05sWVdOamIzVnVkQzl6WldOeVpYUXVibUZ0WlNJNkluUmxjM1F0ZEc5clpXNHRPRFppYkRnaUxDSnJkV0psY201bGRHVnpMbWx2TDNObGNuWnBZMlZoWTJOdmRXNTBMM05sY25acFkyVXRZV05qYjNWdWRDNXVZVzFsSWpvaWRHVnpkQ0lzSW10MVltVnlibVYwWlhNdWFXOHZjMlZ5ZG1salpXRmpZMjkxYm5RdmMyVnlkbWxqWlMxaFkyTnZkVzUwTG5WcFpDSTZJakprTjJOa1pERm1MVEUxTTJRdE1URmxPUzFpTVdZMExUQXdNR015T1dZd1pqazVNaUlzSW5OMVlpSTZJbk41YzNSbGJUcHpaWEoyYVdObFlXTmpiM1Z1ZERwa1pXWmhkV3gwT25SbGMzUWlmUS5CZy1TazdPVGswVGlsSHRFSHV1Z1ZlOVVheC1rcEFHTnJ2eERTMFA5QVVndTBtdFg1ZlFZTVdUSUZYSlpKTlhJUl9ydFlmczllR3B5dGQwdmRaeXNaRVRBRWxVbWJ4N25WV2hzQTdCQWVHQlFrX3l3aGItdUZOREZMdEFtVTh3UFpUam9PODZjY1BiNzBFNzNOQWxQLVNrT09FdWtGR1pYQXdONDY0Ym9BQmhvOW1yUVo3VWU4YVhHTXZ4akVDcDJXUTBGZm5YNi12OElXMWtBRmlMbnFLbFk1MTN0Z1F5bDNXQ3p0aUJaVE1PSmMxUnJpOGQ2eW9hbk1SbmxVQ1c0RG1HNUZISXF2akxKZDVrRnpyZ2lOdzlyVEkycVgtU0VmR3JnR3pKOUJ4VDQwX2Q3Ni10VTkxbWozSTRqc0N6eHl0N1ZhcXhJaEN0SjZKRHlVME02cFE="
    },
    "kind": "Secret",
    "metadata": {
        "annotations": {
            "kubernetes.io/service-account.name": "test",
            "kubernetes.io/service-account.uid": "2d7cdd1f-153d-11e9-b1f4-000c29f0f992"
        },
        "creationTimestamp": "2019-01-11T01:06:51Z",
        "name": "test-token-86bl8",
        "namespace": "default",
        "resourceVersion": "14468694",
        "selfLink": "/api/v1/namespaces/default/secrets/test-token-86bl8",
        "uid": "2d83c8e0-153d-11e9-b1f4-000c29f0f992"
    },
    "type": "kubernetes.io/service-account-token"
}
#############Service Account#############
Service Account包括三个部分：
namespace，token和CA证书
创建Service account时会自动创建一个secret, secret里有namespace,token和CA证书, 通过这些可以配置 kube config的内容
给sa授权  通过rolebinding clusterrolebinding
######################Secret 类型#################
Secret有三种类型：

Service Account：用来访问Kubernetes API，由Kubernetes自动创建，并且会自动挂载到Pod的/run/secrets/kubernetes.io/serviceaccount目录中；
Opaque：base64编码格式的Secret，用来存储密码、密钥等；
kubernetes.io/dockerconfigjson：用来存储私有docker registry的认证信息。

##############Service Account
[root@cobbler ~]# kubectl get secret test-token-86bl8 -o json
{
    "apiVersion": "v1",
    "data": {
        "ca.crt": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUN3akNDQWFxZ0F3SUJBZ0lCQURBTkJna3Foa2lHOXcwQkFRc0ZBREFTTVJBd0RnWURWUVFERXdkcmRXSmwKTFdOaE1CNFhEVEU0TVRBeU1EQTJNRFkxTmxvWERUSTRNVEF4TnpBMk1EWTFObG93RWpFUU1BNEdBMVVFQXhNSAphM1ZpWlMxallUQ0NBU0l3RFFZSktvWklodmNOQVFFQkJRQURnZ0VQQURDQ0FRb0NnZ0VCQUwrZ1ZEem5XallQClBDZmd0QUNLRnZoMUw1Y0tud3lvbXZucGpiZERKa1FCUi9sRCs0K0xBUnJWUnBJblpuODU4UUkwS0VXeDlLSjgKNzFSUUlUUDUzZ2ZQRGpWcmlmSWJIUGN5MUIvR1ZHQk9QeStxUGdXZi91eTc5WGlzT2M5ZjJ1KzMrN0RFMEIxcQoySGl4c2VFTy9mbm9nNnBtRkhvWFZ3eVlOSHNETHRRN1diS29ITWJmWVJMUmlpemZSY3dwVlEvblpaeWlUaEt6CjdhbDFSYVp2SVZRUlU5Ums5VXkwRnRiVkRTTm5GeVFwSGpSM1JDZUJ2UFQxZThISTNPYXlDZHNvZGk0UkRZREIKdEN4bXRIZnpoNEtCcno5Q1JObUNXWDVPS1BTZEZpM2RwQ3k4TC81UmVyZGp2aWV5OTAzT01DMElsRlV2OXVORgpIOG8zcTFpcDVIRUNBd0VBQWFNak1DRXdEZ1lEVlIwUEFRSC9CQVFEQWdLa01BOEdBMVVkRXdFQi93UUZNQU1CCkFmOHdEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBQ1dmVjc4YXBoMmhFYTU5T2RFbWZ0emVrR0hFTXFBemVOWC8KMzhsNDZLbGtScS9ST1ZCUmZCVThuMThQTyt5aElud0lEOUVkYlg1clpQbFJjZDVQcWZ3ZWNtNHhBNFJuV0Z4OQp5cGJ5THZKNFZFZ0hhTzlxZGFneWVRNEZJaUZVakJEeTVzTytoeTRMNDRLTmJIWXJVZTU1Wk5uOS9FcEw0UXpnCldtaGF2MUdUbkxhSERpT21DSmtjdmtwamFSSGFlK1gxK01qSzJ3NW1BNzJjZWFpb1NlQ1phSnNxa1hYdlNBWSsKL2FlcFAxd3pZUzNNeU1ZdkJBWXRxNlJYYnFRS0JIM01tM1FQc0RPZW91V2RQS2I5YXBwMmo5cWhjQkdVODcrYwpBUlVxNFYrUFBEQ3VQaVVxRytmSFdOamdVK3BWc1VTcmJHZVBTTGd2RWtLM2RXRHBuV1E9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K",
        "namespace": "ZGVmYXVsdA==",
        "token": "ZXlKaGJHY2lPaUpTVXpJMU5pSXNJbXRwWkNJNklpSjkuZXlKcGMzTWlPaUpyZFdKbGNtNWxkR1Z6TDNObGNuWnBZMlZoWTJOdmRXNTBJaXdpYTNWaVpYSnVaWFJsY3k1cGJ5OXpaWEoyYVdObFlXTmpiM1Z1ZEM5dVlXMWxjM0JoWTJVaU9pSmtaV1poZFd4MElpd2lhM1ZpWlhKdVpYUmxjeTVwYnk5elpYSjJhV05sWVdOamIzVnVkQzl6WldOeVpYUXVibUZ0WlNJNkluUmxjM1F0ZEc5clpXNHRPRFppYkRnaUxDSnJkV0psY201bGRHVnpMbWx2TDNObGNuWnBZMlZoWTJOdmRXNTBMM05sY25acFkyVXRZV05qYjNWdWRDNXVZVzFsSWpvaWRHVnpkQ0lzSW10MVltVnlibVYwWlhNdWFXOHZjMlZ5ZG1salpXRmpZMjkxYm5RdmMyVnlkbWxqWlMxaFkyTnZkVzUwTG5WcFpDSTZJakprTjJOa1pERm1MVEUxTTJRdE1URmxPUzFpTVdZMExUQXdNR015T1dZd1pqazVNaUlzSW5OMVlpSTZJbk41YzNSbGJUcHpaWEoyYVdObFlXTmpiM1Z1ZERwa1pXWmhkV3gwT25SbGMzUWlmUS5CZy1TazdPVGswVGlsSHRFSHV1Z1ZlOVVheC1rcEFHTnJ2eERTMFA5QVVndTBtdFg1ZlFZTVdUSUZYSlpKTlhJUl9ydFlmczllR3B5dGQwdmRaeXNaRVRBRWxVbWJ4N25WV2hzQTdCQWVHQlFrX3l3aGItdUZOREZMdEFtVTh3UFpUam9PODZjY1BiNzBFNzNOQWxQLVNrT09FdWtGR1pYQXdONDY0Ym9BQmhvOW1yUVo3VWU4YVhHTXZ4akVDcDJXUTBGZm5YNi12OElXMWtBRmlMbnFLbFk1MTN0Z1F5bDNXQ3p0aUJaVE1PSmMxUnJpOGQ2eW9hbk1SbmxVQ1c0RG1HNUZISXF2akxKZDVrRnpyZ2lOdzlyVEkycVgtU0VmR3JnR3pKOUJ4VDQwX2Q3Ni10VTkxbWozSTRqc0N6eHl0N1ZhcXhJaEN0SjZKRHlVME02cFE="
    },
    "kind": "Secret",
    "metadata": {
        "annotations": {
            "kubernetes.io/service-account.name": "test",
            "kubernetes.io/service-account.uid": "2d7cdd1f-153d-11e9-b1f4-000c29f0f992"
        },
        "creationTimestamp": "2019-01-11T01:06:51Z",
        "name": "test-token-86bl8",
        "namespace": "default",
        "resourceVersion": "14468694",
        "selfLink": "/api/v1/namespaces/default/secrets/test-token-86bl8",
        "uid": "2d83c8e0-153d-11e9-b1f4-000c29f0f992"
    },
    "type": "kubernetes.io/service-account-token"
}

#############kubernetes.io/dockerconfigjson
[root@cobbler ~]# kubectl -n kube-system get secrets tianjin -o yaml
apiVersion: v1
data:
  .dockerconfigjson: eyJhdXRocyI6eyIxMC42Ny4zOC45MCI6eyJwYXNzd29yZCI6IkZveGNvbm4xMjMiLCJ1c2VybmFtZSI6Ikg3MTA4NTc5In19fQ==
kind: Secret
metadata:
  annotations:
    field.cattle.io/creatorId: user-kpxwd
    field.cattle.io/projectId: c-v6qjl:p-zwvrx
    lifecycle.cattle.io/create.secretsController_c-v6qjl: "true"
    secret.user.cattle.io/secret: "true"
  creationTimestamp: 2019-01-11T01:31:32Z
  name: tianjin
  namespace: kube-system
  resourceVersion: "14471704"
  selfLink: /api/v1/namespaces/kube-system/secrets/tianjin
  uid: a08a06e4-1540-11e9-b1f4-000c29f0f992
type: kubernetes.io/dockerconfigjson

##############Opaque
###key为token,url
[root@cobbler ~]# kubectl -n cattle-system get secrets cattle-credentials-dd4a25d -o json
{
    "apiVersion": "v1",
    "data": {
        "token": "bjhjaHA3bHRmZ2RxazY0a3p3Yjd4cDk0ZmI1a2dyNTdzaDg5dHZzMmR4dmIyemR2NGYycHBj",
        "url": "aHR0cHM6Ly8xMC42Ny4zNi41OA=="
    },
    "kind": "Secret",
    "metadata": {
        "annotations": {
            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"data\":{\"token\":\"bjhjaHA3bHRmZ2RxazY0a3p3Yjd4cDk0ZmI1a2dyNTdzaDg5dHZzMmR4dmIyemR2NGYycHBj\",\"url\":\"aHR0cHM6Ly8xMC42Ny4zNi41OA==\"},\"kind\":\"Secret\",\"metadata\":{\"annotations\":{},\"name\":\"cattle-credentials-dd4a25d\",\"namespace\":\"cattle-system\"},\"type\":\"Opaque\"}\n"
        },
        "creationTimestamp": "2018-10-20T06:08:30Z",
        "name": "cattle-credentials-dd4a25d",
        "namespace": "cattle-system",
        "resourceVersion": "676",
        "selfLink": "/api/v1/namespaces/cattle-system/secrets/cattle-credentials-dd4a25d",
        "uid": "91701278-d42e-11e8-8283-000c29fba296"
    },
    "type": "Opaque"
}

###key为password,user
[root@cobbler ~]# kubectl -n kube-system get secrets mysql-credential -o json
{
    "apiVersion": "v1",
    "data": {
        "password": "Rm94Y29ubjEyMw==",
        "user": "cm9vdA=="
    },
    "kind": "Secret",
    "metadata": {
        "annotations": {
            "field.cattle.io/creatorId": "user-kpxwd",
            "field.cattle.io/projectId": "c-v6qjl:p-zwvrx",
            "lifecycle.cattle.io/create.secretsController_c-v6qjl": "true",
            "secret.user.cattle.io/secret": "true"
        },
        "creationTimestamp": "2019-01-11T01:36:14Z",
        "name": "mysql-credential",
        "namespace": "kube-system",
        "resourceVersion": "14472334",
        "selfLink": "/api/v1/namespaces/kube-system/secrets/mysql-credential",
        "uid": "48afc56a-1541-11e9-b1f4-000c29f0f992"
    },
    "type": "Opaque"
}

############Overview of RBAC concepts in Kubernetes###########
The RBAC model in Kubernetes is based on three elements:

Roles: definition of the permissions for each Kubernetes resource type
Subjects: users (human or machine users) or groups of users
RoleBindings: definition of what Subjects have which Roles

Roles and ClusterRoles define rules
A RoleBinding or ClusterRoleBinding binds a role to subjects. Subjects can be groups, users or service accounts

How to bind a Subject to a Role or a ClusterRole
bind a human user to a Role/ClusterRole
bind a service account (non-human user) to a Role/ClusterRole
bind a group of human users and/or service accounts to a Role/ClusterRole

In the example below, the RoleBinding example-rolebindingbinds the ServiceAccount example-sto the Role example-role

kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: example-rolebinding
  namespace: mynamespace
subjects:
- kind: ServiceAccount
  name: example-sa
  namespace: mynamespace
roleRef:
  kind: Role
  name: example-role
  apiGroup: rbac.authorization.k8s.io
------------------------------------------------------
For a user named “alice@example.com”:

subjects:
- kind: User
  name: "alice@example.com"
  apiGroup: rbac.authorization.k8s.io
For a group named “frontend-admins”:

subjects:
- kind: Group
  name: "frontend-admins"
  apiGroup: rbac.authorization.k8s.io
For the default service account in the kube-system namespace:

subjects:
- kind: ServiceAccount
  name: default
  namespace: kube-system
For all service accounts in the “qa” namespace:

subjects:
- kind: Group
  name: system:serviceaccounts:qa
  apiGroup: rbac.authorization.k8s.io
For all service accounts everywhere:

subjects:
- kind: Group
  name: system:serviceaccounts
  apiGroup: rbac.authorization.k8s.io
For all authenticated users (version 1.5+):

subjects:
- kind: Group
  name: system:authenticated
  apiGroup: rbac.authorization.k8s.io
For all unauthenticated users (version 1.5+):

subjects:
- kind: Group
  name: system:unauthenticated
  apiGroup: rbac.authorization.k8s.io
For all users (version 1.5+):

subjects:
- kind: Group
  name: system:authenticated
  apiGroup: rbac.authorization.k8s.io
- kind: Group
  name: system:unauthenticated
  apiGroup: rbac.authorization.k8s.io
  
#############查看clusterrolebinding##########
可以看到cluster-admin属于system:masters这个组
[root@cobbler yaml]# kubectl -n kube-system get clusterrolebindings cluster-admin -o json
{
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRoleBinding",
    "metadata": {
        "annotations": {
            "rbac.authorization.kubernetes.io/autoupdate": "true"
        },
        "creationTimestamp": "2018-10-20T06:07:36Z",
        "labels": {
            "kubernetes.io/bootstrapping": "rbac-defaults"
        },
        "name": "cluster-admin",
        "resourceVersion": "92",
        "selfLink": "/apis/rbac.authorization.k8s.io/v1/clusterrolebindings/cluster-admin",
        "uid": "710d2728-d42e-11e8-8283-000c29fba296"
    },
    "roleRef": {
        "apiGroup": "rbac.authorization.k8s.io",
        "kind": "ClusterRole",
        "name": "cluster-admin"
    },
    "subjects": [
        {
            "apiGroup": "rbac.authorization.k8s.io",
            "kind": "Group",
            "name": "system:masters"
        }
    ]
}
