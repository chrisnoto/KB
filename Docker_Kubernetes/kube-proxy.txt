################rke部署时,kube-proxy开启ipvs
1 前提条件
由于ipvs已经加入到了内核的主干，所以为kube-proxy开启ipvs的前提需要加载以下的内核模块：
ip_vs
ip_vs_rr
ip_vs_wrr
ip_vs_sh
nf_conntrack_ipv4

在所有的Kubernetes节点上执行以下脚本:
cat > /etc/sysconfig/modules/ipvs.modules <<EOF
#!/bin/bash
modprobe -- ip_vs
modprobe -- ip_vs_rr
modprobe -- ip_vs_wrr
modprobe -- ip_vs_sh
modprobe -- nf_conntrack_ipv4
EOF
chmod 755 /etc/sysconfig/modules/ipvs.modules && bash /etc/sysconfig/modules/ipvs.modules && lsmod | grep -e ip_vs -e nf_conntrack_ipv4
yum install -y ipset ipvsadm
查看mod是否已加载
[root@worker5 ~]# lsmod |grep vs
ip_vs_sh               12688  0
ip_vs_wrr              12697  0
ip_vs_rr               12600  39
ip_vs                 141432  45 ip_vs_rr,ip_vs_sh,ip_vs_wrr
nf_conntrack          133053  7 ip_vs,nf_nat,nf_nat_ipv4,xt_conntrack,nf_nat_masquerade_ipv4,nf_conntrack_netlink,nf_conntrack_ipv4

接下来还需要确保各个节点上已经安装了ipset软件包yum install ipset。 
为了便于查看ipvs的代理规则，最好安装一下管理工具ipvsadm yum install ipvsadm。
如果以上前提条件如果不满足，则即使kube-proxy的配置开启了ipvs模式，也会退回到iptables模式 

2 rke里cluster.yml配置
  kubeproxy:
    image: ""
    extra_args:
      proxy-mode: ipvs
      masquerade-all: true
    extra_binds:
      - "/usr/lib/modules:/lib/modules"
    extra_env: []

3 执行rke up --config cluster.yml来更新kubeproxy service
rke会使用新的配置来更新kube-proxy容器
4 verify ipvs  登陆到worker5
 a 查看kube-proxy日志
   docker logs kube-proxy
   有下面一条日志
   I0815 07:57:15.705545    4090 server_others.go:176] Using ipvs Proxier.
 b 使用ipvsadm验证
   [root@worker5 ~]# ipvsadm -l --stats -n
IP Virtual Server version 1.2.1 (size=4096)
Prot LocalAddress:Port               Conns   InPkts  OutPkts  InBytes OutBytes
  -> RemoteAddress:Port
TCP  10.43.0.1:443                      85   211546   220277 17383809  226914K
  -> 10.67.36.63:6443                   85   211546   220277 17383809  226914K
TCP  10.43.0.10:53                       0        0        0        0        0
  -> 10.42.10.7:53                       0        0        0        0        0
  -> 10.42.11.9:53                       0        0        0        0        0
TCP  10.43.0.10:9153                     0        0        0        0        0
  -> 10.42.10.7:9153                     0        0        0        0        0
  -> 10.42.11.9:9153                     0        0        0        0        0
TCP  10.43.13.3:6379                     2   355231   263480 23532774 60738867
  -> 10.42.11.12:6379                    2   355231   263480 23532774 60738867
TCP  10.43.13.3:26379                    1   172574    86289 13947968  5016863
  -> 10.42.11.12:26379                   1   172574    86289 13947968  5016863
TCP  10.43.29.117:6379                   3  2096137  2638100  116745K    3996M
  -> 10.42.6.15:6379                     3  2096137  2638100  116745K    3996M
TCP  10.43.29.117:26379                  1   172859    86431 13967576  5024808
  -> 10.42.6.15:26379                    1   172859    86431 13967576  5024808
TCP  10.43.66.211:2181                   2    19460     9746  1130357   705776
  -> 10.67.51.144:2181                   0        0        0        0        0
  -> 10.67.51.145:2181                   1     9720     4865   564371   350821
  -> 10.67.51.146:2181                   1     9740     4881   565986   354955
TCP  10.43.201.194:9200             820900  3624696  3028917    3941M  471563K
  -> 10.67.51.150:9200              820900  3624696  3028917    3941M  471563K
TCP  10.43.207.85:6379                   2   355374   263479 23546833 60747437
  -> 10.42.9.10:6379                     2   355374   263479 23546833 60747437
TCP  10.43.230.189:9092                  1        9        6      579     1489
  -> 10.67.51.144:9092                   0        0        0        0        0
  -> 10.67.51.145:9092                   0        0        0        0        0
  -> 10.67.51.146:9092                   1        9        6      579     1489
UDP  10.43.0.10:53                    4324     4342     4342   325511   572889
  -> 10.42.10.7:53                    1748     1758     1758   135436   234684
  -> 10.42.11.9:53                    1748     1750     1750   135091   234712

