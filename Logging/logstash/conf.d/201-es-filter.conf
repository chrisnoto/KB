filter {
  if [fileset][module] == "elasticsearch" {
    if [fileset][name] == "audit" {
       grok {
          match => {
             "message" => "\[%{TIMESTAMP_ISO8601:[elasticsearch][audit][timestamp]}\]\s*(\[%{WORD:[elasticsearch][node][name]}\])?\s*\[%{WORD:[elasticsearch][audit][layer]}\]\s*\[%{WORD:[elasticsearch][audit][event_type]}\]\s*(origin_type\=\[%{WORD:[elasticsearch][audit][origin_type]}\])?,?\s*(origin_address\=\[%{IPORHOST:[elasticsearch][audit][origin_address]}\])?,?\s*(principal\=\[%{WORD:[elasticsearch][audit][principal]}\])?,?\s*(action\=\[%{DATA:[elasticsearch][audit][action]}\])?,?\s*?(uri=\[%{DATA:[elasticsearch][audit][uri]}\])?,?\s*(request\=\[%{WORD:[elasticsearch][audit][request]}\])?,?\s*(request_body\=\[%{DATA:[elasticsearch][audit][request_body]}\])?,?"
          }
       }
    }
    else if [fileset][name] == "deprecation" {
       grok {
          match => {
             "message" => "\[%{TIMESTAMP_ISO8601:timestamp}\]\[%{LOGLEVEL:[log][level]}%{SPACE}*\]\[%{DATA:[elasticsearch][server][component]}%{SPACE}*\] %{GREEDYMULTILINE:message}"
          }
          pattern_definitions => {
             "GREEDYMULTILINE" => "(.|\n)*"
          }
       }
    }
    else if [fileset][name] == "gc" {
       grok {
          match => {
             "message" => [
                "(?:%{JVM8HEADER}|%{JVM9HEADER}) Total time for which application threads were stopped: %{BASE10NUM:[elasticsearch][gc][threads_total_stop_time_sec]} seconds, Stopping threads took: %{BASE10NUM:[elasticsearch][gc][stopping_threads_time_sec]} seconds",
                "(?:%{JVM8HEADER}) \[GC \(%{DATA:[elasticsearch][gc][phase][name]}\) \[YG occupancy: %{BASE10NUM:[elasticsearch][gc][young_gen][used_kb]} K \(%{BASE10NUM:[elasticsearch][gc][young_gen][size_kb]} K\)\]%{BASE10NUM}: \[Rescan \(parallel\) , %{BASE10NUM:[elasticsearch][gc][phase][parallel_rescan_time_sec]} secs\]%{BASE10NUM}: \[weak refs processing, %{BASE10NUM:[elasticsearch][gc][phase][weak_refs_processing_time_sec]} secs\]%{BASE10NUM}: \[class unloading, %{BASE10NUM:[elasticsearch][gc][phase][class_unload_time_sec]} secs\]%{BASE10NUM}: \[scrub symbol table, %{BASE10NUM:[elasticsearch][gc][phase][scrub_symbol_table_time_sec]} secs\]%{BASE10NUM}: \[scrub string table, %{BASE10NUM:[elasticsearch][gc][phase][scrub_string_table_time_sec]} secs\]\[1 CMS-remark: %{BASE10NUM:[elasticsearch][gc][old_gen][used_kb]}K\(%{BASE10NUM:[elasticsearch][gc][old_gen][size_kb]}K\)\] %{BASE10NUM:[elasticsearch][gc][heap][used_kb]}K\(%{BASE10NUM:[elasticsearch][gc][heap][size_kb]}K\), %{BASE10NUM:[elasticsearch][gc][phase][duration_sec]} secs\] %{PROCTIME}",
                "(?:%{JVM8HEADER}) \[GC \(%{DATA:[elasticsearch][gc][phase][name]}\) \[%{BASE10NUM} CMS-initial-mark: %{BASE10NUM:[elasticsearch][gc][old_gen][used_kb]}K\(%{BASE10NUM:[elasticsearch][gc][old_gen][size_kb]}K\)\] %{BASE10NUM:[elasticsearch][gc][heap][used_kb]}K\(%{BASE10NUM:[elasticsearch][gc][heap][size_kb]}K\), %{BASE10NUM:[elasticsearch][gc][phase][duration_sec]} secs\] %{PROCTIME}",
                "%{JVM9HEADER} GC\(%{BASE10NUM}\) ParNew: %{BASE10NUM}K-\>%{BASE10NUM:[elasticsearch][gc][young_gen][used_kb]}K\(%{BASE10NUM:[elasticsearch][gc][young_gen][size_kb]}K\)",
                "%{JVM9HEADER} GC\(%{BASE10NUM}\) Old: %{BASE10NUM}K-\>%{BASE10NUM:[elasticsearch][gc][old_gen][used_kb]}K\(%{BASE10NUM:[elasticsearch][gc][old_gen][size_kb]}K\)",
                "(?:%{JVM8HEADER}|%{JVM9HEADER}) %{GREEDYMULTILINE:message}"
             ]
          }
          pattern_definitions => {
             "GREEDYMULTILINE" => "(.|\n)*"
             "JVM8HEADER" => "%{TIMESTAMP_ISO8601:timestamp}: %{BASE10NUM:[elasticsearch][gc][jvm_runtime_sec]}:"
             "JVM9HEADER" => "\[%{TIMESTAMP_ISO8601:timestamp}\]\[%{POSINT:[process][pid]}\]\[%{DATA:[elasticsearch][gc][tags]}%{SPACE}*\]"
             "PROCTIME" => "\[Times: user=%{BASE10NUM:[elasticsearch][gc][phase][cpu_time][user_sec]} sys=%{BASE10NUM:[elasticsearch][gc][phase][cpu_time][sys_sec]}, real=%{BASE10NUM:[elasticsearch][gc][phase][cpu_time][real_sec]} secs\]"
          }
       }
       date {
          match => [
             "timestamp",
             "ISO8601"
          ]
          target => "@timestamp"
       }
    }
    else if [fileset][name] == "server" {
       grok {
          match => {
             "message" => "\[%{TIMESTAMP_ISO8601:[elasticsearch][server][timestamp]}\]\[%{LOGLEVEL:[log][level]}%{SPACE}?\]\[%{DATA:[elasticsearch][server][component]}%{SPACE}*\](%{SPACE}*)?(\[%{DATA:[elasticsearch][node][name]}\])?(%{SPACE}*)?(\[gc\](\[young\]\[%{NUMBER:[elasticsearch][server][gc][young][one]}\]\[%{NUMBER:[elasticsearch][server][gc][young][two]}\]|\[%{NUMBER:[elasticsearch][server][gc_overhead]}\]))?%{SPACE}*((\[%{INDEXNAME:[elasticsearch][index][name]}\]|\[%{INDEXNAME:[elasticsearch][index][name]}\/%{DATA:[elasticsearch][index][id]}\]))?%{SPACE}*%{GREEDYMULTILINE:message}"
          }
              pattern_definitions => {
                 "GREEDYMULTILINE" => "(.|\n)*"
                 "INDEXNAME" => "[a-zA-Z0-9_.-]*"
              }
       }
    }
    else if [fileset][name] == "slowlog" {
       grok {
          match => {
             "message" => "\[%{TIMESTAMP_ISO8601:[elasticsearch][slowlog][timestamp]}\]\[%{WORD:[log][level]}(%{SPACE}*)?\]\[%{DATA:[elasticsearch][slowlog][logger]}\]%{SPACE}*\[%{WORD:[elasticsearch][node][name]}\](%{SPACE}*)?(\[%{INDEXNAME:[elasticsearch][index][name]}\]\[%{NUMBER:[elasticsearch][shard][id]}\])?(%{SPACE}*)?(\[%{INDEXNAME:[elasticsearch][index][name]}\/%{DATA:[elasticsearch][index][id]}\])?(%{SPACE}*)?%{SPACE}*(took\[%{DATA:[elasticsearch][slowlog][took]}\],)?%{SPACE}*(took_millis\[%{NUMBER:[elasticsearch][slowlog][took_millis:int}\],)?%{SPACE}*(type\[%{DATA:[elasticsearch][slowlog][type]}\],)?%{SPACE}*(id\[%{DATA:[elasticsearch][slowlog][id]}\],)?%{SPACE}*(routing\[%{DATA:[elasticsearch][slowlog][routing]}\],)?%{SPACE}*(total_hits\[%{NUMBER:[elasticsearch][slowlog][total_hits:int}\],)?%{SPACE}*(types\[%{DATA:[elasticsearch][slowlog][types]}\],)?%{SPACE}*(stats\[%{DATA:[elasticsearch][slowlog][stats]}\],)?%{SPACE}*(search_type\[%{DATA:[elasticsearch][slowlog][search_type]}\],)?%{SPACE}*(total_shards\[%{NUMBER:[elasticsearch][slowlog][total_shards:int}\],)?%{SPACE}*(source\[%{GREEDYMULTILINE:[elasticsearch][slowlog][source_query]}\])?,?%{SPACE}*(extra_source\[%{DATA:[elasticsearch][slowlog][extra_source]}\])?,?"
          }
          pattern_definitions => {
             "GREEDYMULTILINE" => "(.|\n)*"
             "INDEXNAME" => "[a-zA-Z0-9_.-]*"
          }
       }
    }
  }
}
