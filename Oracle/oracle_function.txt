ceil(x)
【功能】返回大于等于x的最小整数值
【参数】x，数字型表达式
【返回】数字
select ceil(4.49),ceil(-4.49) from dual;

floor(x)
【功能】返回小于等于x的最大整数值
【参数】x，数字型表达式
【返回】数字
select floor(4.49),floor(-4.49) from dual;

round(x[,y])
【功能】返回四舍五入后的值
【参数】x,y，数字型表达式,如果y不为整数则截取y整数部分，如果y>0则四舍五入为y位小数，如果y小于0则四舍五入到小数点向左第y位。
【返回】数字
select round(4.4449,2.5),round(4.4449) from dual;

trunc(x[,y])
【功能】返回x按精度y截取后的值
【参数】x,y，数字型表达式,如果y不为整数则截取y整数部分，如果y>0则截取到y位小数，如果y小于0则截取到小数点向左第y位，小数前其它数据用0表示。
【返回】数字
select trunc(4.4649,2.1),trunc(4.4649,3.1) from dual;

trunc(d1[,c1])
【功能】：返回日期d1所在期间(参数c1)的第一天日期
【参数】：d1日期型,c1为字符型(参数)，c1默认为j（即当前日期)
【参数表】：c1对应的参数表:
最近0点日期: 取消参数c1或j
最近的星期日：day或dy或d (每周顺序：日，一，二，三，四，五，六）
最近月初日期：month或mon或mm或rm
最近季日期：q
最近年初日期：syear或year或yyyy或yyy或yy或y(多个y表示精度)
最近世纪初日期：cc或scc
【返回】：日期
【示例】
select sysdate 当时日期,
trunc(sysdate) 今天日期,
trunc(sysdate,'day') 本周星期日,
trunc(sysdate,'month') 本月初,
trunc(sysdate,'q') 本季初日期,
trunc(sysdate,'year') 本年初日期 from dual;

add_months(d1,n1)
【功能】：返回在日期d1基础上再加n1个月后新的日期。
【参数】：d1，日期型，n1数字型
【返回】：日期
select sysdate,add_months(sysdate,9) from dual;

months_between(d1,d2)
【功能】：返回日期d1到日期d2之间的月数。
【参数】：d1，d2 日期型

【返回】：数字
如果d1 大于 d2，则返回正数
如果d1 小于 d2，则返回负数
select floor(months_between(sysdate,to_date('2016-06-22','YYYY-MM-DD'))) from dual;

NTERVAL c1 set1
【功能】：变动日期时间数值
【参数】：c1为数字字符串或日期时间字符串，set1为日期参数
【参数表】：set1具体参照示例
【返回】：日期时间格式的数值,前面多个+号
以天或天更小单位时可用数值表达式借用，如1表示1天，1/24表示1小时，1/24/60表示1分钟
select sysdate+(interval '8' hour) from dual;

extract(c1 from d1)
【功能】：日期/时间d1中，参数(c1)的值
【参数】：d1日期型(date)/日期时间型(timestamp),c1为字符型(参数)
【参数表】：c1对应的参数表详见示例
【返回】：字符
【示例】
select
extract(hour from timestamp '2001-2-16 2:38:40 ' ) 小时,
extract(minute from timestamp '2001-2-16 2:38:40 ' ) 分钟,
extract(second from timestamp '2001-2-16 2:38:40 ' ) 秒,
extract(DAY from timestamp '2001-2-16 2:38:40 ' ) 日,
extract(MONTH from timestamp '2001-2-16 2:38:40 ' ) 月,
extract(YEAR from timestamp '2001-2-16 2:38:40 ' ) 年
 from dual;

【语法】NVL (expr1, expr2)
【功能】若expr1为NULL，返回expr2；expr1不为NULL，返回expr1。
注意两者的类型要一致
select nvl('有值','无效未定义'),nvl(null,'无效未定义') from dual;
nvl()函数比较常用的是这样的nvl(E1,0)，意思是E1参数查询到为null的情况，就返回0，不为null就返回E1，常用于非空校验。
例子
SELECT sal*13+nvl(comm, 0)*13 "年薪" , ename, comm FROM emp;      

decode(条件,值1,翻译值1,值2,翻译值2,...值n,翻译值n,缺省值)
【功能】根据条件返回相应值
【参数】c1, c2, ...,cn,字符型/数值型/日期型，必须类型相同或null
注：值1……n 不能为条件表达式,这种情况只能用case when then end解决
使用方法：　　
　　1、比较大小　　
　　select decode(sign(变量1-变量2),-1,变量1,变量2) from dual; --取较小值
　　sign()函数根据某个值是0、正数还是负数，分别返回0、1、-1　　
　　例如：
　　变量1=10，变量2=20
　　则sign(变量1-变量2)返回-1，decode解码结果为“变量1”，达到了取较小值的目的。
select decode(sign(a-b),1,'a>b',0,'equal',-1,'a<b') from (select 50 a,50 b from dual);

【语法】NULLIF (expr1, expr2)
【功能】expr1和expr2相等返回NULL，不相等返回expr1
select nullif(2,2),nullif(2,1) from dual;

NULLIF函数和COALESCE函数被定义为"CASE缩写词"，两个函数都被视为CASE表达式的变种
NULLIF函数，不能把字面值NULL赋给exp1
NULLIF等价于
CASE
  WHEN exp1 = exp2 THEN NULL
  ELSE exp1
END

COALESCE两个以上表达式时等价于
CASE 
  WHEN exp1 IS NOT NULL THEN exp1
  WHEN exp2 IS NOT NULL THEN exp2
  ...
  ELSE expN
END
又等价于
NUL(exp1,NVL(exp2,NVL(exp3,...)))

listagg函数  行列转换
SQL> select deptno,listagg(ename,',') within group(order by ename) as employee_list from scott.emp group by deptno;

    DEPTNO EMPLOYEE_LIST
---------- --------------------------------------------------
        10 CLARK,KING,MILLER
        20 ADAMS,FORD,JONES,SCOTT,SMITH
        30 ALLEN,BLAKE,JAMES,MARTIN,TURNER,WARD



# ANY /ALL
> any (1500,2000,2500)        > 1500    大于最小
< any (1500,2000,2500)        < 2500    小于最大
> all (1500,2000,2500)        > 2500    大于最大
< all (1500,2000,2500)        < 1500    小于最小

=======================================================================================================================================================================



#分页查询
SQL> select empno,ename,sal from emp where rownum < 13 minus select empno,ename,sal from emp where rownum <11;

     EMPNO ENAME             SAL
---------- ---------- ----------
      7876 ADAMS            1100
      7900 JAMES             950
SQL> select * from(
    select empno,ename,sal,rownum as rn from emp where rownum < 13) where rn >10;

     EMPNO ENAME             SAL
---------- ---------- ----------
      7876 ADAMS            1100
      7900 JAMES             950


SQL> with T as
    (select empno,ename,sal,rownum as rn from emp where rownum < 13)
   select empno,ename,sal from T where rn >10;

     EMPNO ENAME             SAL
---------- ---------- ----------
      7876 ADAMS            1100
      7900 JAMES             950


取回前 n 笔资料
-- 在 Oracle 12c 以前, 利用 subquery 与 rownum 实现
select b.*
  from (select a.*
          from emp a
         order by a.name
       ) b
 where rownum <= n;
 
-- 在 Oracle 12c 以后, 利用 fetch 即可
select a.*
  from emp a
 order by a.name
 fetch first n rows only;  

 取回第 n ~ m 笔资料
-- 在 Oracle 12c 以前, 利用 subquery 与 rownum 实现
select *
  from (select rownum bRn
             , b.*
          from (select rownum aRn
                     , a.*
                  from emp a
                 order by a.name
               ) b
       )
 where bRn between n and m;
 
-- 在 Oracle 12c 以后, 利用 fetch 与 offset 即可
select a.*
  from emp a
 order by a.name
offset (n-1) rows  -- 略過 n-1 笔, 也就是從第 n 笔開始
 fetch next (m - n + 1) rows only;  -- 取几笔資料, n ~ m 共有 (m - n + 1) 笔
	  

#CASE语句
简单case函数   (when后面接的表达式的值与selector的值匹配)  匹配时数据类型要一样，不一样会出错
select EMPNO,ENAME,
case sign(sal-2000)
when  -1 then 'below 2000'
when  1 then 'above 2000'
END as salary
from EMP;

v_num_flag 这里是布尔值   如果它没有被赋值，则为null, null与第一个表达式产生的true比较会得到false
当输入数字4的时候，并不会得到when后面的输出，而是else后面的输出
declare
v_num  number :=&sv_num;
v_num_flag Boolean :=true;          
begin
  case v_num_flag 
    when mod(v_num,2)=0 then  
	  dbms_output.put_line (v_num||' is even number');
	else
      dbms_output.put_line (v_num||' is odd number');
  end case;
  dbms_output.put_line ('Done');
END;  
/

case搜索函数   (when后面有能产生布尔值true,false,null的搜索条件)
select EMPNO,ENAME,
case
when SAL < 1500 then 'band 1'
when SAL >=1500 and SAL < 2500  then 'band 2'
when SAL >=1500 and SAL < 6000 then 'band 3'
END as salary
from EMP order by salary;

#CASE表达式
几乎等同于CASE语句结构，它也有两种形式，简单和搜索式
第一种情况：表达式的值会被赋给一个变量
CASE表达式中，WHEN和ELSE子句包含的表达式结尾处不是分号，
分号出现在END的后面
v_result :=
  CASE v_num_flag
    WHEN 0 THEN v_num||' is even number'
	ELSE v_num||' is odd number'
  END;
  DBMS_OUTPUT.PUT_LINE (v_result);

第二种情况：表达式的值被用作select into的某个列
END后不接分号，接列名
DECLARE
  v_course_no    NUMBER;
  v_description  VARCHAR2(50);
  v_prereq       VARCHAR2(35);
begin 
  select course_no,description,
    CASE  
      WHEN prerequisite IS NOT NULL THEN
        'No prerequisite course required'
      ELSE TO_CHAR(prerequisite)
     END prerequisite
   INTO v_couse_no,v_description,v_prereq 
   FROM course
   where course_no = 20;   


   
decode函数
select empno,ename,decode(sign(sal-2000),1,'above 2000',-1,'below 2000') from emp;

select empno,ename,decode(sign(sal-2500),1,'band 3',-1,
decode(sign(sal-1500),1,'band 2',0,'band 2',-1,'band 1')) as salary 
from emp order by salary;

分析函数
1 sum over
select distinct deptno,sum(sal)over(partition by deptno) sum_sal from emp;
=
select deptno,sum(sal) as sum_sal from emp group by deptno;

2 rank over
SQL> select deptno,empno,ename,sal,row_number()over(partition by deptno order by sal desc) sal_rank from emp;

    DEPTNO      EMPNO ENAME             SAL   SAL_RANK
---------- ---------- ---------- ---------- ----------
        10       7839 KING             5000          1
        10       7782 CLARK            2450          2
        10       7934 MILLER           1300          3
        20       7788 SCOTT            3000          1
        20       7902 FORD             3000          2
        20       7566 JONES            2975          3
        20       7876 ADAMS            1100          4
        20       7369 SMITH             800          5
        30       7698 BLAKE            2850          1
        30       7499 ALLEN            1600          2
        30       7844 TURNER           1500          3
        30       7654 MARTIN           1250          4
        30       7521 WARD             1250          5
        30       7900 JAMES             950          6

14 rows selected.

SQL> select deptno,empno,ename,sal,rank()over(partition by deptno order by sal desc) sal_rank from emp;

    DEPTNO      EMPNO ENAME             SAL   SAL_RANK
---------- ---------- ---------- ---------- ----------
        10       7839 KING             5000          1
        10       7782 CLARK            2450          2
        10       7934 MILLER           1300          3
        20       7788 SCOTT            3000          1
        20       7902 FORD             3000          1
        20       7566 JONES            2975          3
        20       7876 ADAMS            1100          4
        20       7369 SMITH             800          5
        30       7698 BLAKE            2850          1
        30       7499 ALLEN            1600          2
        30       7844 TURNER           1500          3
        30       7654 MARTIN           1250          4
        30       7521 WARD             1250          4
        30       7900 JAMES             950          6

14 rows selected.

SQL> select deptno,empno,ename,sal,dense_rank()over(partition by deptno order by sal desc) sal_rank from emp;

    DEPTNO      EMPNO ENAME             SAL   SAL_RANK
---------- ---------- ---------- ---------- ----------
        10       7839 KING             5000          1
        10       7782 CLARK            2450          2
        10       7934 MILLER           1300          3
        20       7788 SCOTT            3000          1
        20       7902 FORD             3000          1
        20       7566 JONES            2975          2
        20       7876 ADAMS            1100          3
        20       7369 SMITH             800          4
        30       7698 BLAKE            2850          1
        30       7499 ALLEN            1600          2
        30       7844 TURNER           1500          3
        30       7654 MARTIN           1250          4
        30       7521 WARD             1250          4
        30       7900 JAMES             950          5

14 rows selected.

WITH T AS
(SELECT 1 ID ,'A' NAME FROM DUAL
 UNION
 SELECT 2 ID ,'B' NAME FROM DUAL
 UNION
 SELECT 3 ID ,'C' NAME FROM DUAL
 UNION
 SELECT 4 ID ,'D' NAME FROM DUAL
 UNION
 SELECT 5 ID ,'E' NAME FROM DUAL
)
 SELECT NAME,ID,LAG(ID,1,'') OVER(ORDER BY NAME) AS LAG_ID FROM T;

不用建表了 
WITH T AS
(SELECT 10 DEPTNO ,7839 EMPNO,'KING' ENAME,5000 SAL FROM DUAL
 UNION
 SELECT 10 DEPTNO ,7782 EMPNO,'CLARK' ENAME,2450 SAL FROM DUAL
 UNION
 SELECT 20 DEPTNO ,7788 EMPNO,'SCOTT' ENAME,3000 SAL FROM DUAL
 UNION
 SELECT 20 DEPTNO ,7876 EMPNO,'ADAMS' ENAME,1100 SAL FROM DUAL
 UNION
 SELECT 20 DEPTNO ,7369 EMPNO,'SMITH' ENAME,800 SAL FROM DUAL
) 
select * from T order by SAL;
 
# rollup函数
select a.dname,sum(b.sal) from scott.dept a,scott.emp b where a.deptno=b.deptno group by a.dname union all
select 'Total salary:',sum(b.sal) from scott.dept a,scott.emp b where a.deptno=b.deptno; 
=
SQL> select a.dname,sum(b.sal) from dept a,emp b where a.deptno=b.deptno group by rollup(a.dname);

DNAME          SUM(B.SAL)
-------------- ----------
ACCOUNTING           8750
RESEARCH            10875
SALES                9400
                    29025

# MODEL
SQL> select * from scott.emp model
  2  dimension by (empno) measures (ename,job,mgr,hiredate,sal,comm,0 as income) rules(income[any]=sal[cv()]+comm[cv()]);

     EMPNO ENAME      JOB              MGR HIREDATE         SAL       COMM     INCOME
---------- ---------- --------- ---------- --------- ---------- ---------- ----------
      7369 SMITH      CLERK           7902 17-DEC-80        800
      7499 ALLEN      SALESMAN        7698 20-FEB-81       1600        300       1900
      7521 WARD       SALESMAN        7698 22-FEB-81       1250        500       1750
      7566 JONES      MANAGER         7839 02-APR-81       2975
      7654 MARTIN     SALESMAN        7698 28-SEP-81       1250       1400       2650
      7698 BLAKE      MANAGER         7839 01-MAY-81       2850
      7782 CLARK      MANAGER         7839 09-JUN-81       2450
      7788 SCOTT      ANALYST         7566 19-APR-87       3000
      7839 KING       PRESIDENT            17-NOV-81       5000
      7844 TURNER     SALESMAN        7698 08-SEP-81       1500          0       1500
      7876 ADAMS      CLERK           7788 23-MAY-87       1100
      7900 JAMES      CLERK           7698 03-DEC-81        950
      7902 FORD       ANALYST         7566 03-DEC-81       3000
      7934 MILLER     CLERK           7782 23-JAN-82       1300

# connect by  用于父子之间的连线关系
其中用piror表示上一条记录，比如 connect by prior org_id = parent_id就是说上一条记录的Org_id 是本条记录的parent_id，即本记录的父亲是上一条记录
select level,empno,ename,job,mgr
  from scott.emp e
 start with e.ename = 'KING'
 connect by prior e.empno = e.mgr;          #本条记录的mgr是上条记录的empno

     LEVEL      EMPNO ENAME      JOB              MGR
---------- ---------- ---------- --------- ----------
         1       7839 KING       PRESIDENT
         2       7566 JONES      MANAGER         7839
         3       7788 SCOTT      ANALYST         7566
         4       7876 ADAMS      CLERK           7788
         3       7902 FORD       ANALYST         7566
         4       7369 SMITH      CLERK           7902
         2       7698 BLAKE      MANAGER         7839
         3       7499 ALLEN      SALESMAN        7698
         3       7521 WARD       SALESMAN        7698
         3       7654 MARTIN     SALESMAN        7698
         3       7844 TURNER     SALESMAN        7698
         3       7900 JAMES      CLERK           7698
         2       7782 CLARK      MANAGER         7839
         3       7934 MILLER     CLERK           7782

#指定level<3 ，控制深度    level < 3    level in (1,2)   level =2
SQL> select level,empno,ename,job,mgr from scott.emp e where level < 3 start with e.ename='KING' connect by prior e.empno = e.mgr;

     LEVEL      EMPNO ENAME      JOB              MGR
---------- ---------- ---------- --------- ----------
         1       7839 KING       PRESIDENT
         2       7566 JONES      MANAGER         7839
         2       7698 BLAKE      MANAGER         7839
         2       7782 CLARK      MANAGER         7839

SQL> select level,empno,ename,job,mgr from scott.emp e start with e.ename='SMITH' connect by e.empno = prior e.mgr;

     LEVEL      EMPNO ENAME      JOB              MGR
---------- ---------- ---------- --------- ----------
         1       7369 SMITH      CLERK           7902
         2       7902 FORD       ANALYST         7566
         3       7566 JONES      MANAGER         7839
         4       7839 KING       PRESIDENT
通过connect by生成序列
SELECT ROWNUM FROM DUAL  CONNECT BY ROWNUM  <= 10;

    ROWNUM
----------
         1
         2
         3
         4
         5
         6
         7
         8
         9
        10

	  