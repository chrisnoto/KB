Oracle数据库恢复

恢复分两种：

（1） Crash recovery/Instance recovery
    rac中crash是多個instance都故障了，instance recovery是單個instance故障
（2） Media recovery

（1） Crash Recovery 是在启动时DB 自动完成，而MediaRecovery 需要DBA 手工的完成。

（2） Crash Recovery 使用online redo log，Media Recovery 使用archived log 和 online redo log。

（3） Media Recovery 可能还需要从备份中Restore datafile。

Oracle内部主要存在以下四种SCN
SCN与CHECKPOINT
CKPT进程在checkpoint发生时，将当时的SCN号写入数据文件头和控制文件，同时通知DBWR进程将数据块写到数据文件。
与checkpoint相关的SCN号有四个，其中三个存在控制文件中，一个存放在数据文件头中。

1.System Checkpoint SCN
当checkpoint完成后，ORACLE将System Checkpoint SCN号存放在控制文件中。我们可以通过下面SQL语句查询：
select checkpoint_change# from v$database;

2.Datafile Checkpoint SCN
当checkpoint完成后，ORACLE将Datafile Checkpoint SCN号存放在控制文件中。我们可以通过下面SQL语句查询所有数据文件的Datafile Checkpoinnt SCN号。
select name,checkpoint_change# from v$datafile;

3.Start SCN号
ORACLE将Start SCN号存放在数据文件头中。
这个SCN用于检查数据库启动过程是否需要做Media Recovery.
我们可以通过以下SQL语句查询：
select name,checkpoint_change# from v$datafile_header;

4.End SCN (Stop SCN)号
ORACLE将End SCN号存放在控制文件中。
这个SCN号用于检查数据库启动过程是否需要做Instance Recovery.        db open in read-write mode 该SCN号为NULL

Oracle根据以下规则判断某个数据文件是否需要恢复及恢复类型
if (数据文件检查点SCN <数据文件头SCN)
  then "控制文件来自备份，需要进行不完全恢复，恢复之后得用resetlog方式打开”
else if (数据文件检查点SCN > 数据文件头SCN)
  then "数据文件来自备份，需要log进行完全或不完全恢复"
else if (数据文件检查点SCN = 数据文件头SCN) 
   then "数据库能正常open，还需要判断是否需要实例恢复"
   if (数据文件终止SCN = 数据文件检查点SCN)
       then "数据库打开时不需要实例恢复“
   else if (数据文件终止SCN = NULL)
       then "数据库需要实例恢复"

实验：
-----------------------------------------------------------------------------------------------------
冷备份数据文件，用备份文件cp回数据文件目录后
startup mount状态	 查询SCN：
SQL> select file#,change# from v$recover_file;        (需要恢复的数据文件，及数据文件头中的Start SCN号)
     FILE#    CHANGE#
---------- ----------
         1    1281696
         2    1281696
         3    1281696
         4    1281696
         5    1281696
SQL> select name,checkpoint_change# from v$datafile_header;   数据文件头中的Start SCN号
NAME                                                        CHECKPOINT_CHANGE# 
/data/oradata/CHENSEN/datafile/o1_mf_system_hocv1ymr_.dbf   1281696

SQL> select checkpoint_change# from v$database;       控制文件中的System Checkpoint SCN

CHECKPOINT_CHANGE#
------------------
           1282151
		   
SQL> select name,checkpoint_change# from v$datafile;              控制文件中的Datafile Checkpoint SCN
NAME                                                        CHECKPOINT_CHANGE# 
/data/oradata/CHENSEN/datafile/o1_mf_system_hocv1ymr_.dbf	1282151   
这时 数据文件检查点SCN > 数据文件头SCN  需要log进行完全或不完全恢复
-----------------------------------------------------------------------------------------------------	   
1 RMAN
1.1 database level 
DBPITR  database point-in-time recovery  (incomplete recovery)
restore a whole database backup and apply redo logs 

# example
RUN
{ 
  SET UNTIL SCN 1000;    
  RESTORE DATABASE;
  RECOVER DATABASE;
}

# To perform DBPITR to a noncurrent incarnation:
-----------------------------------------------------
*  LIST INCARNATION OF DATABASE trgt;

List of Database Incarnations
DB Key  Inc Key   DB Name   DB ID       STATUS     Reset SCN    Reset Time
------- -------   -------   ------      -------    ----------   ----------
1       2         TRGT      1224038686  PARENT     1            02-OCT-13
1       582       TRGT      1224038686  CURRENT    59727        10-OCT-13

*  Ensure that the database is started but not mounted.
STARTUP FORCE NOMOUNT;

*  Reset the target database to the incarnation obtained in Step 2.
In this example, specify the incarnation current at the time of the backup of 2 October. Use the value from the Inc Key column to identify the incarnation.

RESET DATABASE TO INCARNATION 2;

* Restore and recover the database, performing the following actions in the RUN command:
  Set the end time for recovery to the time just before the loss of the data.
  Allocate any channels required that are not configured.
  Restore the control file from the October 2 backup and mount it.
  Restore the data files and recover the database. Use the RECOVER DATABASE ... UNTIL command to perform DBPITR, bringing the database to the target time of 7:55 a.m. on October 8, just before the data was lost.
  The following example shows all of the steps required in this case:

RUN
{
  SET UNTIL TIME 'Oct 8 2013 07:55:00'; 
  RESTORE CONTROLFILE;
  # without recovery catalog, use RESTORE CONTROLFILE FROM AUTOBACKUP
  ALTER DATABASE MOUNT; 
  RESTORE DATABASE;
  RECOVER DATABASE;
}
ALTER DATABASE OPEN RESETLOGS;

When your database is running in ARCHIVELOG mode, then DBPITR is an option in nearly all circumstances
RMAN DBPITR has the following disadvantages:
* You cannot return selected objects to their earlier state, only the entire database.
* Your entire database is unavailable during the DBPITR.
* DBPITR can be time-consuming because RMAN must restore all data files. Also, RMAN may need to restore redo logs and incremental backups to recover the data files.
 If backups are on tape, then this process can take even longer.

1.2 tablespace level 
TSPITR  tablespace point-in-tiem recovery
retrun these tablespaces to an earlier SCN

1.3 table or table partition level
recovring tables or table partitions to a specific point in time

2 Flashback
supports viewing past states of data, and winding and rewinding data back and forth in time, 
WITHOUT requiring the restore of the database from backup

2.1 Rewinding a Database with Flashback Database    - Physical
Unlike the other flashback features, it operates at a physical level and reverts the current data files to their contents at a past time.

2.2 Rewinding a Table with Flashback Table          - Logical
All logical flashback features except Flashback Drop rely on undo data
Flashback Table uses information in the undo tablespace rather than restored backups to retrieve the table.
The logical-level flashback features of Oracle do not depend on RMAN and are available whether or not RMAN is part of your backup strategy.

2.3 Oracle Flashback Query

2.4 Oracle Flashback Version Query

2.5 Oracle Flashback Transaction Query

2.6 Oracle Flashback Transaction

2.7 Rewinding a DROP TABLE Operation with Flashback Drop
Flashback Drop relies on a mechanism called the recycle bin


RMAN备份
1 obsolete 指的就是超过备份策略的备份集
2 expired 指的是rman里面有，但是磁盘上没有的备份集，需要crosscheck一下
3 With DELETE INPUT, RMAN only deletes the specific copy of the archived redo log chosen for the backup set.
  With DELETE ALL INPUT, RMAN will delete each backed-up archived redo log file from all log archiving destinations.
4 默认情况下oracle 将配置的备份保留策略应用于归档重做日志
  配置归档日志删除策略：归档日志备份超过 2 次，归档日志将会被删除。
5 controlfile自动备份打开后，
RMAN will automatically takes the backup of control file and server parameter file in the directory specified in DB_RECOVERY_FILE_DEST

RMAN>
run{
configure retention policy to recovery window of 7 days;
CONFIGURE DEVICE TYPE DISK PARALLELISM 2 BACKUP TYPE TO COMPRESSED BACKUPSET;
configure controlfile autobackup on;
configure controlfile autobackup format for device type disk to '/data/rmanbak/ctl_%F.ctl';
configure archivelog deletion policy to backed up 2 times to device type disk;
allocate channel c1 device type disk;
allocate channel c2 device type disk;
backup database format '/data/rmanbak/chensen_full_backup_%d_%T_%U.bak';
sql 'alter system archive log current';
backup archivelog all format '/data/rmanbak/arch_%n_%T_%U' delete all input;
crosscheck backup;
crosscheck archivelog all;
delete noprompt expired backup;
delete noprompt obsolete;
delete noprompt expired archivelog all;
delete noprompt backup of database completed before 'sysdate-7';
release channel c1;
release channel c2;
}

RMAN恢复
1 Restoring datafiles is retrieving them from backups as needed for a recovery operation. 
2 Recovery is the application of changes from redo logs and incremental backups to a restored datafile, 
to bring the datafile to a desired SCN (point in time) or to current time.

1 Recovering the Whole Database
RMAN> STARTUP FORCE MOUNT; 
      RESTORE DATABASE; 
      RECOVER DATABASE; 
      ALTER DATABASE OPEN;
2 Recovering Current Tablespaces
RMAN> SQL 'ALTER TABLESPACE users OFFLINE'; 
      RESTORE TABLESPACE users; 
      RECOVER TABLESPACE users; 
      SQL 'ALTER TABLESPACE users ONLINE;
3 Recovering Current Datafiles
RMAN> SQL 'ALTER DATABASE DATAFILE 7 OFFLINE'; 
      RESTORE DATAFILE 7;
      RECOVER DATAFILE 7; 
      SQL 'ALTER DATABASE DATAFILE 7 ONLINE';
4 Recovering Individual Data Blocks
RMAN> BLOCKRECOVER CORRUPTION LIST;
or
RMAN> BLOCKRECOVER DATAFILE 7 BLOCK 233, 235 DATAFILE 4 BLOCK 101;


## 查看RMAN备份
set pages 1000
set lines 222
col STATUS format a9
col Duration_hrs format 999.99
alter  session SET NLS_DATE_FORMAT = 'dd-mm-yyyy hh:mi:ss';

select  SESSION_KEY, INPUT_TYPE, STATUS,START_TIME,
 end_time, elapsed_seconds/3600 Duration_hrs
from  V$RMAN_BACKUP_JOB_DETAILS
order by session_key;

SESSION_KEY INPUT_TYPE    STATUS                  START_TIME          END_TIME            DURATION_HRS
----------- ------------- ----------------------- ------------------- ------------------- ------------
          4 DB FULL       COMPLETED               22-10-2020 01:50:34 22-10-2020 01:54:51   .071388889
         48 DB FULL       FAILED                  25-10-2020 09:35:35 25-10-2020 09:42:36   .116944444
         53 DB FULL       COMPLETED               27-10-2020 11:00:27 27-10-2020 11:01:25   .016111111
         65 DB FULL       FAILED                  08-11-2020 11:31:03 08-11-2020 11:31:05   .000555556
         67 ARCHIVELOG    FAILED                  08-11-2020 01:38:06 08-11-2020 01:39:03   .015833333
         75 DB FULL       COMPLETED WITH WARNINGS 08-11-2020 01:43:37 08-11-2020 01:49:24   .096388889
        117 ARCHIVELOG    COMPLETED               04-12-2020 10:28:59 04-12-2020 10:29:10   .003055556

------------备份控制文件----------
## rman备份控制文件
rman备份控制文件分为两种情况。
1、自动备份
(1) 需要配置
CONFIGURE CONTROLFILE AUTOBACKUP ON
CONFIGURE CONTROLFILE AUTOBACKUP FORMAT FOR DEVICE TYPE DISK TO '/data/rmanbak/ctl_%f.ctl';
配置之后，控制文件和spfile会在每次rman备份之后自动备份controlfile和spfile
另外在数据库的structure变化之后，也会自动备份controlfile
自动备份的controlfile，可以在没有rman的catalog的情况下，进行恢复，因为oracle知道默认的controlfile自动备份所在的位置及命名规则，
所以可以搜索该备份，进行恢复，使用命令 restore controfile from autobackup
(2) 在备份datafile 1时会自动备份controlfile和spfile     (隐式自动备份、备份集备份 即使controlfile autobackup关闭的情况下)
(3) 快照控制文件。(隐式自动备份、镜像备份)
快照控制文件是由RMAN在系统指定位置生成的当前控制文件的一个副本。
我们知道控制文件在整个数据库生命期中在不断的时时刻刻发生变化，RMAN备份需要依赖于控制文件或恢复目录，也就是说需要知道备份开始时的检查点SCN
以及所有文件结构信息并且在整个备份期间这些信息需要保持一致，但又不能锁定控制文件(锁定操作无法执行检查点，切换日志等)。因此既要保持一致性，
又不影响数据库的正常操作。快照控制文件就应运而生了。RMAN只在备份或同步操作期间对实际控制文件进行一个短暂的锁定，并根据其内容来生成或刷新快照控制文件。
一旦该动作完成之后，RMAN将切换到使用快照控制文件进行备份及同步操作。从而保证备份期间控制文件，数据文件等等的一致性。
综上所述，其主要作用是使用RMAN同步恢复目录或备份时能得到一个一致性的控制文件
当RMAN开始备份时，Oracle会检查系统控制文件与快照控制文件
是否一致（如果不存在，那么会从控制文件提取信息创建），若不一致则刷新快照控制文件。
RMAN仅当以下情况下需要快照控制文件：1.同步恢复目录时2.对当前控制文件进行备份时。在RAC环境下，仅仅在实施RMAN备份的节点上需要快照控制文件;
因此快照控制文件是不需要在所有实例上全局可用的
把快照还原成控制文件
采用rman恢复： restore controlfile from '/$ORACLE_HOME/dbs/snapcf_br.f';
或直接cp

2、手工备份
(1) 运行 backup current controlfile format='/data/rmanbak/ctl_%d_%T_%s_%p.ctl';
(2) 在backup时，包含include current controlfile
(3) BACKUP AS COPY CURRENT CONTROLFILE FORMAT '/home/oracle/ctl.bak';

手工备份的controlfile不同于自动备份的controlfile。
**** 在手工备份生成的controlfile备份中只包含当前rman备份的信息，手工备份的controlfile不能自动恢复，需要使用dbms_backup_restore这个包来完成。

## 在线镜像备份controlfile
SQL> alter database backup controlfile to trace as '/data/bkdata/control.sql';
Database altered.

SQL> alter database backup controlfile to '/data/bkdata/control01.ctl';
Database altered. 


------------还原控制文件------------
## controlfile完全损坏或丢失 
编写control.sql，可参照备份出来的controlfile或者参数controlfile模板编写
shutdown immediate;
alter database nomount;
@control.sql;
alter database mount;
alter database open resetlogs;

# 单个controlfile损坏或丢失
可以直接cp一份（shutdown情况下）

# controfile完全丢失，使用旧的备份，SCN号不一致
会报错
SQL> startup
ORACLE instance started.

Total System Global Area 3991842816 bytes
Fixed Size                  2259400 bytes
Variable Size            1056966200 bytes
Database Buffers         2919235584 bytes
Redo Buffers               13381632 bytes
Database mounted.
ORA-01190: control file or data file 1 is from before the last RESETLOGS
ORA-01110: data file 1: '/data/oradata/CHENSEN/datafile/o1_mf_system_hocv1ymr_.dbf'

继续处理继续报错
SQL> alter database mount;
alter database mount
*
ERROR at line 1:
ORA-01100: database already mounted

SQL> alter database open resetlogs;
alter database open resetlogs
*
ERROR at line 1:
ORA-01139: RESETLOGS option only valid after an incomplete database recovery

SQL> recover database until cancel;
ORA-00283: recovery session canceled due to errors
ORA-19909: datafile 1 belongs to an orphan incarnation
ORA-01110: data file 1: '/data/oradata/CHENSEN/datafile/o1_mf_system_hocv1ymr_.dbf'

SQL> recover database;
ORA-00283: recovery session canceled due to errors
ORA-19909: datafile 1 belongs to an orphan incarnation
ORA-01110: data file 1: '/data/oradata/CHENSEN/datafile/o1_mf_system_hocv1ymr_.dbf'

SQL> recover database using backup controlfile;
ORA-00283: recovery session canceled due to errors
ORA-19909: datafile 1 belongs to an orphan incarnation
ORA-01110: data file 1: '/data/oradata/CHENSEN/datafile/o1_mf_system_hocv1ymr_.dbf'
处理：
RMAN> list incarnation;
using target database control file instead of recovery catalog
List of Database Incarnations
DB Key  Inc Key DB Name  DB ID            STATUS  Reset SCN  Reset Time
------- ------- -------- ---------------- --- ---------- ----------
1       1       CHENSEN  1457098761       PARENT  1          24-AUG-13
2       2       CHENSEN  1457098761       PARENT  925702     07-SEP-20
3       3       CHENSEN  1457098761       PARENT  1120431    02-NOV-20
4       4       CHENSEN  1457098761       PARENT  1121486    02-NOV-20
5       5       CHENSEN  1457098761       PARENT  1122516    02-NOV-20
6       6       CHENSEN  1457098761       CURRENT 1159688    03-NOV-20
7       7       CHENSEN  1457098761       ORPHAN  1181418    03-NOV-20

SQL> alter session set NLS_DATE_FORMAT='DD-MM-YYYY HH24:MI:SS';

Session altered.

SQL> select incarnation#,resetlogs_change#,resetlogs_time from v$database_incarnation;

INCARNATION# RESETLOGS_CHANGE# RESETLOGS_TIME
------------ ----------------- -------------------
           1                 1 24-08-2013 11:37:30
           2            925702 07-09-2020 16:17:16
           3           1120431 02-11-2020 16:01:31
           4           1121486 02-11-2020 16:11:05
           5           1122516 02-11-2020 16:36:20
           6           1159688 03-11-2020 14:48:42
           7           1181418 03-11-2020 16:37:36

7 rows selected.
...
...
...
#重要 Review the recovery results. Open the database in Read Only mode with the following command to 
check if you are satisfied with the results:
SQL>Alter database open Read Only;
8.If you are satisfied, open the database with the Resetlogs option.
SQL>Alter database open Resetlogs;
•If you are not satisfied, repeat the procedure of DBPITR to a new target time.

--------------- 删除 controlfile,spfile,datafile,redolog,archive redo log后还原----------------
RMAN> startup nomount pfile='/home/oracle/product/11.2.4/dbhome_1/dbs/initchensen.ora';
RMAN> set DBID=1457098761;
RMAN> restore spfile to pfile '/home/oracle/product/11.2.4/dbhome_1/dbs/spfilechensen.ora' from '/data/rmanbak/ctl_c-1457098761-20201108-01.ctl';
RMAN> restore controlfile from '/data/rmanbak/ctl_c-1457098761-20201108-01.ctl';
RMAN> alter database mount;
RMAN> crosscheck backup;
RMAN> catalog start with '/data/rmanbak';
yes
RMAN> restore database preview summary;
RMAN> restore database;
发生错误 RMAN-06054: media recovery requesting unknown archived log
media recovery requesting unknown archived log for thread 1 with sequence 7 and starting SCN of 1409011
系统备份中并没有 seq为7的archive log
RMAN> recover database until cancel;
SQL> alter database open resetlogs;
SQL> select open_mode from v$database;
OPEN_MODE
--------------------
READ WRITE
# fix wrong db_unique_name
SQL> alter system set db_unique_name='chensen' scope=spfile;
alter system set db_unique_name='chensen' scope=spfile
*
ERROR at line 1:
ORA-32001: write to SPFILE requested but no SPFILE is in use
SQL> create spfile from memory;
SQL> shutdown immediate;
SQL> startup;
SQL> show parameter spfile;

NAME                                 TYPE        VALUE
------------------------------------ ----------- ------------------------------
spfile                               string      /home/oracle/product/11.2.4/db
                                                 home_1/dbs/spfilechensen.ora
SQL> alter system set db_unique_name='chensen' scope=spfile;

System altered.

SQL> show parameter db_unique_name;

NAME                                 TYPE        VALUE
------------------------------------ ----------- ------------------------------
db_unique_name                       string      csll
SQL> shutdown immediate;
SQL> startup;
SQL> show parameter db_unique_name;

NAME                                 TYPE        VALUE
------------------------------------ ----------- ------------------------------
db_unique_name                       string      chensen
SQL> shutdown immediate;
shell底下 cp datafile and tempfile
SQL> startup mount;
SQL> alter database rename file '/data/oradata/CSLL/datafile/o1_mf_sysaux_hth3h3nv_.dbf' to '/data/oradata/CHENSEN/datafile/o1_mf_sysaux_hth3h3nv_.dbf';
SQL> alter database rename file '/data/oradata/CSLL/datafile/o1_mf_system_hth3h3ny_.dbf' to '/data/oradata/CHENSEN/datafile/o1_mf_system_hth3h3ny_.dbf';
SQL> alter database rename file '/data/oradata/CSLL/datafile/o1_mf_undotbs1_hth3h3v6_.dbf' to '/data/oradata/CHENSEN/datafile/o1_mf_undotbs1_hth3h3v6_.dbf';
SQL> alter database rename file '/data/oradata/CSLL/datafile/o1_mf_users_hth3h3wp_.dbf' to '/data/oradata/CHENSEN/datafile/o1_mf_users_hth3h3wp_.dbf';
SQL> alter database rename file '/data/oradata/CSLL/datafile/o1_mf_temp_hth4w51j_.tmp' to '/data/oradata/CHENSEN/datafile/o1_mf_temp_hth4w51j_.tmp';
SQL> alter database open;



------------------------------ FRA -------------------------------
数据库中fra概述
SYS@POC1:CDB$ROOT> select * from v$recovery_file_dest;

NAME                                     SPACE_LIMIT SPACE_USED SPACE_RECLAIMABLE NUMBER_OF_FILES     CON_ID
---------------------------------------- ----------- ---------- ----------------- --------------- ----------
/data/fast_recovery_area/poc1             8405385216 8342716928          18776064              28          0

SYS@POC1:CDB$ROOT> select * from v$recovery_area_usage;

FILE_TYPE               PERCENT_SPACE_USED PERCENT_SPACE_RECLAIMABLE NUMBER_OF_FILES     CON_ID
----------------------- ------------------ ------------------------- --------------- ----------
CONTROL FILE                           .22                         0               1          0
REDO LOG                              7.49                         0               3          0
ARCHIVED LOG                             0                         0               0          0
BACKUP PIECE                         69.07                       .22              15          0
IMAGE COPY                               0                         0               0          0
FLASHBACK LOG                        22.46                         0               9          0
FOREIGN ARCHIVED LOG                     0                         0               0          0
AUXILIARY DATAFILE COPY                  0                         0               0          0



##################  归档日志填满硬盘 ###############
解决方案1    先物理删除一些归档日志，然后RMAN里执行 delete force archivelog all completed before 'sysdate-1';
解决方案2    先物理删除一些归档日志，然后RMAN里更改retention policy
RMAN> configure archivelog deletion policy clear;

using target database control file instead of recovery catalog
old RMAN configuration parameters:
CONFIGURE ARCHIVELOG DELETION POLICY TO BACKED UP 2 TIMES TO DISK;
RMAN configuration parameters are successfully reset to default value

RMAN> delete archivelog all completed before 'sysdate-1';
最后再物理删除还在磁盘里的归档日志

############### RMAN删除归档日志不释放  #############
RMAN清除方式會自動清除磁碟上的歸檔日誌檔案，同時會釋放控制檔案中對應的歸檔日誌的歸檔資訊，但最近在使用中就遇到了一個問題，
下面這篇文章主要給大家介紹了關於解決Oracle RMAN刪除歸檔日誌不釋放問題的方法，需要的朋友可以參考下。

前言

當Oracle 歸檔日誌滿了後，將無法正常登入oracle，需要刪除一部分歸檔日誌才能正常登入ORACLE。

最近同事在工作中遇到一個問題，他那邊的一套Oracle 11g資料庫使用RMAN沒辦法刪除舊的歸檔，導致磁碟使用率很高。
解決過程

於是在網上找到一篇文章，大體意思是MAN刪除歸檔日誌的依據是controlfile中記錄的歸檔日誌，而不是你磁碟上實際存在的歸檔日誌，如果你的歸檔日誌已經不在controlfile中就無法被RMAN識別到，
也就無法被刪除。而致於歸檔資訊何時在控制檔案中被覆蓋，這由一個引數control_file_record_keep_time來控制。
檢視資料庫中的引數是預設的7天

SYS@db> show parameter CONTROL_FILE_RECORD_KEEP_TIME
NAME        TYPE       VALUE
------------------------------------ -------------------------------- ------------------------------
control_file_record_keep_time  integer       7
難道是在控制檔案中歸檔日誌的記錄條數只能保留7天的麼？於是到MOS去找相關文件找到一篇Why Are Controlfile Entries For Archived Logs Not Overwritten After CONTROL_FILE_RECORD_KEEP_TIME? 
(文件 ID 1056085.1)，文件介紹CONTROL_FILE_RECORD_KEEP_TIME引數並不是強制在控制檔案中保留多少天的歸檔日誌條目，而是由V$CONTROLFILE_RECORD_SECTION檢視中的ARCHIVED LOG條目去控制的，
當RECORDS_TOTAL=RECORDS_USED時舊的歸檔日誌就會被覆蓋掉。
於是查資料庫中的V$CONTROLFILE_RECORD_SECTION檢視，看到ARCHIVED LOG行的records_total=224意味著控制檔案中只能保留224條歸檔日誌檔案資訊。

SYS@dbs> select * from v$controlfile_record_section where type='ARCHIVED LOG';
TYPE      RECORD_SIZE RECORDS_TOTAL RECORDS_USED FIRST_INDEX LAST_INDEX LAST_RECID
---------------------------- ----------- ------------- ------------ ----------- ---------- ----------
ARCHIVED LOG      584   224   224   88  87  1235
查詢v$archived_log檢視，總數為224條

SYS@dbs> select count(*) from v$archived_log;
COUNT(*)
----------
224
這時應該可以推斷出由於控制檔案中只能保留224條歸檔日誌資料，所以以前的歸檔資訊已經被控制檔案刷出，RMAN無法識別到這些歸檔檔案，所以就無法刪除這些歸檔日誌。
那麼現在如果使用RMAN刪除這些舊的歸檔日誌呢？我想到使用catalog start with 命令重新註冊這些檔案到控制檔案中

RMAN> catalog start with '/opt/oracle/archive/db';
......
File Name: /opt/oracle/archive/db/1_1005_91233774.dbf
File Name: /opt/oracle/archive/db/1_1006_91233774.dbf
File Name: /opt/oracle/archive/db/1_1007_91233774.dbf
Do you really want to catalog the above files (enter YES or NO)? yes
cataloging files...
cataloging done
......
RMAN> list archivelog all;
.....
1236 1 301 A 22-OCT-16
Name: /opt/oracle/archive/db/1_301_91233774.dbf
1237 1 302 A 22-OCT-16
Name: /opt/oracle/archive/db/1_302_91233774.dbf
......
舊的歸檔日誌檔案已經註冊到控制檔案中了，再使用RMAN進行刪除就可以了

delete archivelog until logseq 1007;
再次查詢v$controlfile_record_section檢視，records_total也被“撐”大了

SYS@db> select * from v$controlfile_record_section where type='ARCHIVED LOG';
TYPE      RECORD_SIZE RECORDS_TOTAL RECORDS_USED FIRST_INDEX LAST_INDEX LAST_RECID
---------------------------- ----------- ------------- ------------ ----------- ---------- ----------
ARCHIVED LOG      584   896   742  807  652  1800
至此問題結束。


# 查看闪回区的内容
SYS@POC1:CDB$ROOT> select * from v$flash_recovery_area_usage;

FILE_TYPE               PERCENT_SPACE_USED PERCENT_SPACE_RECLAIMABLE NUMBER_OF_FILES     CON_ID
----------------------- ------------------ ------------------------- --------------- ----------
CONTROL FILE                           .22                         0               1          0
REDO LOG                              7.49                         0               3          0
ARCHIVED LOG                             0                         0               0          0
BACKUP PIECE                             0                         0               0          0
IMAGE COPY                               0                         0               0          0
FLASHBACK LOG                        29.94                     14.97              12          0
FOREIGN ARCHIVED LOG                     0                         0               0          0
AUXILIARY DATAFILE COPY                  0                         0               0          0

8 rows selected.

上面檢視中查詢的結果列出的所有型別的檔案，都可以利用閃回恢復區來存放、管理

#################  OSB  #################
--To configure Oracle Secure Backup for use with RMAN, perform the following steps in Oracle Secure Backup
--1. Configure RMAN access to the Oracle Secure Backup SBT. If you are using Enterprise Manager Database Control, then this step involves registering the administrative server with Enterprise Manager.
--2. Create an Oracle Secure Backup user preauthorized for RMAN operations
--3. Oracle recommends that you create media families for data files and archived redo logs. If you do not create your own media families, then by default RMAN uses the RMAN-DEFAULT media family.
--4. Optionally, configure database backup storage selectors or RMAN media management parameters. These settings give you more fine-grained control over storage selection for backups.
--5. Optionally, disable NUMA-awareness by setting the OB_IGNORE_NUMA to 0.


#########Incrementally Updated Backups
The following example shows how an incrementally updated backup can be used.

RUN {
  RECOVER COPY OF DATABASE WITH TAG 'mydb_incr_backup' UNTIL TIME 'SYSDATE - 7';
  BACKUP INCREMENTAL LEVEL 1 FOR RECOVER OF COPY WITH TAG 'mydb_incr_backup' DATABASE;
}
The RECOVER COPY... line will not do anything until the script has been running for more than 7 days. The BACKUP INCREMENTAL line will perform image copy backups 
the first day it is run (and for any new datafiles), with all subsequent backups being level 1 incremental backups. After 7 days, the RECOVER COPY... line will start to take effect,
 merging all incremental backups older than 7 days into the level 0 backup, effectively moving the level 0 backup forward. The effect of this is that you will permanently have a 7 day
 recovery window with a 7 day old level 0 backup and 6 level 1 incremental backups. Notice that the tag must be used to identify which incremental backups apply to which image copies.
 
 Note that it is not possible to duplex backup sets to the flash recovery area, 
 and that duplexing only applies to backup sets, not image copies
 
